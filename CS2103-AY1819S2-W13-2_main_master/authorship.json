[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d ClubManager"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::docs/images/clubmanager.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::images/clubmanager.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w13-2/main[image:https://travis-ci.org/cs2103-ay1819s2-w13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::docs/images/Ui2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::images/Ui2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d What is ClubManager?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* ClubManager is an *exciting and revolutionary* desktop application for CCA management. It comes with a GUI but"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "most of the user interactions takes place on the CLI (Command Line Interface) provided."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Our Target Users"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* ClubManager is specially designed for *CCA main committee members* to manage their CCA data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "It is the go-to application for CCA leaders who are looking for a software that"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "allows them to *seamlessly manage their members and activities*."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* This app comes with a laconic UI and the following features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Switch from Member Management Mode to Activity Mode."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Add, delete, edit, filter, find, list, select, sort and manage members\u0027 information."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Add, delete, filter, find, list, select, update, and manage activities."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Add and delete member from activity"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Display activities attended by member."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Export."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* This application is based on https://github.com/nus-cs2103-AY1819S1/addressbook-level4[AddressBook Level 4]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 13,
      "-": 28,
      "joel0111": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    archiveName \u003d \u0027clubmanager.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u0027site-name\u0027: \u0027Club-Manager\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w13-2/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 3,
      "-": 234
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "ClubManager was developed by team w13-2. This application builds on the existing work of the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Chan Ming En Minern"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::minernchan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "{empty}[http://github.com/minernchan[github]] [\u003c\u003cminernchan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Role: Developer (Testing) +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* In charge of Model."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Working on Activity Management feature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Joel Ng Zhi Hao"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::joel0111.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "{empty}[http://github.com/joel0111[github]] [\u003c\u003cjoel0111#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Role: Developer (Documentation) +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Responsible for the quality of the various project documents."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Other Roles"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* In charge of UI."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Working on Member Management feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Kevin Yeong Yu Heng"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::A0143487X-Kevin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "{empty}[http://github.com/A0143487X-Kevin[github]] [\u003c\u003cA0143487X-Kevin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Role: Developer (Integrator) +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* In charge of UI."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Development of mode of operation architecture and feature."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Working on file handling and export features."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Melissa Khoo Wan Xuan"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::melkwx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melkwx"
        },
        "content": "{empty}[http://github.com/melkwx[github]] [\u003c\u003cmelkwx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Role: Developer (Code Quality) +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* In charge of Logic."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Working on Member Management feature."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Yang Yiqing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::ivyyangyq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "{empty}[http://github.com/ivyyangyq[github]] [\u003c\u003civyyangyq#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* In charge of Storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Working on Activity Management feature."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "minernchan": 1,
      "A0143487X-Kevin": 9,
      "ivyyangyq": 3,
      "melkwx": 1,
      "-": 33,
      "joel0111": 30
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d ClubManager - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w13-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Welcome Developers! Thank you for your interest to contribute to Club Manager!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "By: `W13-2`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d About This Guide"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This guide provides a technical overview of Club Manager and walks you through the installation process."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Furthermore, this guide documents all of the features available in Club Manager, and covers everything that you need to know before you begin contributing to Club Manager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Club Manager is a desktop application that enables CCA leaders to manage their members and activities effectively and efficiently."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "To learn more about installation, proceed to Section 2 (Installation Guide)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Installation Guide"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This section serves to guide you through the setting up process of Club Manager\u0027s development environment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::LogicClassDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "// tag::modes_of_operation[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Operation mode control feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "ClubManager is designed to manage members and activities and allow the user to link members to the activities."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joel0111"
        },
        "content": "To synchronize the user interface to show appropriate information when users are doing different operation and to minimize confusion the following feature has been added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "With the implementation of modes of operations which only allows commands to be executed in their respective modes."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "For example when ClubManager is in Member Mode, only member commands can be called (for example memberAdd, memberEdit etc.)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".ClubManager in MEMBER mode"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::appInMemberMode.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Calling an activity command will result in an error."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".Error when Activity Command is called in MEMBER mode"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::appInMemberModeCallingActivityCmd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "General commands can be called in any mode (for example help and exit)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Currently the app has 2 modes of operation, namely member mode and activity mode."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "A coloured label on the top right corner indicates the mode of operation at any time to let the user easily track which mode the app is operating in."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::ModeMemberLabel.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".Indicator for mode in the Window"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::ModeActivityLabel.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Design of operation mode control"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Each Command extends a CommandType, currently MemberCommand, ActivityCommand and GeneralCommand"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "For each CommandType, there is an ArrayList of modes in where this category of command can operate in as seen in the class diagram."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "For example, for the MemberSelectCommand extends MemberCommands which the ArrayList of AppMode.Modes contains the MEMBER mode enumeration."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Which means that the MemberSelectCommand can only operate when ClubManager is in MEMBER mode."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".Example of Class Diagram for Member Commands"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::memberCommandClassDiagram.png[width\u003d\"800px\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "When the Command is created, it instantiates the operation modes. And when the execute function of the Command is called, the app would allow the execution of the command if the current app mode can be found within the the allowed mode list of the command."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "If the mode does not match, it will throw an exception preventing the execution and prompting the user to change the app mode (by using the mode command) before calling such a function."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "For example if mLIst (alias of memberList) command is called the following process occurs to either execute the command or throw the InvalidCommandModeException exception for the case that the command is called in the wrong mode."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".Sequence diagram of mode control"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::commandModeControl.png[width\u003d\"800px\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration to aid future expansion of app"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The design approach of the mode of operation control allows easy expansion of the app to manage more categories if required as the allowed modes of operation can be added to the ArrayList."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The feature is designed with easy reuse in mind by allowing the checking of mode to be done dynamically."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Since the modes which the command can operate in is stored as an ArrayList, future implementation of more modes of operation, can be added to the list. The current function to check the allowed mode will still be valid."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The design also allows the type of command to operate in and not be restricted to either a single mode or all modes but also any combination of modes."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "// end::modes_of_operation[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::memberlistfeature[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Member List Feature"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The Member\u0027s List is a core feature that underpins Club Manager\u0027s role as a CCA management system."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "joel0111"
        },
        "content": "To ensure versatility and enhance the usefulness of this list, a number of commands have been introduced to facilitate the management of members. These commands include: `MemberAdd`, `MemberDelete`, `MemberEdit`, `MemberFilter`, `MemberFind`, `MemberList`, `MemberSelect`, and `MemberSort`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model Component"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".Updated Model Component Class Diagram for Member List"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::person-attributes.png[width\u003d50%]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// end::memberlistfeature[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// tag::memberadd[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `memberAdd` Command"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This command takes in a number of parameters that are contact and student information pertaining to the member. The `MemberAddCommandParser` requires that all field are present, in the required format, with the exception of tags which are optional."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".Activity Diagram of Validations and Checks for MemberAddCommand"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::memberadd_validation.png[width\u003d100%]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Below is a step-by-step process on how the memberAdd command works on execution:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 1:* The User executes the `memberAdd` command"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 2:* The `memberAdd` command calls the `Model#hasPerson()` to prevent duplicated members from being added to the member\u0027s list."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 3:* Then, the `memberAdd` call `Model#hasMatricNumber` to prevent duplication of matric number within the member\u0027s list. This is because matric number are unique and no two students can have the same matric number."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 4:* Once these verification have been completed, the `memberAdd` command calls `Model#addPerson` to proceed with adding the member to the member\u0027s list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 5:* The `memberAdd` calls `Model#commitAddressBook()` to finalise the changes made to the patient record."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 6:* Finally, the `memberAdd` command provides a success message to indicate that the member has been successfully added to Club Manager."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The following code snippet shows how the `memberAdd` command is executed:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "joel0111"
        },
        "content": "----"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (model.hasPerson(toAdd)) { # \u003c1\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        } else if (model.hasMatricNumber(toAdd.getMatricNumber())) { # \u003c2\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MATRICNUMBER);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        model.addPerson(toAdd); # \u003c3\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "joel0111"
        },
        "content": "----"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c1\u003e Check if member already exists in Club Manager."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c2\u003e Check if the matric number entered is unique."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c3\u003e Add member to Club Manager."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//end::memberadd[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//tag::memberdelete[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `memberDelete` Command"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "melkwx"
        },
        "content": "The `memberDelete` command deletes a person (based on index) from the addressbook."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Below is a step-by-step process on how the `memberDelete` command works on execution:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 1:* The user executes the `memberDelete` command by specifying the index of the member that the user would like to delete."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 2:* The `memberDelete` command will call `model#getFilteredPersonList` to retrieve the members list."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 3:* Next, the `memberDelete` command will call `lastShownList#get` from which the given index will be used to pin point the specific"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "melkwx"
        },
        "content": "member in the `filteredPersonList`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 4:* Then, the `memberDelete` command will call `model#removeMemberFromAllAttendance` to remove the member from all actvities using the member\u0027s matriculation number."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 5:* Afterwards, the `memberDelete` command will call `model#deletePerson` to delete the person from the Club Manager."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 6:* Thereafter, the `memberDelete` command will call `model#commitAddressBook` to commit the changes to Club Manager."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 7:* Finally, the `memberDelete` command provides a success message to indicate that the member has been successfully deleted from Club Manager."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "melkwx"
        },
        "content": "The following code snippet shows how `memberDelete` command is executed:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "melkwx"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "melkwx"
        },
        "content": "----"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "melkwx"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList(); # (1)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX); # (2)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased()); # (3)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.removeMemberFromAllAttendance(personToDelete.getMatricNumber()); # (4)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.deletePerson(personToDelete); # (5)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "melkwx"
        },
        "content": "----"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c1\u003e Gets filtered person list"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c2\u003e Checks if index is valid"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c3\u003e Gets person from filtered person list"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c4\u003e Gets person\u0027s matriculation number and removes it from all activities"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c5\u003e Delete person from address book"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//end::memberdelete[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//tag::memberedit[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `memberEdit` Command"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "melkwx"
        },
        "content": "The `memberEdit` command edits a member\u0027s information."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Below is a step-by-step process on how the `memberEdit` command works on execution:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 1:* The user executes the `memberEdit` command by specifying the index of the member that the user would like to edit, followed by the prefix and information to be overwritten."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 2:* The `memberEdit` command will call `model#getFilteredPersonList` to retrieve the members list."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 3:* Next, the `memberEdit` command will call `lastShownList#get` from which the given index will be used to pin point the specific"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "melkwx"
        },
        "content": "member in the `filteredPersonList`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 4:* Then, the `memberEdit` command will call `createEditedPerson` to create a new member using the new information."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 5:* Afterwards, the `memberEdit` command will call `model#SetPerson` to replace the outdated member in the Club Manager."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 6:* Thereafter, the `memberEdit` command will call `model#updateFilteredPersonList` to update the filtered person list."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 7:* Finally, the `memberDelete` command provides a success message to indicate that the member has been successfully deleted from Club Manager."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "melkwx"
        },
        "content": "The following code snippet shows how `memberEdit` command is executed:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "melkwx"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "melkwx"
        },
        "content": "----"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "melkwx"
        },
        "content": " @Override"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList(); # (1)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX); # (2)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased()); # (3)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor); # (4)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) { # (5)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.setPerson(personToEdit, editedPerson); # (6)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS); # (7)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "melkwx"
        },
        "content": "----"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c1\u003e Gets filtered person list"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c2\u003e Checks if index is valid"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c3\u003e Gets person from filtered person list"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c4\u003e Creates new person using new information"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c5\u003e Checks if the new person created is the same as the old person"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c6\u003e Replace old entry of person with updated person"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c7\u003e Update filtered person list to show changes"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//end::memberedit[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//tag::memberfind[]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `memberFind` Command"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "melkwx"
        },
        "content": "The `memberFind` command finds all members in Club Manager that contain the keywords in their name or matricnum (as specified in command)."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Below is a step-by-step process on how the `memberFind` command works on execution:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 1:* The user executes the `memberFind` command by specifying the criteria and keyword(s)of the member that the user would like to find."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 2:* The `memberFind` command will call `model#getFilteredPersonList` to retrieve the members list of members whose name contains the name keywords or matricnum contains the matricnum keywords."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Step 3:*  Finally, the `memberFind` command shows an overview of the number of members found, and displays the members found."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "melkwx"
        },
        "content": "The following code snippet shows how `memberFind` command is executed:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "melkwx"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "melkwx"
        },
        "content": "----"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "melkwx"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (predicate.toString().equalsIgnoreCase(\"name\")) { # (1)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            model.updateFilteredPersonList(namePredicate); # (2)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        } else if (predicate.toString().equalsIgnoreCase(\"matricnum\")) { # (3)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            model.updateFilteredPersonList(matricNumPredicate); # (4)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "melkwx"
        },
        "content": "----"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c1\u003e Checks if criteria given is \"name\""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c2\u003e Updates filtered person list with members whose names contain the keyword"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c3\u003e Checks if criteria given is \"matricnum\""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003c4\u003e Updates filtered person list with members whose matriculation number contain the keyword"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//end::memberFind[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// tag::memberfilter[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `memberFilter` Command"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Logic Component*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".Sequence Diagram for MemberFilterCommand for the logic component."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::MemberFilter_Logic.png[width\u003d60%]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Model Component*"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".Sequence Diagram for MemberFilterCommand for the model component."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::MemberFilter_Model.png[width\u003d60%]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The `memberFilter` command retrieves members (based on a filter criteria) from the `UniquePersonList` and displays these members on the `PersonListPanel`."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Below is a step-by-step process on how the `memberFilter` command works on execution:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 1: The user executes the `memberFilter` command."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 2: The `memberFilter` command parser will check if the filter category entered by the user is valid. Note that this is case-insensitive."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 3: Thereafter, the `memberFilter` command parser will concatenate the keywords (if there are more than one keyword). This will allow users to filter majors with multiple words."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 4: The `memberFilter` command will then call `Model#updateFilteredPersonList` to filter the member\u0027s list based on the given criteria."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 4 (Continued): In this process, based on the criteria provided, the relevant predicate class"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "joel0111"
        },
        "content": "(e.g. `YearOfStudyContainsKeywordsPredicate`) will be used and its test method will be called to test if the member in the member\u0027s list has an exact match of the given keyword. This gradually filters the member\u0027s list. Do note, however,"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "joel0111"
        },
        "content": "the list generated will given as it is (no sorting carried out). Depending on the initial ordering of the member\u0027s list, the list may or may not appear to be sorted."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 5: The `memberFilter` command will then call `Model#getFilteredPersonList()` to get the filtered member\u0027s list."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 6: Finally, the memberFilter command provides a success message to indicate that the member\u0027s list has been successfully filtered."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Aspect:* Predicate Classes"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "joel0111"
        },
        "content": "To check if the user input matches the correct criteria, there are various ways. Below are some options:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Alternative 1 (current choice)*: Check through MemberFilterCommandParser Class"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Pros : More organised and logical as parser classes handle the user input."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Cons : May be less efficient as check has to be done through looping through the criteria one by one."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Alternative 2*: Check through individual predicate classes."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Pros: More time efficient as only one check is required."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Cons: Less logical and could prove to be confusing to the developer."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "joel0111"
        },
        "content": "For future implementation, the `memberFilter` command could allow more than one filter, which will further allow the user to target a specific subset of members."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// end::memberfilter[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// tag::memberlist[]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `memberList` Command"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The `memberList` command retrieves all the members in the `UniquePersonList` and displays all these members on the `PersonListPanel`."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Below is a step-by-step process on how the `memberList` command works on execution:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 1: The user executes the `memberList` command."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 2: The `memberList` command will then call the `Model#UpdateFilteredPersonList()` to retrieve all the members in the UniquePersonList."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Step 3: The `memberList` provide the command success message to indicate that the member list has been successfully listed."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::memberlist[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// tag::memberselect[]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `memberSelect` Command"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The `memberSelect` command selects a member (based on index) on the `UniquePersonList`."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Below is a step-by-step process on how the `memberSelect` command works on execution:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 1:* The user executes the `memberSelect` command by specifying the index of the member that the user would like to select."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 2:* The `memberSelect` command will call `model#getFilteredPersonList` to retrieve the member\u0027s list."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 3:* Next, the `memberSelect` command will call `model#setSelectedPerson` from which the given index will be used to pin point the specific"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "joel0111"
        },
        "content": "member in the `filteredPersonList`."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 4:* Finally, the `memberSelect` command will show a command success message to indicate the member at the specified index has been successfully selected."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The `memberSelect` command is naturally tied with the User Interface."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".Updated Ui Component Class Diagram"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::updatedUIcomponent.png[width\u003d50%]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "joel0111"
        },
        "content": "When a member is selected, the `memberDetailPanel` will populate the information of the selected person. The `ActivitiesAttendedByMemberPanel` will also populate the activities that are attended by member."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "joel0111"
        },
        "content": "For the population of member statistics, it is less straightforward. The calling flow is UI to Logic to Model. This is illustrated in the diagram below."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".Sequence Diagram of MemberSelectCommand"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::memberselect_sequence.png[width\u003d50%]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Aspect:* UI calling methods from the AddressBook class"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "joel0111"
        },
        "content": "There are various ways to cal the statistics methods from UI. Below are some options:"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Alternative 1 (current choice):* Go through the calling flow of UI to logic to model."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Pros: Abstraction principle is observed."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Cons: More tedious for the developer to implement methods that UI requires."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Aternative 2:* Go through Model directly."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Pros: Abstraction principle is violated."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Cons: Less tedious to implement."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::memberselect[]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// tag::membersort[]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d MemberSort"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The `memberSort` command extends from `MemberCommand`, and modifies the `uniquePersonList` which is an observable list. The user will provide a sorting criteria,"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "joel0111"
        },
        "content": "and the `memberSort` command will sort the members in the `uniquePersonList` based on the sorting criteria."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "joel0111"
        },
        "content": "If the sorting criteria is not name, the `memberSort` command will"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "joel0111"
        },
        "content": "will conduct an additional sort (by name). For example, `memberSort yearOfStudy 2` will be sorted by member\u0027s yearOfStudy, followed by member\u0027s name."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".Sequence Diagram of MemberSortCommand"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::membersort_sequencediagram.png[width\u003d70%]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 1:* The user executes the `memberSort` command by specifying the sorting criteria in which the user would like to sort the list."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 2:* The `memberSort` command will call `model#sortAddressBook` to retrieve the member\u0027s list."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Step 3:* Finally, the `memberSort` command will show a command success message to indicate that the member\u0027s list has been successfully sorted."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "joel0111"
        },
        "content": "// end::membersort[]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "// tag::memberexport[]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d MemberExport"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".Sequence diagram for export function"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::MemberExportCommand_LogicComponentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The `memberExport` command extends from command and retrieves the Person object from the Model based on the specified index"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The `exportPerson` command is called with the Person object being pass into the function as a parameter. The function will get the formatting as defined in resources/exportutil personInfo.html"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The formatted string in html mark up is then passed to the `exportDataToFile` function which then creates the file and writes to it."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* If the index specified in invalid, an error message will be displayed"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Currently the exported file is in html format. The formatted document is responsive to the screen size giving 2 options."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* For large screens (diagram below)"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".Exported file on large screens"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::MemberExportExample.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* For smaller mobile screens (diagram below)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".Exported file on mobile screens"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::MemberExportExampleMobile.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* For future implementation, the `memberExport` would be able to take in an additional parameter for the selection of export format."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "// end::memberexport[]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::activity_list[]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Activity List Feature"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "One basic feature of `ClubManager` is to display and manage either a list of all the activities or some particular"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "activities that the club has. `activityAdd` , `activityList` , `activityFilter` , `activityFind` and"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityDelete` commands contribute to this feature."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Updated Model Component to Store Activity List"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Structure of the Activity Model Component"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ModelComponentWithActivityList.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The updated `Model`,"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cActivity\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Each activity can have a `List` of `MatricNumber` Object for attendance."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Activity Add Command"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityAdd` command enables users to create a new activity with name, datetime, location. User could"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "also provide additional description."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "When user enters the command `activityAdd` in `Command Box`, the following sequence of events would occur:"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 1. An `ActivityAddCommandParser` would be generated based on user\u0027s inputs. +"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The presence of required prefixes and whether any prefixes are duplicated would be checked. +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Inputs would be checked in respective parser utils. +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If all checks pass, an `ActivityAddCommand` would be generated with the specified `Activity`."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 2. `ActivityAddCommand` would be executed by calling `ActivityAddCommand#execute` and it would attempt to"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "add the new `Activity` to `Model` by calling `Model#addActivity` +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Whether the `Activity` can be added to `Model` would be checked in this step."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Sequence of Checks for Adding Activity"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ActivityAddChecks.png[width\u003d\"600\" height\u003d\"300\"]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Activity Filter Command"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityFilter` command enables users to filter activities based on the time. Either past or"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "future activities would be filtered based on the condition in the user input."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityFilter` mechanism is facilitated by `ActivityFilterCommand`, `ActivityFilterCommandParser`,"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`ActivityDateTimeAfterPredicate` and `ActivityDateTimeBeforePredicate`."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Given below is an example usage scenario and how the `ActivityFilterCommand` is carried out at each step."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 1. The users want to find all future `Activity` scheduled for the next seven days by inputting"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFilter + 7` in the command box."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 2. The `ActivityFilterCommandParser` will parse the input and generate an `ActivityDateTimeAfterPredicate`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "based on the `+` condition given. The predicate will be passed to `ActivityFilterCommand`."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 3. The `ActivityFilterCommand` will call the `execute` function by executing `Model#updateFilteredActivityList`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 4. `AddressBook` will be committed due to potential update to `ActivityStatus` for each `Activity`."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The following diagram is a partial sequence diagram that summarises what happens when the user call"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`ActivityFilterCommand` starting from `ActivityFilterCommandParser`."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Activity Filter Command Sequence Diagram"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ActivityFilterCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Activity Find Command"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityFind` command enables users to search for activities with specific keywords in some attribute"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "fields(i.e `ActivityName`, `ActivityDescription` and `ActivityLocation`)."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The structure and sequence of events after `activityFind` command is called is very similar to that of"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFilter`. The one difference is, instead of generating a predicate based on conditions, the"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`ActivityFindCommandParser` would parse the input into a `Map` of `Prefix` mapped to a `List` of `String`(keywords)"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " and pass the map to generate an `ActivityContainsKeywordPredicate`."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "To avoid redundancy and repeating diagrams with minor details, the sequence of events could refer to the steps and"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "sequence diagram for `ActivityFilterCommand` given above."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The key component of `ActivityFindCommand` is the `ActivityContainsKeywordsPredicate#test` function. The snippet"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "of code below is to show how it is implemented."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "----"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    // all attribute fields are searched."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    if (keywords.containsKey(PREFIX_ALL)) {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return keywords.get(PREFIX_ALL).stream()"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().fullActivityName, keyword)"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || StringUtil.containsWordIgnoreCase(activity.getDescription().value, keyword)"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || StringUtil.containsWordIgnoreCase(activity.getLocation().value, keyword));"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     // OR search for a single boolean"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   boolean isNameMatched \u003d keywords.get(PREFIX_ACTIVITYNAME) \u003d\u003d null"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "       || keywords.get(PREFIX_ACTIVITYNAME).stream()"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "           .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().fullActivityName, keyword));"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   boolean isDescriptionMatched \u003d keywords.get(PREFIX_ADESCRIPTION) \u003d\u003d null"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "       || keywords.get(PREFIX_ADESCRIPTION).stream()"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "           .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getDescription().value, keyword));"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   boolean isLocationMatched \u003d keywords.get(PREFIX_LOCATION) \u003d\u003d null"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "       || keywords.get(PREFIX_LOCATION).stream()"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "           .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getLocation().value, keyword));"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   // AND search between prefixes"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return isNameMatched \u0026\u0026 isDescriptionMatched \u0026\u0026 isLocationMatched;"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "----"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Here is some usage scenarios to better elucidate the logic of the predicate use:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If a user want to find some `Activity` with name `Workshop` or `Outing`, it could be achieved by typing"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFind n/Workshop Outing`."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If a user want to find some `Activity` with name `Movie` or `Viewing` and the location is a `cinema`,"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFind n/Movie Viewing l/cinema` could be used. +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`Activity` with `Movie Panel Discussion` as `ActivityName`, `Club Room` as `ActivityLocation` would not be displayed"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "by this command because it does not match the keyword provided by the location prefix."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If no `Prexfix` is found, e.g. `activityFind Summer`, all `Activity` with `Summer` in any of the three"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "fields would be listed."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This section describes the pros and cons of the current implementation of the activity list"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "feature."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating the status of activities"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 1(current choice):** Loop through the entire `ActivityList` in `AddressBook` each time"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the predicate to `FilteredActivityList` is updated."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Ensures that all the status of `Activity` displayed by most command calls are accurate and every"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`Activity` is in the sorted position whenever the list is displayed. The given code snippet below demonstrates"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "how this is achieved."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    //in ModelManager.java"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        updateActivityList(); //loop through activitylist to update any outdated status"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        filteredActivities.setPredicate(predicate);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: The update function would be called for most activity commands, as it loops through the entire `ActivityList`,"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "it would make the app slower in performance. There may be unnecessary loops as well."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 2:** Implement an `activityUpdate` command and `ActivityStatus` would only be updated when"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the command is called."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Faster in performance."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: `ActivityStatus` displayed in the List may be outdated and the `Activity` might not be in the correct"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "sorted position."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to specify search field for `activityFind`"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 1 (current choice):** Search conditions are specified by `Prefix` such as `n/` for `ActivityName`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Similar to other activity commands such as `activityAdd` or `activityEdit`. More accurate results."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: May be hard for new users to remember and understand the logic."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 2:** Use `name` etc. as search conditions."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: More intuitive for new users."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: Inconsistency with other activity commands. It may yield incorrect results as the app need to"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "distinguish whether an input is a keyword or a search condition."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activity_list[]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "minernchan"
        },
        "content": "//tag::activity_edit[]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d Activity Edit Features"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "minernchan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Activity Edit Command"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "minernchan"
        },
        "content": "`ClubManager` allows users to make changes to the information fields of activities that are currently in its activity list."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "minernchan"
        },
        "content": "The `activityEdit` command allows users to edit the name, datetime, location and description fields of existing activities in the activity list."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "minernchan"
        },
        "content": "At least one of the fields must be different from the existing record of the activity the user is trying to edit."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "minernchan"
        },
        "content": "When the command is entered, an `ActivityEditCommandParser` is created with the inputs provided by the user. +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "minernchan"
        },
        "content": "The ActivityEditCommandParser object would then validate the prefixes in the inputs and compare it with the current fields of the activity to check if there are any changes to be made. +"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "minernchan"
        },
        "content": "After that, the individual inputs would be validated in the parser utils. Finally, if the checks pass, an `ActivityEditCommand` object would be returned."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "minernchan"
        },
        "content": "The execute command of the `ActivityEditCommand` object would then be called, and it will replace the existing Activity object (that the user wants to edit) with"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "minernchan"
        },
        "content": "a new Activity object created with the updated fields, and any other previous information if certain fields are not edited."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "minernchan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Activity Add Member Command"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "minernchan"
        },
        "content": "The `activityAddMember` command allows users to add members to the attendance list of an activity. The provided MatricNumber must be a valid MatricNumber and must belong to"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "minernchan"
        },
        "content": "a member in the member list."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "minernchan"
        },
        "content": "When the `activityAddMember` command is executed from the UI, the inputs are parsed with the `ActivityAddMemberCommandParser` object which checks the validity of the MatricNumber."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "minernchan"
        },
        "content": "If the inputs are valid, the `ActivityAddMemberCommand` is returned from the Parser object and the execute function is called. The first check would be if the provided activity"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "minernchan"
        },
        "content": "index number is valid, relative to the currently displayed activity list. Then, the Command object will check whether the MatricNumber belongs to a member in the member list. Finally,"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "minernchan"
        },
        "content": "it will check that the MatricNumber provided does not belong to a member already in the activity\u0027s attendance list."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "minernchan"
        },
        "content": "If all the checks pass, the MatricNumber object containing the member\u0027s matric number will be stored in an ArrayList object(which represents the attendance list) belonging to the activity."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".Sequence Diagram for `activityAddMember` command"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "minernchan"
        },
        "content": "image::ActivityAddMember_SequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".Object Diagram displaying the relationship between Activity and Person when using `activityAddMember` command."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "minernchan"
        },
        "content": "image::ActivityAddMember_ObjectDiagram.PNG[width\u003d\"600\" height\u003d\"300\"]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "minernchan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Activity Delete Member Command"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "minernchan"
        },
        "content": "The `activityDeleteMember` command allows users to remove members from the attendance list of an activity. The provided MatricNumber must be a valid MatricNumber and must belong to"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "minernchan"
        },
        "content": "a member in the member list."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "minernchan"
        },
        "content": "When the `activityDeleteMember` command is executed from the UI, the inputs are parsed with the `ActivityDeleteMemberCommandParser` object which checks the validity of the MatricNumber."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "minernchan"
        },
        "content": "If the inputs are valid, the `ActivityDeleteMemberCommand` is returned from the Parser object and the execute function is called. The first check would be if the provided activity"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "minernchan"
        },
        "content": "index number is valid, relative to the currently displayed activity list. Then, the Command object will check whether the MatricNumber belongs to a member in the member list. Finally,"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "minernchan"
        },
        "content": "it will check that the MatricNumber provided belongs to a member already in the activity\u0027s attendance list."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "minernchan"
        },
        "content": "If all the checks pass, the MatricNumber object containing the member\u0027s matric number will be removed from the ArrayList object(which represents the attendance list) belonging to the activity."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activity_edit[]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::implementationconfiguration[]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::implementationconfiguration[]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/MemberFindCommand.java[`MemberFindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `MemberFindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::productscope"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "joel0111"
        },
        "content": ". Allow users to manage club members faster and more effectively than a typical mouse/ GUI-driven app."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "joel0111"
        },
        "content": ". Allow users to plan activities better based on members’ interest."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "joel0111"
        },
        "content": ". Avoid errors that stem from inaccurate members record (e.g. not keying in CCA points for the member due to inaccurate attendance data)."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "joel0111"
        },
        "content": ". Improve the data collection accuracy and efficiency in the member management process."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::productscope"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::userstories"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* * *` |CCA main committee member |see who are the members in my CCA |track the CCA’s current membership level"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* * *` |CCA main committee member |see which members are attending an activity |plan the activity according to the participation rate."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* * *` |CCA main committee member |view the activities that a member has participated. |better select applicants for the main committee positions."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`*` |CCA main committee member |see the payments of each member |track the payments of each member."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |sort members into categories (e.g. race, nationality, religion, gender, year of study).  |target specific groups of members based on the type of activities offered by the CCA (e.g. interfaith CCA, Sports Club)."
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |add new members to the CCA |see the new members in the list"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |delete members from the CCA |see the new members in the list"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |see what are the ongoing and upcoming activities of the CCA |sign up for activities I am interested in."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`*` |CCA main committee member |view the list of people who have not made payment based on activity |request payment from these members"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`*` |CCA main committee member |conduct surveys |gather feedback from users"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* * *` |CCA main committee member |Import and export members data |easily enter new members’ information from the annual CCA fair."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |to have a calendar that shows the activities |plan my schedule"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |Record the attendance of members |see the new members in the list."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`*` |CCA main committee member |send a quick SMS/email to members |inform them of any upcoming activities"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |track the attendance of members |Identify members who are inactive"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |add event tags to members |record which members are going for which events"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* *` |CCA main committee member |remove tags from members |keep the address book neat after an event has concluded"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`* * *` |CCA main committee member |create an activity list |see the upcoming events"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::userstories"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add Member"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to add a specific member in the list"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager adds the member"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Use case ends."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Member"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Admin requests to list persons"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager shows a list of members"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific member in the list"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Club Manager deletes the member"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Use case: Sort Member\u0027s List"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "joel0111"
        },
        "content": "1.  User requests to sort the Club Manager by a sorting criteria (e.g. name, yearOfStudy)."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "joel0111"
        },
        "content": "2.  Club Manager sorts the members by given criteria. Thereafter, Club Manager sorts the members by name."
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Club Management System shows the sorted list."
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Member"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager shows a list of members"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to edit details of a member in the displayed list"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Club Manager edits the details of the specified member with given information."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d Use case: List Members"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "melkwx"
        },
        "content": "2.  Club Manager shows a list of members"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "melkwx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "melkwx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d Use case: Select Member"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "melkwx"
        },
        "content": "1.  User requests to select a specific member in the list by the index number."
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "melkwx"
        },
        "content": "2.  Club Manager shows the details of the specific person in the list."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "melkwx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* 2a. List is empty."
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* 2b. Member does not exist in the list."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** 2b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d Use case: Find Member"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "melkwx"
        },
        "content": "1.  User requests to find a specific member."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "melkwx"
        },
        "content": "2.  Club Manager shows the specific member."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "melkwx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* 2a. List is empty."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* 2b. Member does not exist in the list."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** 2b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* 2c. The search index is not unique."
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** 2c1. Club Manager shows a list of all members who match the search index."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "melkwx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add Activity"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to add a new activity in the list"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager adds the activity"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The given input is invalid."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Activity"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to edit details of an activity in the displayed list"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Club Manager edits the details of the specified member with given information."
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index or parameters is/are invalid."
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// tag::activityAddMember[]"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Use case: Add Member to Activity"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to add a member to the attendance list of an activity"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Club Manager adds the member to the activity\u0027s attendance list"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given activity index is invalid"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "* 3b. The specified member does not exist."
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "** 3b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "* 3c. The specified member is already in the attendance list."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "** 3c1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activityAddMember[]"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// tag::activityDeleteMember[]"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Use case: Remove Member from Activity"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to remove a member from the attendance list of an activity"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Club Manager removes the member to the activity\u0027s attendance list"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given activity index is invalid"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "* 3b. The specified member does not exist."
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "** 3b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "* 3c. The specified member is not in the attendance list."
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "** 3c1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activityDeleteMember[]"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// tag::activityDelete[]"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Activity"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to permanently delete an activity from the activity list"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Club Manager deletes the activity."
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given activity index is invalid"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activityDelete[]"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: List Activity"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. User requests to list activities"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Select Activity"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. User requests to list activities"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3. User request to select an activity from the displayed list"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4. Club Manager shows the details of the selected activity"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Find Activity"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. User requests to find activities based on keywords"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Club Manager finds the activities with the given keywords"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3. Club Manager displays the list of activities that matches the keywords"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 1a. Keyword input is invalid"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+[none]"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 1a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The list is empty"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::non-functional-requirements"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::non-functional-requirements"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::glossary"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This section is designed to provide you with definitions for"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "joel0111"
        },
        "content": "terms that are used in this document below."
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[CLI]] CLI::"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Command Line Interface"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[CCA]] CCA::"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Co-Curricular Activities"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[crud]] Create, Read, Update and Delete (CRUD)::"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Basic functions of a database"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[GUI]] GUI::"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Graphical User Interface"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Main-Committee-Member]] Main Committee Member::"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "joel0111"
        },
        "content": "A person who is in the core team of organisers for the CCA."
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Sub-Committee-Member]] Sub-Committee Member::"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "joel0111"
        },
        "content": "A person who is an active member of the CCA, but do not play any organiser role."
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::glossary"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::product-survey"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Product Name:* EventBank"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Author: Joel Ng"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Has necessary relevant features to a member management system"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Available in Desktop and Mobile Platforms."
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Easy to use and set up activities for members."
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Does not clearly differentiate the Users application and the managers application well. This caused managers to download the users application."
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Interface could be more intuitive e.g. allowing preview of corporate members."
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* No training document provided. Users have to contact the support manager for “how to” questions."
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::product-survey"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Adding a member"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "joel0111"
        },
        "content": "You are adding a new member to Club Manager"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Instructions:"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberAdd n/Lim Sun Yong mn/A0187456N p/87961012 e/johnd@example.com a/311, Tiong Bahru Ave 5, #12-03 g/Male y/2 m/Law t/Tennis"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "joel0111"
        },
        "content": "` +"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* New member added: Lim Sun Yong Matric Number: A0187456N Phone: 87961012 Email: johnd@example.com Address: 311, Tiong Bahru Ave 5, #12-03 Gender: Male Year of Study: Year 2 Major: Law Tags: [Tennis]"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberAdd n/Tan Xun Song mn/A0192595N p/811619921 e/txs@example.com a/311, Jurong West Ave 3, #12-03 g/Female y/2 m/Medicine t/Archery` +"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* Phone numbers should only start with 6, 8 or 9, and it should be only be 8 digits long."
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberAdd n/Tan Xun Song mn/A0187456N p/81161992 e/txs@example.com a/311, Jurong West Ave 3, #12-03 g/Female y/2 m/Medicine t/Archery` +"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* This matricNumber already exists in Club Manager."
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberAdd n/Tan Xun Song mn/A0192595Z p/81161992 e/txs@example.com a/311, Jurong West Ave 3, #12-03 g/Female y/2 m/Medicine t/Archery` +"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* MatricNumber should only contain alphanumeric characters, starting with an A and ending with an uppercase alphabet, with 7 digits in between the first and last character. The last letter must be a valid checksum."
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberAdd n/Tan Xun Song mn/A0192595N p/81161992 e/txs@example.com a/311, Jurong West Ave 3, #12-03 g/chicken y/2 m/Medicine t/Archery` +"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* Gender should be Male or Female, and it should not be blank"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberAdd n/Tan Xun Song mn/A0192595N p/81161992 e/txs@example.com a/311, Jurong West Ave 3, #12-03 g/Female y/0 m/Medicine t/Archery` +"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* YearOfStudy should only contain a single digit between 1 to 6 and it should not be blank"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Filtering Member\u0027s List"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberFilter yearofstudy 2` +"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* _ member(s) listed!!"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Listing all Members"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberList` +"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* Listed all persons"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Select a Member"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberSelect 1` +"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* Selected Person: 1"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberSelect 0` +"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* Invalid command format!"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "joel0111"
        },
        "content": "               memberSelect: Selects the member identified by the index number used in the displayed member list."
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "joel0111"
        },
        "content": "               Parameters: INDEX (must be a positive integer)"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Sorting Member\u0027s List"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberSort name` +"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* Members\u0027 list successfully sorted!"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".. *Test case:* `memberSort names` +"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "joel0111"
        },
        "content": "   *Expected:* Invalid command format!"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "joel0111"
        },
        "content": "               memberSort: Sorts all members in the members\u0027 list based on the specified attribute (case-insensitive)."
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "joel0111"
        },
        "content": "               Parameters: KEYWORD..."
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Modes of Operation Feature for `mode`"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". Initial launch mode"
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. App should start in MEMBER mode, indicated by the label on the top right corner of app window."
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `mode` +"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Returns \u0027Mode MEMBER\u0027 in the Result Display Panel."
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". Mode changes correctly from MEMBER"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in MEMBER mode"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `mode MEMBER` +"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Returns \u0027Mode is already: MEMBER\u0027."
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `mode ACTIVITY` +"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Returns \u0027Mode changed to ACTIVITY\u0027, and is indicated by the label on the top right corner of app window."
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". Mode changes correctly from ACTIVITY"
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in ACTIVITY mode."
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `mode ACTIVITY` +"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Returns \u0027Mode is already: ACTIVITY\u0027."
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `mode MEMBER` +"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Returns \u0027Mode changed to MEMBER\u0027, and is indicated by the label on the top right corner of app window."
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". Only Member Commands and Generic Commands work in MEMBER mode"
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in MEMBER mode."
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `memberSelect 1` +"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Person at index 1 of the list is selected. Member details panel shows details of person at index 1. Returns \u0027Selected Person: 1\u0027."
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `activityList` +"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Error message \u0027Invalid command mode! Allowed Mode : ACTIVITY\u0027 and prompt mode usage to change mode."
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `help` +"
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Help window opens."
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". Only Activity Commands and Generic Commands work in ACTIVITY mode"
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in ACTIVITY mode."
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `activitySelect 1` +"
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "  Expected: Activity at index 1 of the list is selected. Activity details panel shows details of activity at index 1. Returns \u0027Selected Activity: 1\u0027."
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `memberList` +"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "  Expected: Error message \u0027Invalid command mode! Allowed Mode : MEMBER\u0027 and prompt mode usage to change mode."
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `help` +"
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "  Expected: Help window opens."
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". ClubManager mode resets in MEMBER mode after `clear` operation in MEMBER mode."
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in MEMBER mode."
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `clear` +"
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: App in mode MEMBER indicated by the label on the top right corner of app window."
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". ClubManager mode resets in MEMBER mode after `clear` operation in ACTIVITY mode."
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in ACTIVITY mode."
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `clear` +"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: App in mode MEMBER indicated by the label on the top right corner of app window."
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Prerequisites: List all persons using the `memberList` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `memberDelete 1` +"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `memberDelete 0` +"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Other incorrect delete commands to try: `memberDelete`, `memberDelete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "melkwx"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d Editing a person"
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "melkwx"
        },
        "content": ". Editing a person while all persons are listed"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Prerequisites: List all persons using the `memberList` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Test case: `memberEdit 1 yos/4` +"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "melkwx"
        },
        "content": "   Expected: First contact\u0027s year of study is changed to Year 4. New details shown in status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Test case: `memberEdit 1 mn/A0157138B` +"
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "melkwx"
        },
        "content": "   Expected: First contact matriculation number is not edited. Error on status message says that matriculation number cannot be edited. Status bar remains the same."
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Other incorrect edit commands to try: `memberEdit 0`, `memberEdit 1 n/`, `memberEdit 1 z/` +"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "melkwx"
        },
        "content": "   Expected: No person is edited. Error details shown in the status message. Similar to previous."
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d\u003d Finding a person"
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "melkwx"
        },
        "content": ". Finding a person while all persons are listed"
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Prerequisites: List all persons using the `memberList` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Test case: `memberFind name john` +"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "melkwx"
        },
        "content": "   Expected: All members whose names contain fully or partially \"john\" will be displayed. Status message shows number of members found. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Test case: `memberFind john` +"
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "melkwx"
        },
        "content": "   Expected: Display does not change. Error message shown on status message. Timstamp remains the same."
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "melkwx"
        },
        "content": ".. Other incorrect find commands to try: `memberFind hello`, `memberFind `, any case which does not have the correct criteria (\"name\" or \"matricnum\" only) +"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Activity List Feature"
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Adding an activity to the activity list - `activityAdd`"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Prerequisites: The ClubManager in `mode activity`. The activity to add is not already in the list."
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "No duplicated activities or time and location clash for the activity to add."
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `activityAdd n/Test activity d/25/06/2019 1900 l/NUS de/test activity` +"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Activity added to the correct location in the list."
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `activityAdd n/Test activity d/25/06/2019 2500 l/NUS de/test activity` +"
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Error message with prompt for correct time input format."
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Other incorrect activity add commands to try: `activityAdd`, `activityAdd x/` (where x"
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "is an invalid prefix), `activityAdd n/Some activity d/20/03/2019 1000 d/30/03/2019 2039 l/here`"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(activity with duplicated prefix) ... +"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    Expected: Error message."
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Finding activities based on keywords - `activityFind`"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Prerequisites: The ClubManager in `mode activity`. Some activities matching the keywords are in"
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the activity list."
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `activityFind CS2103` +"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Activities with `CS2103` in `name` or `location` or `description` are listed"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `activityFind n/Movie Outing` +"
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Activities with name containing either `Movie` or `Outing` will be listed."
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `activityFind d/20/02/2019 0910` +"
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Error message."
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Other incorrect input for `activityFind` command: `activityFind`, `activityFind n/` +"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Error message"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Filtering activities - `activityFilter`"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Prerequisites: The ClubManager in `mode activity`. Some activities in the activity list."
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `activityFilter + 30` +"
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Upcoming activities in the next 30 days are listed."
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `activityFilter -3` +"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Error message in result display about incorrect result format."
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Other incorrect input for `activityFilter` command: `activityFilter + 0`,"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFilter + randomsomething` +"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Same as above."
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d Editing an activity"
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "minernchan"
        },
        "content": ". Editing an activity while all activities are listed."
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Prerequisites: List all activities using the `aList` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `activityEdit 1 n/New Activity d/13/02/2019 1200 l/Com1 de/Bring calculator` +"
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Expected: Edited Activity: New Activity Date Time: 13/02/2019 1200 Location: Com1 Description: Bring calculator Number Attending: \"NUM_ATTENDING\""
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `aEdit 0` +"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "minernchan"
        },
        "content": "   Expected: Invalid command format!"
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d Deleting an activity"
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "minernchan"
        },
        "content": ". Deleting an activity while all activities are listed."
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Prerequisites: List all activities using the `aList` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `activityDelete 1` +"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Expected: Deleted Activity: \"ACTIVITY DETAILS\""
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `activityDelete 99` (if there are only 10 activities in the list) +"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "minernchan"
        },
        "content": "   The activity index provided is invalid"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d Adding a member to an activity\u0027s attendance list"
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "minernchan"
        },
        "content": ". Adding a member to an activity while all activities are listed."
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Prerequisites: List all activities using the `aList` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `aAddMember 1 A0111111M` +"
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Expected: Successfully added to selected Activity: 1"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `aAddMember 1 A1234567N` +"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "minernchan"
        },
        "content": "   Expected: MatricNumber should only contain alphanumeric characters, starting with an A and ending with an uppercase alphabet, with 7 digits in between the first and last character."
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "minernchan"
        },
        "content": "   The last letter must be a valid checksum."
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d\u003d Deleting a member from an activity\u0027s attendance list"
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "minernchan"
        },
        "content": ". Deleting a member from an activity while all activities are listed."
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Prerequisites: List all activities using the `aList` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `activityDeleteMember 1 A0111111M` +"
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Expected: Successfully removed member from selected Activity: 1"
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "minernchan"
        },
        "content": ".. Test case: `activityDeleteMember 1 A0111111M` +"
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "minernchan"
        },
        "content": "   Expected: The person is not in the activity attendance list!"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Export Feature for MEMBER `memberExport` or `mExport`"
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". App exports member data to file when index if member exists in list."
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in MEMBER mode. There is a member in the list at index 1 and none at index 999."
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `memberExport` +"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Error message, shows command usage instructions."
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `mExport` +"
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Error message, shows command usage instructions."
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `memberExport 1` +"
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: File created at root folder where the jar file is situated."
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `memberExport 999` +"
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Retuens \u0027The member index provided is invalid.\u0027. No file is created."
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Export Feature for ACTIVITY `activityExport` or `aExport`"
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ". App exports member data to file when index if member exists in list."
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Prerequisites: ClubManager is in ACTIVITY mode. There is an activity in the list at index 1 and none at index 999."
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `activityExport` +"
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Error message, shows command usage instructions."
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `aExport` +"
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Error message, shows command usage instructions."
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `activityExport 1` +"
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: File created at root folder where the jar file is situated."
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".. Test case: `activityExport 999` +"
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "   Expected: Returns \u0027The activity index provided is invalid.\u0027. No file is created."
      }
    ],
    "authorContributionMap": {
      "minernchan": 102,
      "A0143487X-Kevin": 159,
      "ivyyangyq": 272,
      "melkwx": 214,
      "-": 1149,
      "joel0111": 315
    }
  },
  {
    "path": "docs/DeveloperGuide_abrev.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d ClubManager - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w13-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::LogicClassDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::modes_of_operation[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Operation mode control feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ClubManager is designed to manage members and activities and allow the user to link members to the activities."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "To syncronize the user interface to show appropriate information when users are doing different operation and to minimize confusion the following feature has been added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "With the implementation of modes of operations which only allows commands to be executed in their respective modes."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "For example when ClubManager is in Member Mode, only member commands can be called (for example memberAdd, memberEdit etc.)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::appInMemberMode.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Calling an activity command will result in an error."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::appInMemberModeCallingActivityCmd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "General commands can be called in any mode (for example help and exit)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Currently the app has 2 modes of operation, namely member mode and activity mode."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Design of operation mode control"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Each Command extends a CommandType, currently MemberCommand, ActivityCommand and GeneralCommand"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "For each CommandType, there is an ArrayList of modes in where this category of command can operate in."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "When the Command is created, it instatiates the operation modes. And when the execute function of the Command is called, the app would allow the execution of the command if the current app mode can be found within the the allowed mode list of the command."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If the mode does not match, it will throw an exception preventing the execution and prompting the user to change the app mode (by using the mode command) before calling such a function."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "A coloured label on the top right corner also indicates the mode of operation at any time to let the user easily track which mode the app is operating in."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ModeMemberLabel.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ModeActivityLabel.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration to aid future expansion of app"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The design approach of the mode of operation control allows easy expansion of the app to manage more categories if required."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The feature is designed with easy reuse in mind by allowing the checking of mode to be done dynamically."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Since the modes which the command can operate in is stored as an ArrayList, future implementation of more modes of operation, can be added to the list. The current function to check the allowed mode will still be valid."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The design also allows the type of command to operate in and not be restricted to either a single mode or all modes but also any combination of modes."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::modes_of_operation[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::membersort[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d MemberSort"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::MemberSortCommand_LogicComponentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The `memberSort` command extends from command, and modifies the uniquePersonList which is an observable list."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* It takes in a criteria from the user, and checks if the input from the user matches any of the available"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "sorting criteria provided."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If the user input matches, the uniquePersonList will be sorted based on that criteria"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If the user input does not match, then an error message will be prompted to the user."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//end::membersort[]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::memberexport[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d MemberExport"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::MemberExportCommand_LogicComponentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The `memberExport` command extends from command and retrieves the Person object from the Model based on the specified index"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The `exportPerson` command is called with the Person object being pass into the function as a parameter. The function will get the formatting as defined in resources/exportutil personInfo.html"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The formatted string in html mark up is then passed to the `exportDataToFile` function which then creates the file and writes to it."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If the index specified in invalid, an error message will be displayed"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Currently the exported file is in html format. The formatted document is responsive to the screen size giving 2 options."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* For large screens (diagram below)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::MemberExportExample.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* For smaller mobile screens (diagram below)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::MemberExportExampleMobile.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* For future implementation, the `memberExport` would be able to take in an additional parameter for the selection of export format."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::memberexport[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::activity_list[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Activity List Feature"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "One basic feature of `ClubManager` is to display and manage either a list of all the activities or some particular"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "activities that the club has. `activityAdd` , `activityList` , `activityFilter` , `activityFind` and"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityDelete` commands contribute to this feature."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Updated Model Component to Store Activity List"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Structure of the Activity Model Component"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ModelComponentWithActivityList_copy.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The updated `Model`,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cActivity\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Each activity can have a `List` of `MatricNumber` Object for attendance."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Activity Add Command"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityAdd` command enables users to create a new activity with name, datetime, location. User could"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "also provide additional description."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "When user enters the command `activityAdd` in `Command Box`, the following sequence of events would occur:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 1. An `ActivityAddCommandParser` would be generated based on user\u0027s inputs. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The presence of required prefixes and whether any prefixes are duplicated would be checked. +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Inputs would be checked in respective parser utils. +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If all checks pass, an `ActivityAddCommand` would be generated with the specified `Activity`."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 2. `ActivityAddCommand` would be executed by calling `ActivityAddCommand#execute` and it would attempt to"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "add the new `Activity` to `Model` by calling `Model#addActivity` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Whether the `Activity` can be added to `Model` would be checked in this step."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Sequence of Checks for Adding Activity"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ActivityAddChecks.png[width\u003d\"500\", height\u003d\"300\"]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Activity Filter Command"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityFilter` command enables users to filter activities based on the time. Either past or"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "future activities would be filtered based on the condition in the user input."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityFilter` mechanism is facilitated by `ActivityFilterCommand`, `ActivityFilterCommandParser`,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`ActivityDateTimeAfterPredicate` and `ActivityDateTimeBeforePredicate`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Given below is an example usage scenario and how the `ActivityFilterCommand` is carried out at each step."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 1. The users want to find all future `Activity` scheduled for the next seven days by inputting"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFilter + 7` in the command box."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 2. The `ActivityFilterCommandParser` will parse the input and generate an `ActivityDateTimeAfterPredicate`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "based on the `+` condition given. The predicate will be passed to `ActivityFilterCommand`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 3. The `ActivityFilterCommand` will call the `execute` function by executing `Model#updateFilteredActivityList`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Step 4. `AddressBook` will be committed due to potential update to `ActivityStatus` for each `Activity`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The following diagram is a partial sequence diagram that summarises what happens when the user call"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`ActivityFilterCommand` starting from `ActivityFilterCommandParser`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Activity Filter Command Sequence Diagram"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ActivityFilterCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Activity Find Command"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The `activityFind` command enables users to search for activities with specific keywords in some attribute"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "fields(i.e `ActivityName`, `ActivityDescription` and `ActivityLocation`)."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The structure and sequence of events after `activityFind` command is called is very similar to that of"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFilter`. The one difference is, instead of generating a predicate based on conditions, the"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`ActivityFindCommandParser` would parse the input into a `Map` of `Prefix` mapped to a `List` of `String`(keywords)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " and pass the map to generate an `ActivityContainsKeywordPredicate`."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The key component of `ActivityFindCommand` is the `ActivityContainsKeywordsPredicate#test` function. The snippet"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "of code below is to show how it is implemented."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "----"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    // all attribute fields are searched."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    if (keywords.containsKey(PREFIX_ALL)) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return keywords.get(PREFIX_ALL).stream()"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .anyMatch(...); //String util to check if keywords in ActivityName or ActivityDescription"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }                       // or ActivityLocation"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     // OR search for a single boolean"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   boolean isNameMatched \u003d keywords.get(PREFIX_ACTIVITYNAME) \u003d\u003d null"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "       || keywords.get(PREFIX_ACTIVITYNAME).stream()"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "           .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().fullActivityName, keyword));"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   boolean isDescriptionMatched \u003d ... //checking if keywords in description"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   boolean isLocationMatched \u003d  ... // checking if keywords in location"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   // AND search between prefixes"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   return isNameMatched \u0026\u0026 isDescriptionMatched \u0026\u0026 isLocationMatched;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "----"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Here is some usage scenarios to better elucidate the logic of the predicate use:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If a user want to find some `Activity` with name `Workshop` or `Outing`, it could be achieved by typing"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFind n/Workshop Outing`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If a user want to find some `Activity` with name `Movie` or `Viewing` and the location is a `cinema`,"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityFind n/Movie Viewing l/cinema` could be used. +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`Activity` with `Movie Panel Discussion` as `ActivityName`, `Club Room` as `ActivityLocation` would not be displayed"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "by this command because it does not match the keyword provided by the location prefix."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If no `Prexfix` is found, e.g. `activityFind Summer`, all `Activity` with `Summer` in any of the three"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "fields would be listed."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This section describes the pros and cons of the current implementation of the activity list"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "feature."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating the status of activities"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 1(current choice):** Loop through the entire `ActivityList` in `AddressBook` each time"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the predicate to `FilteredActivityList` is updated."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Ensures that all the status of `Activity` displayed by most command calls are accurate and every"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`Activity` is in the sorted position whenever the list is displayed. The given code snippet below demonstrates"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "how this is achieved."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    //in ModelManager.java"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        updateActivityList(); //loop through activitylist to update any outdated status"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        filteredActivities.setPredicate(predicate);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: The update function would be called for most activity commands, as it loops through the entire `ActivityList`,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "it would make the app slower in performance. There may be unnecessary loops as well."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 2:** Implement an `activityUpdate` command and `ActivityStatus` would only be updated when"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the command is called."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Faster in performance."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: `ActivityStatus` displayed in the List may be outdated and the `Activity` might not be in the correct"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "sorted position."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to specify search field for `activityFind`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 1 (current choice):** Search conditions are specified by `Prefix` such as `n/` for `ActivityName`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: Similar to other activity commands such as `activityAdd` or `activityEdit`. More accurate results."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: May be hard for new users to remember and understand the logic."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* **Alternative 2:** Use `name` etc. as search conditions."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Pros: More intuitive for new users."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Cons: Inconsistency with other activity commands. It may yield incorrect results as the app need to"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "distinguish whether an input is a keyword or a search condition."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activity_list[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::implementationconfiguration[]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::implementationconfiguration[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/MemberFindCommand.java[`MemberFindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `MemberFindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Allow users to manage club members faster and more effectively than a typical mouse/ GUI-driven app."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Allow users to plan activities better based on members’ interest."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Avoid errors that stem from inaccurate members record (e.g. not keying in CCA points for the member due to inaccurate attendance data)."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Improve the data collection accuracy and efficiency in the member management process."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* * *` |CCA main committee member |see who are the members in my CCA |track the CCA’s current membership level"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* * *` |CCA main committee member |see which members are attending an activity |plan the activity according to the participation rate."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* * *` |CCA main committee member |view the activities that a member has participated. |better select applicants for the main committee positions."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`*` |CCA main committee member |see the payments of each member |track the payments of each member."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |sort members into categories (e.g. race, nationality, religion, gender, year of study).  |target specific groups of members based on the type of activities offered by the CCA (e.g. interfaith CCA, Sports Club)."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |add new members to the CCA |see the new members in the list"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |delete members from the CCA |see the new members in the list"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |see what are the ongoing and upcoming activities of the CCA |sign up for activities I am interested in."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`*` |CCA main committee member |view the list of people who have not made payment based on activity |request payment from these members"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`*` |CCA main committee member |conduct surveys |gather feedback from users"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* * *` |CCA main committee member |Import and export members data |easily enter new members’ information from the annual CCA fair."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |to have a calendar that shows the activities |plan my schedule"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |Record the attendance of members |see the new members in the list."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`*` |CCA main committee member |send a quick SMS/email to members |inform them of any upcoming activities"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |track the attendance of members |Identify members who are inactive"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |add event tags to members |record which members are going for which events"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* *` |CCA main committee member |remove tags from members |keep the address book neat after an event has concluded"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`* * *` |CCA main committee member |create an activity list |see the upcoming events"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Add Member"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to add a specific member in the list"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager adds the member"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  Use case ends."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 2a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Member"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  Admin requests to list persons"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows a list of members"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  User requests to delete a specific member in the list"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4.  Club Manager deletes the member"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Sort Member\u0027s List"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to sort the Club Manager by a sorting criteria (e.g. name, yearOfStudy)."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager sorts the members by given criteria. Thereafter, Club Manager sorts the members by name."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  Club Management System shows the sorted list."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 2a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Member"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows a list of members"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  User requests to edit details of a member in the displayed list"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4.  Club Manager edits the details of the specified member with given information."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: List Members"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows a list of members"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Select Member"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to select a specific member in the list by the index number."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows the details of the specific person in the list."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. List is empty."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2b. Member does not exist in the list."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 2b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Find Member"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to find a specific member."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows the specific member."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. List is empty."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2b. Member does not exist in the list."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 2b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2c. The search index is not unique."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 2c1. Club Manager shows a list of all members who match the search index."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Add Activity"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to add a new activity in the list"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager adds the activity"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The given input is invalid."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 2a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Activity"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  User requests to edit details of an activity in the displayed list"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4.  Club Manager edits the details of the specified member with given information."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The given index or parameters is/are invalid."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::activityAddMember[]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Add Member to Activity"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  User requests to add a member to the attendance list of an activity"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4.  Club Manager adds the member to the activity\u0027s attendance list"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The given activity index is invalid"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3b. The specified member does not exist."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3c. The specified member is already in the attendance list."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3c1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityAddMember[]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::activityDeleteMember[]"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Remove Member from Activity"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  User requests to remove a member from the attendance list of an activity"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4.  Club Manager removes the member to the activity\u0027s attendance list"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The given activity index is invalid"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3b. The specified member does not exist."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3b1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3c. The specified member is not in the attendance list."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3c1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityDeleteMember[]"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::activityDelete[]"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Activity"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1.  User requests to list activities"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2.  Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3.  User requests to permanently delete an activity from the activity list"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4.  Club Manager deletes the activity."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The given activity index is invalid"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityDelete[]"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: List Activity"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. User requests to list activities"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Select Activity"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. User requests to list activities"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Club Manager shows a list of activities"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3. User request to select an activity from the displayed list"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "4. Club Manager shows the details of the selected activity"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 3a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Use case: Find Activity"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Main Success Scenario (MSS)*"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "1. User requests to find activities based on keywords"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "2. Club Manager finds the activities with the given keywords"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "3. Club Manager displays the list of activities that matches the keywords"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 1a. Keyword input is invalid"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+[none]"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** 1a1. Club Manager shows an error message."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* 3a. The list is empty"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This section is designed to provide you with definitions for"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "terms that are used in this document below."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[CLI]] CLI::"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Command Line Interface"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[CCA]] CCA::"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Co-Curricular Activities"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[crud]] Create, Read, Update and Delete (CRUD)::"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Basic functions of a database"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[GUI]] GUI::"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Graphical User Interface"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Main-Committee-Member]] Main Committee Member::"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "A person who is in the core team of organisers for the CCA."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Sub-Committee-Member]] Sub-Committee Member::"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "A person who is an active member of the CCA, but do not play any organiser role."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Product Name:* EventBank"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Author: Joel Ng"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Has necessary relevant features to a member management system"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Available in Desktop and Mobile Platforms."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Easy to use and set up activities for members."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Does not clearly differentiate the Users application and the managers application well. This caused managers to download the users application."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Interface could be more intuitive e.g. allowing preview of corporate members."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* No training document provided. Users have to contact the support manager for “how to” questions."
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1607
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d ClubManager - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w13-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "By: `W13-2`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::introduction[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "ClubManager is for Co-Curricular Activities (CCAs) leaders who *prefer to use a desktop app for managing their members"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "and activities*. More importantly, ClubManager is *optimized for those who prefer to work with a Command Line Interface*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ClubManager can get"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "started. Enjoy!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::introduction[]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".  Download the latest `clubmanager.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your ClubManager."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *`memberList`* : lists all members (only in member mode)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *`memberAdd n/James Ong mn/A0123456Y p/98765432 e/jamesong@example.com a/123, Jurong West Ave 6, #08-111 g/male y/2 m/mathematics`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* : adds a member named"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`James Ong` to the ClubManager."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *`memberDelete 3`* : deletes the 3rd member shown in the current member list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::userinterface[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d User Interface Walkthrough"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This section is designed to guide you through how the user interface and components in Club Manager works."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Here is an example of how Club Manager in member mode looks like:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::memberUiWalkthrough.png[width\u003d\"100%\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Here is an example of how Club Manager in activity mode looks like:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::activityUiWalkthrough.png[width\u003d\"100%\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::userinterface[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "In total, there are:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *5 General Parts:* \u003c\u003c#Menu-Bar, Menu Bar\u003e\u003e, \u003c\u003c#Result-Display, Result Display\u003e\u003e, \u003c\u003c#Command-Box, Command Box\u003e\u003e, \u003c\u003c#SSB, Sync Status Bar\u003e\u003e, \u003c\u003c#Mode-Status, Mode Status\u003e\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *3 Member Mode-specific Parts:* \u003c\u003c#Member-List, List of Members\u003e\u003e, \u003c\u003c#Member-Display, Member Information Display Panel\u003e\u003e, \u003c\u003c#Member-Activities, List of Activities Attended By Selected Member\u003e\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *4 Activity Mode-specific Parts:* \u003c\u003c#Activity-List, List of Activities\u003e\u003e, \u003c\u003c#Activity-Display, Activity Information Display Panel\u003e\u003e, \u003c\u003c#Activity-Members, List of Members Attending Selected Activity\u003e\u003e, and \u003c\u003c#Activity-Nonmembers, List of Members Not Attending Selected Activity\u003e\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Menu-Bar]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Menu Bar"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The *Menu Bar* provide you quick access to functions as below."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Here are the available options currently:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* File: Provide access to file functions."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Exit: Exit the program."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Help: Show Club Manager tutorial."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "You can also press F1 to show Club Manager User Guide."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Command-Box]]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Command Box"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The *Command Box* is the place where you can input the commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Result-Display]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Result Display"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The *Result Display* shows information relating to the result of the command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[SSB]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Sync Status Bar"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The *Sync Status Bar* displays the last updated date and time of any changes to the data."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Mode-Status]]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Mode Status"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays the *current mode* of Club Manager. There are only 2 modes, namely: `mode member` and `mode activity`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Member-List]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d List of Members"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays latest *list of all members* in Club Manager."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Member-Display]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Member Information Display Panel"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays the *selected member\u0027s information.*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Member-Activities]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d List of Activities Attended By Selected Member"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays the *list of Activities attended by selected member*. This include both completed and ongoing activities."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Activity-List]]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d List of Activities"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays latest *list of all activities* in Club Manager."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Activity-Display]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Activity Information Display Panel"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays the *selected activity\u0027s information.*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Activity-Members]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d List of Members Attending Selected Activity"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays the *list of Members who is attending or have attended* the selected activity."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[[Activity-Nonmembers]]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d List of Members Not Attending Selected Activity"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays the *list of Members who is not attending or have not attended* the selected activity."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/Swimming` or as `n/John Doe`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/Swimming`, `t/Running t/Hockey` etc."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d General Features"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "//tag::mode[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Get / Set the mode of ClubManager: `mode`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "ClubManager operates in 2 modes. This function allows user to check the mode or change the mode +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "The operation mode restricts the operations you can call in each mode."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "When using ClubManager, you can check the mode of operation on the top right hand corner of the window which will either state \"MEMBER\" or \"ACTIVITY\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"25%,55%, \u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|Mode| Definition | Example of allowed commands"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|`member`| Member Management Mode"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "This mode allows the user to manage members in ClubManager"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " | `memberAdd`,  `memberFind`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " |`activity`| Activity Management Mode"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " This mode allows the user to manage members in ClubManager"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  | `activityAdd`, `activityList`, `activitySelect`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "  |[_any mode_]| In any mode, general functions can be called|`help`, `mode`, `exit` |"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* `mode [MODE_CHOICE]`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "If MODE_CHOICE is left blank, returns current mode"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* `mode`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Returns current management mode of ClubManager"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* `mode activity`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Changes current management mode of ClubManager to Activity"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* `mode member`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Changes current management mode of ClubManager to Member"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "//end::mode[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Clears all entries from the Club Manager. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Displays a list of commands and the help messages to guide the user."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Member Management Features"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::memberCommands.png[width\u003d\"70%\"]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::memberadd[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a member: `memberAdd` or `mAdd`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joel0111"
        },
        "content": "You can add members to ClubManager. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"10%,85%, 5%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|Information of Member| Definition | Example"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Name`| NAME refers to the name of the member."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Only alphabets are accepted. | John Sim"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Matric Number`| MATRIC_NUMBER refers to the member\u0027s matriculation number."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Matric Number is a string of 9 alphanumeric characters."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joel0111"
        },
        "content": "For the first alphabet of the Matric Number, only the uppercase letter A or uppercase letter U will be accepted."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This will be followed by a 7 digits. The final character is an uppercase alphabet which has tally with the alphabet generated by our checksum generator."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joel0111"
        },
        "content": "If an error occurs, it could mean that a wrong final character of the Matric Number has been inputted."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joel0111"
        },
        "content": "| A0123456Z"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Phone Number`| PHONE_NUMBER refers to the member\u0027s phone number."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Only 8 digits are accepted. The first digit of the phone number has to begin with 6, 8, 9.| 91234567"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Email Address`| EMAIL_ADDRESS refers to the member\u0027s student/personal email address| johnsim@example.com"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Address`| ADDRESS refers to the member\u0027s home address."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Alphanumeric and Special characters are acceptable.| Jurong East Avenue 1 Block 2 #03-04"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Gender`| GENDER refers to the sex of the member."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Only \"Male\" or \"Female\" is accepted (case-insensitive)|Male"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Year of Study`| YEAR_OF_STUDY refers to the academic level (in years)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joel0111"
        },
        "content": "in which the member is currently studying."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Only a single digit is accepted. This digit has to be between the range 1 to 6 (both inclusive)| 2"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Major`| MAJOR refers to the field of discipline in which member is currently enrolled in."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Only alphabets are accepted.| Chemistry"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Tags`|TAGS refers to the hobbies and interests of the member."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Only Alphabets are acceptable, restricted to a single word."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joel0111"
        },
        "content": "A member can have any number of tags (including 0).|Swimming"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberAdd n/NAME mn/MATRIC_NUMBER p/PHONE_NUMBER e/EMAIL a/ADDRESS g/GENDER y/YEAR_OF_STUDY m/MAJOR [t/TAG]...`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberAdd n/Jon Lim mn/A0123456J p/98765432 e/johnl@example.com a/123, Woodlands Drive 12, #12-34 g/Male y/2 m/Chemistry t/Swimming`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberAdd n/James Ong mn/A0123456J p/98765432 e/jamesong@example.com a/123, Jurong West Ave 6, #08-111 g/male y/2 m/mathematics`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberAdd n/Jane Lim mn/A0654321J p/91324756 e/janelim@example.com a/123, Sengkang Ave 6, #02-123 g/Female y/3  m/physics t/Swimming`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::memberAdd_added.png[width\u003d70%]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::memberadd[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//tag::memberdelete[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a member : `memberDelete` or `mDelete`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Deletes the specified member from ClubManager. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `memberDelete INDEX`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joel0111"
        },
        "content": "****"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Deletes the member at the specified `INDEX`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Member will be deleted from activity attendance list as well."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`memberDelete 2` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Deletes the 2nd member in ClubManager."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* `memberFind name Betsy` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`memberDelete 1` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Deletes the 1st member in the results of the `find` command."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//end::memberdelete[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//tag::memberedit[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a member : `memberEdit` or `mEdit`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Edits an existing member in ClubManager. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Format: `memberEdit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GENDER] [yos/YEAR_OF_STUDY] [m/MAJOR] [t/TAG]...`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Edits the member at the specified `INDEX`. The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joel0111"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* NOTE: Matriculation Number cannot be edited"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* You can remove all the member\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberEdit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Edits the phone number and email address of the 1st member to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberEdit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Edits the name of the 2nd member to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//end::memberedit[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::memberfilter[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering member\u0027s list: `memberFilter or mFilter`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "joel0111"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Filter the member\u0027s list based on a filter criteria."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Keywords pertaining to the filter criteria have to be provided."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Criteria could be: Gender, Major and yearOfStudy."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Filter criteria and keywords are case-insensitive."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Keywords have to be an exact match."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "joel0111"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `memberFilter yearOfStudy`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberFilter yearOfStudy 2`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::memberfilter[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::memberFilter1.png[width\u003d70%]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberFilter gender male`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Coming in v2.0:* Filter more than one criteria, to find a subgroup of members."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//tag::memberfind[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Locating members by name: `memberFind` or `mFind`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Finds members whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Format: `memberFind CRITERIA KEYWORD [MORE_CRITERIA] [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Partial or full words will be matched e.g. `Han` will match `Hans`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* members matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* CRITERIA could be \"name\" or \"matricnum\" only (case insensitive)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name John` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name Betsy Tim John` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Returns any member having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* `memberFind matricnum A0` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Returns all members (matric num starts with A0)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "melkwx"
        },
        "content": "//end::memberfind[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::memberlist[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Listing members : `memberList` or `mList`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Shows a list of all members in ClubManager. +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `memberList`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::memberlist[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::MemberList.png[width\u003d20%]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::memberselect[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a member : `memberSelect`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Selects the member identified by the index number used in the displayed member list. +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `memberSelect INDEX`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Selects the member and loads the members page of the member at the specified `INDEX`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`memberSelect 2` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Selects the 2nd person in the club manager."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::memberselect[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::memberSelectCommand.png[width\u003d70%]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::membersort[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Sort members’ list : `memberSort` or `mSort`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Sort the members list by a member’s attribute in ascending order"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Format*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "joel0111"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"30%,\u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|Sort By | Command Example"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Name` |memberSort name"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Gender` |memberSort Gender"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Year of Study` |memberSort yearOfStudy"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|`Major` |memberSort major"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "joel0111"
        },
        "content": "****"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Sorts the member list according to the specified sorting criteria. The attribute refers to the name, matric number, phone number, email, year of study, and major. There can only be a single attribute provided."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* At least one of the sorting criteria are provided."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Members will be sorted in ascending order based on the sorting criteria."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Within each of the sort criteria, the members are further sorted by name in ascending order."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "joel0111"
        },
        "content": "****"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Sorts the member at the specified attribute. The attribute refers to the name, admin number, phone number, email, year of study, and major. There can only be a single attribute provided."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* At least one of the attributes are provided."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Members will be sorted in ascending order based on the attribute."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`memberSort name` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Sorts the list by name."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::membersort[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "joel0111"
        },
        "content": "image::MemberSortCommand_sortby_name.png[width\u003d50%]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`memberSort yearOfStudy` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Sorts the list by year of study."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "//tag::memberexport[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting details of a member : `memberExport` or `mExport`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Export the details of the member identified by the index number used in the displayed member list. +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Format: `memberExport INDEX`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Exports the details of member at the specified `INDEX`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "`memberExport 2` +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Export the details of the 2nd person in the address book."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name Betsy` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "`memberExport 1` +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Export the details of the 1st member in the results of the `find` command."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::MemberExportExample.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "The exported file will be stored in the same directory where ClubManager is installed in."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "File name with the following format:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "NameOfPerson_xxxxx_exportedOnDDMMYYYY_HHMMSS.html"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "//end::memberexport[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Activity Management Features"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::activityAdd[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an activity : `activityAdd` or `aAdd`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Adds a new activity to the activity list +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"30%,\u003c50%, \u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Information of Activity| Definition | Example"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityName`| ACTIVITY_NAME refers to the name of the activity."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " Only alphabets are accepted. | Sentosa Outing"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityDateTime`| DATETIME refers to the date and time of the activity"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Activity Date and time should be in \"dd/MM/YYYY HHMM\" format, where dd, MM, YYYY refers"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "to day of month, month and year respectively. HH refers to the hour in 24 hour format ("
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "0-23). | 28/02/2019 2359"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityLocation`| LOCATION refers to the location of an activity|Kent Ridge MRT"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityDescription`| DESCRIPTION refers to the detailed description of the activity"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Meeting at MRT before leaving together."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityAdd n/ACTIVITY_NAME d/DATETIME l/LOCATION [de/DESCRIPTION] ...`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Inputing description is optional. If no description is found, the default description will be"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\"More details to be added.\""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The added activity will be displayed at the sorted position according to its time. +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The most recent ongoing activities will be display on top while the most recent completed activity will be at"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the bottom of the list."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Activities with the same time and location cannot be added."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityAdd n/Sentosa Outing d/16/02/2019 1000 l/Harbour Front MRT de/Bring swim suits.`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityAdd n/HTML workshop d/14/02/2019 l/ICube Auditorium`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ActivityAddCommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Adding activity to the correct position based on the time."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityAdd[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// tag::activityAddMember[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Add a member to activity `activityAddMember` or `aAddM`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Adds an existing member to an existing activity to indicate that they will be going for the activity."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `activityAddMember ACTIVITY_INDEX MATRIC_NO`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Adds a member to the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* MATRIC_NO must be a currently existing entry in any existing member’s MATRIC_NO information column in the member list and not currently in the activity\u0027s attendance list."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `activityAddMember 1 A1234567N` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Adds the member with matric number `A1234567N` to the attending list for activity 1."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activityAddMember[]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// tag::activityDelete[]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an activity `activityDelete` or `aDelete`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Deletes an existing activity in the activity list"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `activityDelete ACTIVITY_INDEX`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Deletes the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `activityDelete 1` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Deletes the first activity in the displayed activity list"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activityDelete[]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// tag::activityDeleteMember[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a member from activity `activityDeleteMember` or `aDeleteM`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Removes an existing member who has already indicated that he/she will be attending the activity from the attending list of the activity."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `activityDeleteMember ACTIVITY_INDEX MATRIC_NO`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "joel0111"
        },
        "content": "****"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Removes a member from the attending list of the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* MATRIC_NO must be a currently existing entry in the specified activity’s attendance list."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "joel0111"
        },
        "content": "****"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `activityDeleteMember 1 A1234567N` +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Removes the member with matric number A1234567N from activity 1’s attending list."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activityDeleteMember[]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// tag::activityEdit[]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an activity: `activityEdit` or `aEdit`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing activity in the activity list"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `activityEdit ACTIVITY_INDEX [n/ACTIVITY_NAME] [d/DATE] [t/TAG] … `"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the activity will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the activity’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* `activityEdit 1 n/New Activity d/13/02/2019 1200 l/Com1 de/Bring calculator` +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "minernchan"
        },
        "content": "Edits the name of the first activity, datetime, location and description to \"New Activity\", \"13 February 2019 1200 hrs\", \"Com1\" and \"Bring calculator\" respectively."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* `activityEdit 2 l/NUS` +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "minernchan"
        },
        "content": "Edits the location of the second activity to \"NUS\"."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "minernchan"
        },
        "content": "// end::activityEdit[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::activityFilter[]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering activities by date: `activityFilter` or `aFilter`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Filters the activities that is the given number of days away from today (inclusive)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "and displays them as a list with index numbers."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityFilter CONDITION NUMBEROFDAYS`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The filter condition must be specified. `+` is to filter future activities and `-` is to filter past activities."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `NUMBEROFDAYS` refers to the range of days from the current date."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `NUMBEROFDAYS` *must be a postive integer* `1 2 3`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFilter + 7` +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns future activities scheduled in the next 7 days (including today)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFilter - 30` +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns past activities from the last 30 days (inclusive)."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Finding activities by criteria: `activityFind` or `aFind`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Finds all activities whose attribute contain any of the specified keywords"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(case-insensitive) and displays them as a list with index numbers. +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityFind [PREFIX] KEYWORD [MORE_KEYWORDS] [NEXT_PREFIX KEYWORD] [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The search is case insensitive. e.g `workshop` will match `Workshop`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The order of the keywords does not matter. e.g. `Talk Seminar` will match `Seminar Talk`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The search parameter is determined by the prefixes.  `n/` searches for match in ActivityName; `l/` searches for match in"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ActivityLocation; `de/` searches for matches in ActivityDescription."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If no prefix is provided, the activities with any fields matching the keywords would be returned."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Only full words will be matched e.g. `CS` will not match `CSS`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* For a specific prefix, activities matching at least one keyword will be returned (i.e. `OR` search within the prefix)."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `HTML workshop` will return `HTML camp`, `CSS workshop`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If more than one prefixes are entered, only activities matching all the prefixes\u0027 conditions will be returned"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(i.e. `AND` search between prefixes). e.g. `n/Sentosa Dance l/Icube MRT` will only return activities with name that contains"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`Sentosa` or `Dance` and location that contains `Icube` or `MRT`."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFind de/ free` +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns activities with description `Free food` and `Free giveaway`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFind n/ HTML CSS Javascript` +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Returns any activity having names `HTML`, `CSS`, or `Javascript`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFind n/Workshop Lecture l/Auditorium` +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns any activity having name `Workshop` or `Lecture`, and the location is `Auditorium`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all activities : `activityList` or `aList`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Shows a list of all activities in the activity list. +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `activityList`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If the status of some activities have changed from `ONGOING` to `COMPLETED`, the"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityList` command will automatically update the status of these activities."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ActivityListCommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting an activity : `activitySelect` or `aSelect`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Selects the activity identified by the index number used in the displayed activity list. +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Format: `activitySelect ACTIVITY_INDEX`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Selects the activity and displays the specific details of the activity at the specified `ACTIVITY_INDEX`."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `activityList` +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`activitySelect 2` +"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Selects the 2nd person in the displayed activity list."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* `activityFind workshop` +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "joel0111"
        },
        "content": "`activitySelect 1` +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Selects the 1st activity in the results of the `find` command."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//end::activityFilter[]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "//tag::activityexport[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting details of an activity : `activityExport` or `aExport`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Export the details of the activity identified by the index number used in the displayed activity list. +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Format: `activityExport INDEX`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "****"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Exports the details of activity at the specified `INDEX`."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The index refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "****"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* `activityList` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "`activityExport 2` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Export the details of the 2nd activity in the address book."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* `memberFind name Swimming Class` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "`activityExport 1` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Export the details of the 1st activity in the results of the `find` command."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "image::ActivityExportExample.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "The exported file will be stored in the same directory where ClubManager is installed in."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "File name with the following format:"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "NameOfActivity_xxxxx_exportedOnDDMMYYYY_HHMMSS.html"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "//end::activityexport[]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//tag::commandsummary"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This section provides a comprehensive list of commands that ClubManager offers."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Mode* : `mode [MODE_CHOICE]` +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "joel0111"
        },
        "content": "e.g. `mode member`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Member Management Commands"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Add a member* : `memberAdd n/NAME mn/MATRIC_NUMBER p/PHONE_NUMBER e/EMAIL g/GENDER yos/YEAR_OF_STUDY m/MAJOR [t/TAG]...` +"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "melkwx"
        },
        "content": "e.g. `memberAdd n/James Ong mn/A0123456Y p/98765432 e/jamesong@example.com g/male yos/1 m/mathematics`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Delete a member* : `memberDelete INDEX` +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "joel0111"
        },
        "content": "e.g. `memberDelete 3`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Edit a member* : `memberEdit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GENDER] [yos/YEAR_OF_STUDY] [m/MAJOR] [t/TAG]...` +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "joel0111"
        },
        "content": "e.g. `memberEdit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Find a member* : `memberFind CRITERIA KEYWORD [MORE_CRITERIA] [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "melkwx"
        },
        "content": "e.g. `memberFind name John`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *List all members* : `memberList`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Select a member* : `memberSelect INDEX` +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "joel0111"
        },
        "content": "e.g.`memberSelect 2`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Sort the member list* : `memberSort [NAME] [GENDER] [YEAR_OF_STUDY] [MAJOR]` +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "melkwx"
        },
        "content": "e.g. `memberSort name`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *Export a member* : `memberExport INDEX` +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "e.g.`memberExport 2`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d\u003d Activity Management Commands"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Add a activity* : `activityAdd n/gACTIVITY_NAME d/DATETIME l/LOCATION [de/DESCRIPTION] ...` +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityAdd n/Sentosa Outing d/16/02/2019 1000 l/Harbour Front MRT de/Bring swim suits.`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add a member to activity* : `activityAddMember ACTIVITY_INDEX MATRIC_NO` +"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `activityAddMember 1 A1234567N`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete an activity* : ``activityDelete ACTIVITY_INDEX`` +"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `activityDelete 1`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Delete a member from activity* : `activityDeleteMember ACTIVITY_INDEX MATRIC_NUMBER` +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "joel0111"
        },
        "content": "e.g. `activityDeleteMember 1 A1234567N`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* *Edit an activity* : `activityEdit ACTIVITY_INDEX [n/ACTIVITY_NAME] [d/DATETIME] [l/ACTIVITY_LOCATION] [de/ACTIVITY_DESCRIPTION] … ` +"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "minernchan"
        },
        "content": "e.g. `activityEdit 1 n/New Activity d/13/02/2019 1200 l/Com1 de/Bring calculator`"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Find an activity* : `activityFind [PREFIX] KEYWORD [MORE_KEYWORDS] [NEXT_PREFIX KEYWORD] [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityFind n/ Workshop`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Filtering activities* : `activityFilter CONDITION NUMBER_OF_DAYS` +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityFilter + 30`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *List all the activities* : `activityList`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Select an activity* : `activitySelect ACTIVITY_INDEX` +"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "joel0111"
        },
        "content": "e.g. `activitySelect 2`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *Exports an activity* : `activityExport ACTIVITY_INDEX` +"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "e.g. `activityExport 1`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Command Alias"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "Alias for command keywords can be used in place of full text commands."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Member Functions"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberAdd` or `mAdd`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberDelete` or \u0027mDelete\u0027"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberEdit` or `mEdit`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** `memberFilter` or `mFilter`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberFind` or `mFind`"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberList` or `mList`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberSelect` or `mSelect`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberSort` or `mSort`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `memberExport` or `mExport`"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* Activity Functions"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityAdd` or `aAdd`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityAddMember` or `aAddM`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityDelete` or `aDelete`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityDeleteMember` or `aDeleteM`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityEdit` or `aEdit`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityFind` or `aFind`"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityFilter` or `aFilter`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityList` or `aList`"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activitySelect` or `aSelect`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** `activityExport` or `aExport`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "joel0111"
        },
        "content": "//end::commandsummary"
      }
    ],
    "authorContributionMap": {
      "minernchan": 20,
      "A0143487X-Kevin": 133,
      "ivyyangyq": 102,
      "melkwx": 26,
      "-": 177,
      "joel0111": 349
    }
  },
  {
    "path": "docs/UserGuide_abrev.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d ClubManager - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w13-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "By: `W13-2`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ClubManager is for Co-Curricular Activities (CCAs) leaders who *prefer to use a desktop app for managing their members"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "and activities*. More importantly, ClubManager is *optimized for those who prefer to work with a Command Line Interface*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ClubManager can get"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "started. Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Download the latest `clubmanager.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your ClubManager."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *`memberList`* : lists all members (only in member mode)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *`memberAdd n/James Ong mn/A0123456Y p/98765432 e/jamesong@example.com a/123, Jurong West Ave 6, #08-111 g/male y/2 m/mathematics`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* : adds a member named"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`James Ong` to the ClubManager."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *`memberDelete 3`* : deletes the 3rd member shown in the current member list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d User Interface Walkthrough"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This section is designed to guide you through how the user interface and components in Club Manager works."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Here is an example of how Club Manager in member mode looks like:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::memberUiWalkthrough.png[width\u003d\"100%\"]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Here is an example of how Club Manager in activity mode looks like:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::activityUiWalkthrough.png[width\u003d\"100%\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "In total, there are:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *5 General Parts:*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** \u003c\u003c#Menu-Bar, Menu Bar\u003e\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** \u003c\u003c#Result-Display, Result Display\u003e\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** \u003c\u003c#Command-Box, Command Box\u003e\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** \u003c\u003c#SSB, Sync Status Bar\u003e\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Mode Status."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *3 Member Mode-specific Parts:*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** List of Members"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Member Information Display Panel"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** List of Activities Attended By Selected Member."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *4 Activity Mode-specific Parts:*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** List of Activities"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Activity Information Display Panel"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** List of Members Attending Selected Activity"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** List of Members Not Attending Selected Activity."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Menu-Bar]]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Menu Bar"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The *Menu Bar* provide you quick access to functions as below."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Here are the available options currently:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* File: Provide access to file functions."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Exit: Exit the program."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Help: Show Club Manager tutorial."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "You can also press F1 to show Club Manager User Guide."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Command-Box]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Command Box"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The *Command Box* is the place where you can input the commands."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Result-Display]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Result Display"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The *Result Display* shows information relating to the result of the command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/Swimming` or as `n/John Doe`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/Swimming`, `t/Running t/Hockey` etc."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d General Features"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::mode[]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Get / Set the mode of ClubManager: `mode`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ClubManager operates in 2 modes. This function allows user to check the mode and change the mode +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"25%,55%, \u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Mode| Definition | Example of allowed commands"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`member`| Member Management Mode"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This mode allows the user to manage members in ClubManager"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " | `memberAdd`,  `memberFind`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " |`activity`| Activity Management Mode"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " This mode allows the user to manage members in ClubManager"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  | `activityAdd`, `activityList`, `activitySelect`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `mode [MODE_CHOICE]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If MODE_CHOICE is left blank, returns current mode"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `mode`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns current management mode of ClubManager"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `mode activity`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Changes current management mode of ClubManager to Activity"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `mode member`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Changes current management mode of ClubManager to Member"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//end::mode[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Clears all entries from the Club Manager. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Displays a list of commands and the help messages to guide the user."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Member Management Features"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::memberCommands.png[width\u003d\"100%\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a member: `memberAdd` or `mAdd`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "You can add members to ClubManager. +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"30%,\u003c50%, \u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Information of Member| Definition | Example"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Name`| NAME refers to the name of the member."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Only alphabets are accepted. | John Sim"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Matric Number`| MATRIC_NUMBER refers to the member\u0027s matriculation number."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Matric Number is a string of 9 alphanumeric characters."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "For the first alphabet of the Matric Number, only the uppercase letter A or uppercase letter U will be accepted."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This will be followed by a 7 digits. The final character is an uppercase alphabet which has tally with the alphabet generated by our checksum generator."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If an error occurs, it could mean that a wrong final character of the Matric Number has been inputted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "| A0123456Z"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Phone Number`| PHONE_NUMBER refers to the member\u0027s phone number."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Only 8 digits are accepted. The first digit of the phone number has to begin with 6, 8, 9.| 91234567"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Email Address`| EMAIL_ADDRESS refers to the member\u0027s student/personal email address| johnsim@example.com"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Address`| ADDRESS refers to the member\u0027s home address."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Alphanumeric and Special characters are acceptable.| Jurong East Avenue 1 Block 2 #03-04"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Gender`| GENDER refers to the sex of the member."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Only \"Male\" or \"Female\" is accepted (case-insensitive)|Male"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Year of Study`| YEAR_OF_STUDY refers to the academic level (in years)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "in which the member is currently studying."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Only a single digit is accepted. This digit has to be between the range 1 to 6 (both inclusive)| 2"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Major`| MAJOR refers to the field of discipline in which member is currently enrolled in."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Only alphabets are accepted.| Chemistry"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Tags`|TAGS refers to the hobbies and interests of the member."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Only Alphabets are acceptable, restricted to a single word."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "A member can have any number of tags (including 0).|Swimming"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberAdd n/NAME mn/MATRIC_NUMBER p/PHONE_NUMBER e/EMAIL a/ADDRESS g/GENDER y/YEAR_OF_STUDY m/MAJOR [t/TAG]...`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberAdd n/James Ong mn/A0123456J p/98765432 e/jamesong@example.com a/123, Jurong West Ave 6, #08-111 g/male y/2 m/mathematics`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberAdd n/Jane Lim mn/A0654321J p/91324756 e/janelim@example.com a/123, Sengkang Ave 6, #02-123 g/Female y/3  m/physics t/Swimming`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a member : `memberDelete` or `mDelete`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Deletes the specified member from ClubManager. +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `memberDelete INDEX`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Deletes the member at the specified `INDEX`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`memberDelete 2` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Deletes the 2nd member in ClubManager."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name Betsy` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`memberDelete 1` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Deletes the 1st member in the results of the `find` command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a member : `memberEdit` or `mEdit`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Edits an existing member in ClubManager. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `memberEdit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GENDER] [yos/YEAR_OF_STUDY] [m/MAJOR] [t/TAG]...`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Edits the member at the specified `INDEX`. The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* NOTE: Matriculation Number cannot be edited"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* You can remove all the member\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberEdit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Edits the phone number and email address of the 1st member to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberEdit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Edits the name of the 2nd member to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Locating members by name: `memberFind` or `mFind`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Finds members whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `memberFind CRITERIA KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Partial or full words will be matched e.g. `Han` will match `Hans`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* members matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* CRITERIA could be \"name\" or \"matricnum\" only (case insensitive)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name John` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name Betsy Tim John` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns any member having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind matricnum A0` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns all members (matric num starts with A0)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Listing members : `memberList` or mList`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Shows a list of all members in ClubManager. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `memberList`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a member : `memberSelect`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Selects the member identified by the index number used in the displayed member list. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `memberSelect INDEX`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Selects the member and loads the members page of the member at the specified `INDEX`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`memberSelect 2` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Selects the 2nd person in the club manager."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::memberSelectCommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::membersort[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Sort members’ list : `memberSort` or `mSort`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Sort the members list by a member’s attribute in ascending order"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Format*"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"30%,\u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Sort By | Command Example"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Name` |memberSort name"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Gender` |memberSort Gender"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Year of Study` |memberSort yearOfStudy"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`Major` |memberSort major"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Sorts the member list according to the specified sorting criteria. The attribute refers to the name, matric number, phone number, email, year of study, and major. There can only be a single attribute provided."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* At least one of the sorting criteria are provided."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Members will be sorted in ascending order based on the sorting criteria."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Within each of the sort criteria, the members are further sorted by name in ascending order."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Sorts the member at the specified attribute. The attribute refers to the name, admin number, phone number, email, year of study, and major. There can only be a single attribute provided."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* At least one of the attributes are provided."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Members will be sorted in ascending order based on the attribute."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`memberSort name` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Sorts the list by name."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::MemberSortCommand_sortby_name.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`memberSort yearOfStudy` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Sorts the list by year of study."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::MemberSortCommand_sortby_yearofstudy.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//end::membersort[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::memberexport[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting details of a member : `memberExport` or `mExport`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Export the details of the member identified by the index number used in the displayed member list. +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `memberExport INDEX`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Exports the details of member at the specified `INDEX`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index refers to the index number shown in the displayed member list."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberList` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`memberExport 2` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Export the details of the 2nd person in the address book."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name Betsy` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`memberExport 1` +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Export the details of the 1st member in the results of the `find` command."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::MemberExportExample.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The exported file will be stored in the same directory where ClubManager is installed in."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "File name with the following format:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "NameOfPerson_xxxxx_exportedOnDDMMYYYY_HHMMSS.html"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//end::memberexport[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Activity Management Features"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::activityAdd[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an activity : `activityAdd` or `aAdd`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Adds a new activity to the activity list +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"30%,\u003c50%, \u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Information of Activity| Definition | Example"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityName`| ACTIVITY_NAME refers to the name of the activity."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " Only alphabets are accepted. | Sentosa Outing"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityDateTime`| DATETIME refers to the date and time of the activity"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Activity Date and time should be in \"dd/MM/YYYY HHMM\" format, where dd, MM, YYYY refers"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "to day of month, month and year respectively. HH refers to the hour in 24 hour format ("
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "0-23). | 28/02/2019 2359"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityLocation`| LOCATION refers to the location of an activity|Kent Ridge MRT"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|`ActivityDescription`| DESCRIPTION refers to the detailed description of the activity"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|Meeting at MRT before leaving together."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityAdd n/ACTIVITY_NAME d/DATETIME l/LOCATION [de/DESCRIPTION] ...`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Inputing description is optional. If no description is found, the default description will be"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\"More details to be added.\""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The added activity will be displayed at the sorted position according to its time. +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The most recent ongoing activities will be display on top while the most recent completed activity will be at"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the bottom of the list."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Activities with the same time and location cannot be added."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityAdd n/Sentosa Outing d/16/02/2019 1000 l/Harbour Front MRT de/Bring swim suits.`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityAdd n/HTML workshop d/14/02/2019 l/ICube Auditorium`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(image omitted) +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Adding activity to the correct position based on the time."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityAdd[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::activityAddMember[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Add a member to activity `activityAddMember` or `aAddM`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Adds an existing member to an existing activity to indicate that they will be going for the activity."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityAddMember ACTIVITY_INDEX MATRIC_NO`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Adds a member to the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* MATRIC_NO must be a currently existing entry in any existing member’s MATRIC_NO information column in the member list."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityAddMember 1 A1234567N` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Adds the member with matric number `A1234567N` to the attending list for activity 1."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityAddMember[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::activityDelete[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an activity `activityDelete` or `aDelete`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Deletes an existing activity in the activity list"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityDelete ACTIVITY_INDEX`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Deletes the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityDelete 1` +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Deletes the first activity in the displayed activity list"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityDelete[]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// tag::activityDeleteMember[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a member from activity `activityDeleteMember` or `aDeleteM`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Removes an existing member who has already indicated that he/she will be attending the activity from the attending list of the activity."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityDeleteMember ACTIVITY_INDEX MATRIC_NO`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Removes a member from the attending list of the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* MATRIC_NO must be a currently existing entry in the specified activity’s attending list."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityDeleteMember 1 A1234567N` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Removes the member with matric number A1234567N from activity 1’s attending list."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// end::activityDeleteMember[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an activity: `activityEdit` or `aEdit`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Edits an existing activity in the activity list"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityEdit ACTIVITY_INDEX [n/ACTIVITY_NAME] [d/DATE] [t/TAG] … `"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Edits the activity at the specified `ACTIVITY_INDEX` which refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* When editing tags, the existing tags of the activity will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* You can remove all the activity’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityEdit 1 d/13022019` +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Edits the date of the first activity to be 13 Feb 2019."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityEdit 2 t/` +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Clears all existing tags of the second activity."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::activityFilter[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering activities by date: `activityFilter` or `aFilter`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Filters the activities that is the given number of days away from today (inclusive)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "and displays them as a list with index numbers."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityFilter CONDITION NUMBEROFDAYS`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The filter condition must be specified. `+` is to filter future activities and `-` is to filter past activities."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `NUMBEROFDAYS` refers to the range of days from the current date."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `NUMBEROFDAYS` *must be a postive integer* `1 2 3`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFilter + 7` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns future activities scheduled in the next 7 days (including today)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFilter - 30` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns past activities from the last 30 days (inclusive)."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Finding activities by criteria: `activityFind` or `aFind`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Finds all activities whose attribute contain any of the specified keywords"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(case-insensitive) and displays them as a list with index numbers. +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityFind [PREFIX] KEYWORD [MORE_KEYWORDS] [NEXT_PREFIX KEYWORD] [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The search is case insensitive. e.g `workshop` will match `Workshop`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The order of the keywords does not matter. e.g. `Talk Seminar` will match `Seminar Talk`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The search parameter is determined by the prefixes.  `n/` searches for match in ActivityName; `l/` searches for match in"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ActivityLocation; `de/` searches for matches in ActivityDescription."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If no prefix is provided, the activities with any fields matching the keywords would be returned."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Only full words will be matched e.g. `CS` will not match `CSS`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* For a specific prefix, activities matching at least one keyword will be returned (i.e. `OR` search within the prefix)."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `HTML workshop` will return `HTML camp`, `CSS workshop`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* If more than one prefixes are entered, only activities matching all the prefixes\u0027 conditions will be returned"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(i.e. `AND` search between prefixes). e.g. `n/Sentosa Dance l/Icube MRT` will only return activities with name that contains"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`Sentosa` or `Dance` and location that contains `Icube` or `MRT`."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFind de/ free` +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns activities with description `Free food` and `Free giveaway`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFind n/ HTML CSS Javascript` +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns any activity having names `HTML`, `CSS`, or `Javascript`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFind n/Workshop Lecture l/Auditorium` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Returns any activity having name `Workshop` or `Lecture`, and the location is `Auditorium`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all activities : `activityList` or `aList`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Shows a list of all activities in the activity list. +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityList`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "If the status of some activities have changed from `ONGOING` to `COMPLETED`, the"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityList` command will automatically update the status of these activities."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "(image omitted)"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting an activity : `activitySelect` or `aSelect`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Selects the activity identified by the index number used in the displayed activity list. +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activitySelect ACTIVITY_INDEX`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Selects the activity and displays the specific details of the activity at the specified `ACTIVITY_INDEX`."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityList` +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activitySelect 2` +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Selects the 2nd person in the displayed activity list."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityFind workshop` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activitySelect 1` +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Selects the 1st activity in the results of the `find` command."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//end::activityFilter[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//tag::activityexport[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting details of an activity : `activityExport` or `aExport`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Export the details of the activity identified by the index number used in the displayed activity list. +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Format: `activityExport INDEX`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Exports the details of activity at the specified `INDEX`."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "****"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `activityList` +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityExport 2` +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Export the details of the 2nd activity in the address book."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* `memberFind name Swimming Class` +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "`activityExport 1` +"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Export the details of the 1st activity in the results of the `find` command."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "image::ActivityExportExample.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The exported file will be stored in the same directory where ClubManager is installed in."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "File name with the following format:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "NameOfActivity_xxxxx_exportedOnDDMMYYYY_HHMMSS.html"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//end::activityexport[]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This section provides a comprehensive list of commands that ClubManager offers."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Mode* : `mode [MODE_CHOICE]` +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `mode member`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Member Management Commands"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Add a member* : `memberAdd n/NAME mn/MATRIC_NUMBER p/PHONE_NUMBER e/EMAIL g/GENDER yos/YEAR_OF_STUDY m/MAJOR [t/TAG]...` +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `memberAdd n/James Ong mn/A0123456Y p/98765432 e/jamesong@example.com g/male yos/1 m/mathematics`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Delete a member* : `memberDelete INDEX` +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `memberDelete 3`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Edit a member* : `memberEdit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "[mn/MATRIC_NUMBER] [yos/YEAR_OF_STUDY] [m/MAJOR] [t/TAG]...` +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `memberEdit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Find a member* : `memberFind CRITERIA KEYWORD [MORE_CRITERIA] [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `memberFind name John`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *List all members* : `memberList`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Select a member* : `memberSelect INDEX` +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g.`memberSelect 2`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Sort the member list* : `memberSort [NAME] [GENDER] [YEAR_OF_STUDY] [MAJOR]` +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `memberSort name`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Export a member* : `memberExport INDEX` +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g.`memberExport 2`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Activity Management Commands"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Add a activity* : `activityAdd n/gACTIVITY_NAME d/DATETIME l/LOCATION [de/DESCRIPTION] ...` +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityAdd n/Sentosa Outing d/16/02/2019 1000 l/Harbour Front MRT de/Bring swim suits.`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Add a member to activity* : `activityAddMember ACTIVITY_INDEX MATRIC_NO` +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityAddMember 1 A1234567N`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Delete an activity* : ``activityDelete ACTIVITY_INDEX`` +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityDelete 1`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Delete a member from activity* : `activityDeleteMember ACTIVITY_INDEX MATRIC_NUMBER` +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityDeleteMember 1 A1234567N`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Edit an activity* : `activityEdit ACTIVITY_INDEX [n/ACTIVITY_NAME] [d/DATE] [t/TAG] … ` +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityEdit 1 d/13022019`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Find an activity* : `activityFind [PREFIX] KEYWORD [MORE_KEYWORDS] [NEXT_PREFIX KEYWORD] [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityFind n/ Workshop`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Filtering activities* : `activityFilter CONDITION NUMBER_OF_DAYS` +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityFilter + 30`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *List all the activities* : `activityList`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Select an activity* : `activitySelect ACTIVITY_INDEX` +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activitySelect 2`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Exports an activity* : `activityExport ACTIVITY_INDEX` +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "e.g. `activityExport 1`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Command Alias"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Alias for command keywords can be used in place of full text commands."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Member Functions"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberAdd` or `mAdd`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberDelete` or \u0027mDelete\u0027"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberEdit` or `mEdit`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberFind` or `mFind`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberList` or `mList`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberSelect` or `mSelect`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberSort` or `mSort`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `memberExport` or `mExport`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* Activity Functions"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityAdd` or `aAdd`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityAddMember` or `aAddM`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityDelete` or `aDelete`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityDeleteMember` or `aDeleteM`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityEdit` or `aEdit`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityFind` or `aFind`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityFilter` or `aFilter`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityList` or `aList`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activitySelect` or `aSelect`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** `activityExport` or `aExport`"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 716
    }
  },
  {
    "path": "docs/team/A0143487X-Kevin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d Kevin Yeong Yu Heng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d PROJECT: ClubManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "This portfolio documents the features and enhancements that I have made to the project and the contributions I have made to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "the User and Developer guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "ClubManager is a desktop application for CCA management. It comes with a GUI but most of the user interactions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "takes place on the CLI (Command Line Interface) provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "ClubManager is specially designed for *CCA main committee members* to manage their CCA data. It is the g"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "o-to application for CCA leaders who are looking for a software that allows them to *manage their members and activities*."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *Major enhancement*: added *Mode of operation control feature*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** What it does: Allow the app to operate in different modes which restrict the modes in which different commands can operate in. This feacture includes : +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Management of UI for the different modes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Function for mode switching."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Modification of the logic architecture for the restriction of command operations to their respective modes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Justification: This feature improves the product to allow user to more intuitively use the app to handle both activity and members."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It also minimizes ambiguity and limits errors from user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *Major enhancement*: added *Export feature*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** What it does: Allow the user to generate information in a html format for viewing or printing. This feacture includes : +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** File handling operations."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Formatting data based on templates which are designed in html."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Generating the file which is responsive (large screens or mobile screens)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Justification: This feature improves the product to allow user and vendors to generate a copy of the information on a need-to-hold basis minimizing information leaks and PDPA breaches."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Highlights: This enhancement allows easy reuse and expansion in the future as the infrastructure for file handling and generating responsive files from templates."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Rename member list function."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Implement command alias for expert users."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W13-2/main/commits?author\u003dA0143487X-Kevin[Functional code]] [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dA0143487X-Kevin\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-8\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Integrator of the project and modules from member and activity management"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Reviewed PRs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "*** Discuss with and help members design the structure and flow of their feature implementation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmode]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberexport]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dactivityexport]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodes_of_operation]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 72,
      "joel0111": 1
    }
  },
  {
    "path": "docs/team/ivyyangyq.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d Yang Yiqing - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d PROJECT: ClubManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "This portfolio documents the features and enhancements that I have made to the project and the contributions I have made to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the User and Developer guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "ClubManager is a desktop application for NUS CCA management. It is specially designed for *CCA main committee members* to manage their CCA data. It is the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "go-to application for CCA leaders who are looking for a software that allows them to *manage their members and activities*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Major enhancement*: added *Activity List Management feature*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** What it does: Manages the list of activities that a club has. This feacture includes functions such as: +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Adding activities to (`activityAdd`) and removing activities from (`activityDelete`) the activity list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Finding activities that match some given criteria (`activityFind`) and filtering the activities based on the how recent"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the activities are (`activityFilter`)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Listing all activities (`activityList`)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Justification: This feature improves the product significantly because in addition to manage members in the club,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "the app can manage another common aspect in club affairs - the activities."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Highlights: This enhancement involves all commands that manages the activity list, including `activityAdd`, `activityDelete`,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " `activityList`, `activityFind` and `activityFilter`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The implementation of the activity list is automatically sorted and ordered based on completion status and time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "The order is from Ongoing to Completed, within the same status the activities are ordered by the earliest to the latest."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Update UI display for activity list and activity details. https://github.com/cs2103-ay1819s2-w13-2/main/pull/154[#154]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Update Storage for storing attendance in activity."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W13-2/main/commits?author\u003divyyangyq[Functional code]] [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003divyyangyq\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-15\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Compiled binary (JAR) files and managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Managed milestones `v1.1` - `v1.4`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Setting up issue tracker, contributed to issues (https://github.com/cs2103-ay1819s2-w13-2/main/issues?utf8\u003d✓\u0026q\u003dis%3Aissue+author%3Aivyyangyq+label%3Atype.Task[Issues])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "and 6 user stories (https://github.com/cs2103-ay1819s2-w13-2/main/issues?utf8\u003d✓\u0026q\u003dis%3Aissue+author%3Aivyyangyq+label%3Atype.Story[User Stories])."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "*** Reviewed PRs of other team members (with non-trivial comments): https://github.com/cs2103-ay1819s2-w13-2/main/pull/99[#99],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "https://github.com/cs2103-ay1819s2-w13-2/main/pull/102[#102]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "include::../UserGuide_abrev.adoc[tag\u003dactivityAdd]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "include::../UserGuide_abrev.adoc[tag\u003dactivityFilter]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "include::../DeveloperGuide_abrev.adoc[tag\u003dactivity_list]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|_Some of the contributions to the user guide and developer guide have been omitted for brevity."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "Please visit W13-2 user guide and developer guide for full details._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 72
    }
  },
  {
    "path": "docs/team/joel0111.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d Joel Ng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d PROJECT: Club Manager - v1.4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "This Project Portfolio serves to document the features and enhancements that I have made to the project as well as my contributions to the User Guide and Developer Guide."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "For this project, our group has embarked on a journey to create a desktop CCA management application called *Club Manager*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Club Manager is catered for *CCA leaders* and is used for managing CCA members and activities. The user (i.e. CCA leader) interacts with it using a CLI, and it has a GUI created with JavaFX. This application is written in Java."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Major enhancement*: Member List Management Feature"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** *What it does:*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*** *Add* member to the existing list of members (`memberAdd`)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*** *Lists* all of the members in Club Manager (`memberList`). *Filters* the list of members based on a given filter criteria. This allows the user to shortlist members for activities (e.g. competition) based on a particular member\u0027s attribute (`memberFilter`)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Sorts* the members\u0027 list based on a given sorting criteria (`memberSort`). This allows the user to be able to organise their members based on a particular member attribute, facilitating the attendance list preparation, keying in CCA points as well as the export list function."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*** *Select* a specific member to view the complete members\u0027 information page which includes statistics pertaining to the selected member (`memberSelect`)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** *Justification:* This feature improves the product significantly because as a CCA leader, the user needs to be able to view the entire set of member\u0027s information and statistics, as well as manage the member\u0027s list to prepare the list to be exported and printed for attendance taking in the CCA activities. CCA leaders could also use the information to plan out their activities (e.g. logistics)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** A checksum generator has been implemented to ensure that all members have valid matric numbers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "** Colored tags which follows the color theme of Club Manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W13-2/main/commits?author\u003djoel0111[Functional code]] [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003djoel0111\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-14\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Other Contributions:*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Actively reviewed documentation of teammates to make sure the documentation follows a similar structure."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Corrected any team-related documentation issues."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Updated issues tracker for member management features including features that are not done by me."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Updated README and AboutUs page."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Provided UI Walk-through in the User Guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Designed a logo for the Club Manager Application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Made cosmetic changes to the command summary in User Guide by categorising the commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Did up the user stories, non-functional requirements, glossary, and product survey in the Developer Guide."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "*Community Contributions*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "* Actively reviewed teammates\u0027 PRs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberadd]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberfilter]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberlist]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberselect]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmembersort]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmemberlistfeature]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmemberadd]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmemberfilter]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmemberlist]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmemberselect]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmembersort]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|_Some of the contributions to the user guide and developer guide have been omitted for brevity."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "Please visit W13-2 user guide and developer guide for full details._"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "joel0111": 83
    }
  },
  {
    "path": "docs/team/melkwx.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d Melissa Khoo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melkwx"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melkwx"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melkwx"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d PROJECT: Club Manager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melkwx"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melkwx"
        },
        "content": "Club Manager is a desktop member management application used by committee members to track and view the information and participation of their club members. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Major enhancement*: Member List Management Functions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** *What it does:*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*** *Find* (`memberFind`): allows the user to find members using part or whole name or matriculation number, and multiple fields can also be entered. All members who fulfill the criteria will be returned."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*** *Edit* (`memberEdit`): allows the user to edit all fields in the member information EXCEPT matriculation number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*** *Delete* (`memberDelete`): allows the user to delete member from memberList AND activityList with one simple command using list index."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** *Justification:* Grants ease of CCA leaders looking up contact information of a particular member without scrolling through long lists, allows leaders to easily edit member information that is available to edit, as well as allow for clean delete from the Club Manager when the member graduates or has quit the club."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** Added contiansIgnoreCase function under StringUtil to allow for partial keyword match, available for all to use, breaking restriction of only full word match"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** Find Criteria contains keywords predicate for others to follow to allow for multiple criteria and keywords to be input instead of single criteria multiple keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** Highlights: It negates the need to demand full word match and enables more effective search functions given a long list of members with may information fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W13-2/main/commits?author\u003dmelkwx[Functional code]] [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dmelkwx\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-15\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Actively reviewed documentation of teammates to make sure the documentation follows a similar structure."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Actively reviewed teammates\u0027 PRs to ease debugging process."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Corrected any team-related documentation issues."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Provided high-speed typing services for all demos."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Continuous morale booster and emotional support."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melkwx"
        },
        "content": "* Tells everyone their code looks good."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melkwx"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*** Regularly reviewed PRs and commented."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melkwx"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (W14-1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melkwx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melkwx"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melkwx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melkwx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandsummary]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melkwx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintroduction]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melkwx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberedit]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melkwx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberdelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melkwx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmemberfind]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melkwx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melkwx"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melkwx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melkwx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melkwx"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melkwx"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melkwx"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "melkwx": 70
    }
  },
  {
    "path": "docs/team/minernchan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d Minern Chan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d PROJECT: ClubManager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "ClubManager is a desktop CCA management application used for managing CCA members."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "ClubManager is tailored for *CCA Exco Members* to help them manage their CCA members and activities. It is easy to use, and quickly displays the relevant information so that"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "the Exco members can keep track on their CCA members and any upcoming events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* *Major enhancement*: Helped in creation of the activity list functionalities and added the ability to manage members in the attendance lists of activities."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "** What it does: Allow users to store records of the Club activities, and keep track of members who are attending/attended particular activities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "** Justification: This feature improves the product significantly because instead of looking at two separate lists without any meaning, there is now a relation between the members and activities (who is attending which activity)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in the future. Our team spent a considerable amount of time planning the design of the Activity Class, and how it should interact with the Member object. The implementation was tedious as it required a lot of new commands and functions, in addition to the editing of existing functions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "** Credits: [https://github.com/nus-cs2103-AY1819S2/addressbook-level4[Existing AddressBook-Level4 code]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "**Implemented the ActivityDeleteCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "**Implemented the ActivityEditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "**Provided function to remove member from any activity attendance list, when the member is deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W13-2/main/commits?author\u003dminernchan[Functional code]] [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dminernchan\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-2\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "*** Contributed to issues and user stories."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "*** Wrote test cases for new commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "*** Reviewed PRs of team members"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dactivityDelete]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dactivityAddMember]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dactivityDeleteMember]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dactivityEdit]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dactivity_edit]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dactivityDelete]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dactivityAddMember]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dactivityDeleteMember]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "minernchan": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String LOG_FILE \u003d \"clubmanager.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The member index provided is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_MATRIC_NUMBER \u003d \"The matric number is not found in the member \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"list!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d member(s) listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_IN_ACTIVITY \u003d \"The person is not in the activity \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"attendance list!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_MODE \u003d \"Invalid command mode! Allowed Mode : %1$s\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"Change mode by using \u0027mode\u0027 command\\n%2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_ACTIVITIES_LISTED_OVERVIEW \u003d \"%1$d activities listed!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_ALREADY_HAS_PERSON \u003d \"This member is already in the attendance list!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 5,
      "A0143487X-Kevin": 2,
      "ivyyangyq": 1,
      "melkwx": 2,
      "-": 11,
      "joel0111": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if the {@code sentence} equals the {@code word}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *       equalsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *       equalsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *       equalsWordIgnoreCase(\"ABc def\", \"ABc def\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static boolean equalsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .allMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * Ignores case, a full word match is not required."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *       containsIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *       containsIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *       containsIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //not a full word match"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static boolean containsIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        final int length \u003d word.length();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        for (int i \u003d 0; i \u003c wordsInPreppedSentence.length; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            for (int j \u003d wordsInPreppedSentence[i].length() - length; j \u003e\u003d 0; j--) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                if (wordsInPreppedSentence[i].regionMatches(true, j, word, 0, length)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 38,
      "-": 68,
      "joel0111": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, InvalidCommandModeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of activities */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Selected activity in the filtered activity list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * null if no activity is selected."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @see seedu.address.model.Model#selectedActivityProperty()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    ReadOnlyProperty\u003cActivity\u003e selectedActivityProperty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Sets the selected activity in the filtered person list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedActivity(Activity)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    void setSelectedActivity(Activity activity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Reset all lists."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    void callAllListFn();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Check if current mode is Member"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Assuming mode has changed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    boolean modeHasChange_isCurrModeMember();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Check if current mode is Activity"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Assuming mode has changed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    boolean modeHasChange_isCurrModeActivity();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns a list of person attending the activity"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    ObservableList\u003cPerson\u003e getAttendingOfSelectedActivity();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns list of Persons not attending the activity"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonNotInSelectedActivity();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns list of activities attended by Person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivitiesOfPerson();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns the number of activities attended by the member."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    int getAttendedActivitiesCounter(Person person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Return participation rate of the member."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    int getParticipationRate(Person person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 19,
      "ivyyangyq": 29,
      "-": 71,
      "joel0111": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_MODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            ParseException, InvalidCommandModeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            if (!(command.isValidMode(model.getAddressBookMode()))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                throw new InvalidCommandModeException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_MODE, command.allowedModeListAsString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                                ModeCommand.MESSAGE_USAGE_CHANGE_MODE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return model.getFilteredActivityList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ReadOnlyProperty\u003cActivity\u003e selectedActivityProperty() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return model.selectedActivityProperty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setSelectedActivity(Activity activity) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model.setSelectedActivity(activity);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void callAllListFn() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        model.resetLists();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean modeHasChange_isCurrModeMember() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return model.addressBookModeIsMember();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean modeHasChange_isCurrModeActivity() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return model.addressBookModeIsActivity();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cPerson\u003e getAttendingOfSelectedActivity() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return model.getAttendingOfSelectedActivity();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonNotInSelectedActivity() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return model.getPersonNotInSelectedActivity();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivitiesOfPerson() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return model.getActivitiesOfPerson();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int getAttendedActivitiesCounter(Person person) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return model.getAttendedActivitiesCounter(person);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int getParticipationRate(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return model.getParticipationRate(person);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 27,
      "ivyyangyq": 28,
      "-": 107,
      "joel0111": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Adds an activity to the club manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ActivityAddCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityAdd\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aAdd\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an activity to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_ACTIVITYNAME + \"ACTIVITY_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_DATETIME + \"ACTIVITY_DATETIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_LOCATION + \"ACTIVITY_LOCATION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"[\" + PREFIX_ADESCRIPTION + \"ACTIVITY_DESCRIPTION]\\n \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_ACTIVITYNAME + \"CSS Workshop \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_DATETIME + \"12/03/2019 1900 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_LOCATION + \"Com1 02-07 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_ADESCRIPTION + \"Learn to write beautifully designed webapp. Bring Laptop. \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New activity added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in Club Manager\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_LOCATION_CLASH \u003d \"Another activity is scheduled\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \" at the same time and location. Please reschedule to avoid clash.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_PREFIXES \u003d \"Some fields have multiple inputs.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final Activity toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Creates an ActivityAddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityAddCommand(Activity activity) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        toAdd \u003d activity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (model.hasActivity(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (model.hasActivityClashInLocation(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new CommandException(MESSAGE_ACTIVITY_LOCATION_CLASH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model.addActivity(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (other instanceof ActivityAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ActivityAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "ivyyangyq": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityAddMemberCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Selects an activity identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityAddMemberCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityAddMember\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aAddM\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \": Selects the activity identified by the index number used in the displayed activity list and adds\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \" the Person object with given matriculation number into its attendance list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) + MATRICNUMBER\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \" A1234567H\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_ADD_MEMBER_SUCCESS \u003d \"Successfully added to selected Activity: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the address book.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final MatricNumber targetMatric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @param targetIndex of the activity in the filtered activity list to edit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @param targetMatric of the member we want to add to the activity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityAddMemberCommand(Index targetIndex, MatricNumber targetMatric) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(targetMatric);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.targetMatric \u003d targetMatric;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cActivity\u003e filteredActivityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredActivityList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (!model.hasMatricNumber(this.targetMatric)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.setSelectedActivity(filteredActivityList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity selectedActivity \u003d model.getSelectedActivity();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (selectedActivity.hasPersonInAttendance(targetMatric)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ACTIVITY_ALREADY_HAS_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity copyActivity \u003d Activity.addMemberToActivity(selectedActivity, targetMatric);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (!selectedActivity.isSameActivity(copyActivity) \u0026\u0026 model.hasActivity(copyActivity)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.setActivity(selectedActivity, copyActivity);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.updateFilteredActivityList(Model.PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ACTIVITY_ADD_MEMBER_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                || (other instanceof ActivityAddMemberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ActivityAddMemberCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 87,
      "A0143487X-Kevin": 1,
      "ivyyangyq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public abstract class ActivityCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private ArrayList\u003cAppMode.Modes\u003e modeList \u003d new ArrayList \u003cAppMode.Modes\u003e ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            Arrays.asList(AppMode.Modes.ACTIVITY));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public ActivityCommand () {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        super.setAllowedModeList(modeList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            InvalidCommandModeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return true if command can operate in (@param mode)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * else return false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean isValidMode (AppMode.Modes mode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return super.isValidMode(mode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "//@@author minernchan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Deletes an activity identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityDeleteCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityDelete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aDelete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \": Deletes the activity identified by the index number used in the displayed activity list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \"Deleted Activity: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity activityToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                || (other instanceof ActivityDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ActivityDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 43,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityDeleteMemberCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Selects an activity identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityDeleteMemberCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityDeleteMember\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aDeleteM\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \": Selects the activity identified by the index number used in the displayed activity list and removes\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"the Person object with given matriculation number from its attendance list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) MATRICNUMBER\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \" A1234567H\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_DELETE_MEMBER_SUCCESS \u003d \"Successfully removed member from \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"selected Activity: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the address book.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final MatricNumber targetMatric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityDeleteMemberCommand(Index targetIndex, MatricNumber targetMatric) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.targetMatric \u003d targetMatric;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cActivity\u003e filteredActivityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredActivityList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.setSelectedActivity(filteredActivityList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity selectedActivity \u003d model.getSelectedActivity();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (!model.hasMatricNumber(targetMatric)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        } else if (!selectedActivity.hasPersonInAttendance(targetMatric)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_IN_ACTIVITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity copyActivity \u003d Activity.removeMemberFromActivity(selectedActivity, targetMatric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (!selectedActivity.isSameActivity(copyActivity) \u0026\u0026 model.hasActivity(copyActivity)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.setActivity(selectedActivity, copyActivity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.updateFilteredActivityList(Model.PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ACTIVITY_DELETE_MEMBER_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                || (other instanceof ActivityDeleteMemberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 targetMatric.equals(((ActivityDeleteMemberCommand) other).targetMatric)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ActivityDeleteMemberCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 78,
      "A0143487X-Kevin": 1,
      "ivyyangyq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Edits the details of an existing activity in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityEditCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityEdit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aEdit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the activity identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"by the index number used in the displayed activity list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"[\" + PREFIX_ACTIVITYNAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"[\" + PREFIX_ADESCRIPTION + \"DESCRIPTION]... \\n \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + PREFIX_ACTIVITYNAME + \"Final Exam \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + PREFIX_DATETIME + \"30/04/2019 1700\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_EDIT_ACTIVITY_SUCCESS \u003d \"Edited Activity: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final EditActivityDescriptor editActivityDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @param index of the activity in the filtered activity list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @param editActivityDescriptor details to edit the activity with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityEditCommand(Index index, EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(editActivityDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.editActivityDescriptor \u003d new EditActivityDescriptor(editActivityDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity activityToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity editedActivity \u003d createEditedActivity(activityToEdit, editActivityDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (!activityToEdit.isSameActivity(editedActivity) \u0026\u0026 model.hasActivity(editedActivity)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.setActivity(activityToEdit, editedActivity);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Creates and returns a {@code Activity} with the details of {@code activityToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * edited with {@code editActivityDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private static Activity createEditedActivity(Activity activityToEdit,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                                                 EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assert activityToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityName updatedActivityName \u003d editActivityDescriptor.getActivityName().orElse("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                activityToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityLocation updatedLocation \u003d editActivityDescriptor.getActivityLocation().orElse("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                activityToEdit.getLocation());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDateTime updatedDateTime \u003d editActivityDescriptor.getActivityDateTime().orElse("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                activityToEdit.getDateTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDescription updatedDescription \u003d editActivityDescriptor.getActivityDescription().orElse("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                activityToEdit.getDescription());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cMatricNumber\u003e updatedAttendance \u003d editActivityDescriptor.getAttendance().orElse("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                activityToEdit.getAttendance());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new Activity(updatedActivityName, updatedDateTime, updatedLocation,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                updatedDescription, updatedAttendance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (!(other instanceof ActivityEditCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand e \u003d (ActivityEditCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 editActivityDescriptor.equals(e.editActivityDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static class EditActivityDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        private ActivityName activityName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        private ActivityLocation activityLocation;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        private ActivityDateTime activityDateTime;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        private ActivityDescription activityDescription;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        private List\u003cMatricNumber\u003e attendance;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public EditActivityDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public EditActivityDescriptor(EditActivityDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            setActivityName(toCopy.activityName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            setActivityLocation(toCopy.activityLocation);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            setActivityDateTime(toCopy.activityDateTime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            setActivityDescription(toCopy.activityDescription);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            setAttendance(toCopy.attendance);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(activityName, activityLocation, activityDateTime, activityDescription,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    attendance);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public void setActivityName(ActivityName activityName) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            this.activityName \u003d activityName;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public Optional\u003cActivityName\u003e getActivityName() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return Optional.ofNullable(activityName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public void setActivityLocation(ActivityLocation activityLocation) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            this.activityLocation \u003d activityLocation;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public Optional\u003cActivityLocation\u003e getActivityLocation() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return Optional.ofNullable(activityLocation);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public void setActivityDateTime(ActivityDateTime activityDateTime) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            this.activityDateTime \u003d activityDateTime;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public Optional\u003cActivityDateTime\u003e getActivityDateTime() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return Optional.ofNullable(activityDateTime);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public void setActivityDescription(ActivityDescription activityDescription) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            this.activityDescription \u003d activityDescription;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public Optional\u003cActivityDescription\u003e getActivityDescription() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return Optional.ofNullable(activityDescription);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public void setAttendance(List\u003cMatricNumber\u003e attendance) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public Optional\u003cList\u003cMatricNumber\u003e\u003e getAttendance() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            if (!(other instanceof EditActivityDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            EditActivityDescriptor e \u003d (EditActivityDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return getActivityName().equals(e.getActivityName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    \u0026\u0026 getActivityLocation().equals((e.getActivityLocation()))"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    \u0026\u0026 getActivityDateTime().equals(e.getActivityDateTime())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    \u0026\u0026 getActivityDescription().equals(e.getActivityDescription())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 225,
      "A0143487X-Kevin": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.exportutil.ExportUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Exports an activity identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ActivityExportCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityExport\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aExport\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \": Exports the activity identified by the index number used in the displayed activity list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_SELECT_ACTIVITY_SUCCESS \u003d \"Exported Activity: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public ActivityExportCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        List\u003cActivity\u003e filteredActivityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredActivityList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        Activity exportActivity \u003d model.generateExportedActivity(filteredActivityList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ExportUtil.exportActivity(exportActivity, model.getAttendingOfSelectedActivity());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_ACTIVITY_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                || (other instanceof ActivityExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ActivityExportCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityFilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTimePredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Finds and lists all activities in address book whose date is in the filter range"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityFilterCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityFilter\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aFilter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" ：Filters the activities that is the given \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"number of days away from today (inclusive) and displays them as a list with index numbers.\\n \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Filter conditions: + is to filter future activities and - is to filter activities.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Parameters: CONDITION NUMBEROFDAYS \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" + 100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_INCORECT_DAYS \u003d \"The NUMBEROFDAYS input must be positive integers.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_NO_CONDITION \u003d \"Filter condition must be specified by + or -\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public final ActivityDateTimePredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityFilterCommand(ActivityDateTimePredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                String.format(Messages.MESSAGE_ACTIVITIES_LISTED_OVERVIEW, model.getFilteredActivityList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (other instanceof ActivityFilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 predicate.equals(((ActivityFilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 3,
      "A0143487X-Kevin": 1,
      "ivyyangyq": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melkwx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melkwx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melkwx"
        },
        "content": " * Finds and lists all activities in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melkwx"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melkwx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class ActivityFindCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityFind\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aFind\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all activities whose attribute contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"The attributes that activityFind search for is specified by the prefix input by the user.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Parameters: [PREFIX] KEYWORD [MORE_KEYWORDS] [NEXT_PREFIX] [KEYWORDS] ...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"The provided PREFIX includes \" + PREFIX_ACTIVITYNAME + \" (ActivityName), \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + PREFIX_ADESCRIPTION + \" (ActivityDescription) and \" + PREFIX_LOCATION + \" (ActivityLocation).\" + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"If no prefix is provided, all the attributes mentioned above will be searched. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_ACTIVITYNAME + \" cohesion dance outing\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final ActivityContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityFindCommand(ActivityContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                String.format(Messages.MESSAGE_ACTIVITIES_LISTED_OVERVIEW, model.getFilteredActivityList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                || (other instanceof ActivityFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                \u0026\u0026 predicate.equals(((ActivityFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melkwx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 1,
      "ivyyangyq": 14,
      "melkwx": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Lists all activities in the club manager to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ActivityListCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activityList\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aList\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all activities\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "ivyyangyq": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivitySelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Selects an activity identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivitySelectCommand extends ActivityCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activitySelect\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aSelect\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \": Selects the activity identified by the index number used in the displayed activity list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_SELECT_ACTIVITY_SUCCESS \u003d \"Selected Activity: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivitySelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cActivity\u003e filteredActivityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredActivityList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.setSelectedActivity(filteredActivityList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_ACTIVITY_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                || (other instanceof ActivitySelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ActivitySelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 54,
      "A0143487X-Kevin": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ClearCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private ArrayList\u003cAppMode.Modes\u003e allowedModeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void setAllowedModeList(ArrayList\u003cAppMode.Modes\u003e allowedModeList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        this.allowedModeList \u003d allowedModeList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            InvalidCommandModeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return true if command can operate in (@param mode)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * else return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean isValidMode (AppMode.Modes mode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return allowedModeList.contains(mode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return String of valid operation modes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public String allowedModeListAsString () {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String modeList \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        boolean first \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        for (AppMode.Modes modeTmp : this.allowedModeList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            if (!first) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                modeList \u003d modeList + \", \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                first \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            modeList \u003d modeList + modeTmp.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return modeList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 37,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /** The application should change mode. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private final boolean modeHasChanged;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean modeHasChanged) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        this.modeHasChanged \u003d modeHasChanged;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean isModeHasChanged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return modeHasChanged;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u0026\u0026 modeHasChanged \u003d\u003d otherCommandResult.modeHasChanged;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 12,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ExitCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GeneralCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public abstract class GeneralCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private ArrayList\u003cAppMode.Modes\u003e modeList \u003d new ArrayList \u003cAppMode.Modes\u003e ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            Arrays.asList(AppMode.Modes.MEMBER, AppMode.Modes.ACTIVITY));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public GeneralCommand () {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        super.setAllowedModeList(modeList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            InvalidCommandModeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return true if command can operate in (@param mode)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * else return false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean isValidMode (AppMode.Modes mode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return super.isValidMode(mode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class HelpCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class HistoryCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICNUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAROFSTUDY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberAddCommand extends MemberCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberAdd\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mAdd\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a member to Club Manager. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_MATRICNUMBER + \"MATRICNUMBER \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_YEAROFSTUDY + \"YEAROFSTUDY \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_NAME + \"Jon Lim \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_MATRICNUMBER + \"A0123456J \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_EMAIL + \"johnl@example.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_ADDRESS + \"123, Woodlands Drive 12, #12-34 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_YEAROFSTUDY + \"2 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_MAJOR + \"Chemistry \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + PREFIX_TAG + \"Swimming\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New member added: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This member already exists in Club Manager\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MATRICNUMBER \u003d \"This matricNumber already exists in Club Manager\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public MemberAddCommand(Person person) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        } else if (model.hasMatricNumber(toAdd.getMatricNumber())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MATRICNUMBER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                || (other instanceof MemberAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                \u0026\u0026 toAdd.equals(((MemberAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "melkwx": 7,
      "-": 55,
      "joel0111": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public abstract class MemberCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private ArrayList\u003cAppMode.Modes\u003e modeList \u003d new ArrayList \u003cAppMode.Modes\u003e ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            Arrays.asList(AppMode.Modes.MEMBER));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public MemberCommand () {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        super.setAllowedModeList(modeList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            InvalidCommandModeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @return true if command can operate in (@param mode)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * else return false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean isValidMode (AppMode.Modes mode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return super.isValidMode(mode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberDeleteCommand extends MemberCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberDelete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mDelete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        model.removeMemberFromAllAttendance(personToDelete.getMatricNumber());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof MemberDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MemberDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "melkwx": 1,
      "-": 50,
      "joel0111": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAROFSTUDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberEditCommand extends MemberCommand {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberEdit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mEdit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"NOTE: Matriculation Number CANNOT be edited. \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \"[\" + PREFIX_YEAROFSTUDY + \"YEAROFSTUDY] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \"[\" + PREFIX_MAJOR + \"MAJOR] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberEditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        YearOfStudy updatedYearOfStudy \u003d editPersonDescriptor.getYearOfStudy().orElse(personToEdit.getYearOfStudy());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Major updatedMajor \u003d editPersonDescriptor.getMajor().orElse(personToEdit.getMajor());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new Person(updatedName, personToEdit.getMatricNumber(), updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                updatedGender, updatedYearOfStudy, updatedMajor, updatedTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!(other instanceof MemberEditCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand e \u003d (MemberEditCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        private YearOfStudy yearOfStudy;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        private Major major;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            setYearOfStudy(toCopy.yearOfStudy);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            setMajor(toCopy.major);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, major, gender, yearOfStudy);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public void setYearOfStudy(YearOfStudy yearOfStudy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public Optional\u003cYearOfStudy\u003e getYearOfStudy() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return Optional.ofNullable(yearOfStudy);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public void setMajor(Major major) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            this.major \u003d major;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public Optional\u003cMajor\u003e getMajor() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    \u0026\u0026 getYearOfStudy().equals(e.getYearOfStudy())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    \u0026\u0026 getMajor().equals(e.getMajor())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "melkwx": 5,
      "-": 220,
      "joel0111": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.exportutil.ExportUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Exports a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberExportCommand extends MemberCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberExport\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mExport\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \": Exports the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Exported Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public MemberExportCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        Person exportPerson \u003d model.generateExportedPerson(filteredPersonList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ExportUtil.exportPerson(exportPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                || (other instanceof MemberExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MemberExportCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberFilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.GenderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MajorContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * A command that filters the member\u0027s list based on a given filter criteria."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberFilterCommand extends MemberCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberFilter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mFilter\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" ：Generates a filtered member\u0027s list based on a given\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \" filter criteria. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \"Parameters:  CRITERIA [KEYWORDS]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" yearofstudy\" + \" 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final String[] input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final YearOfStudyContainsKeywordsPredicate yearOfStudyPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final MajorContainsKeywordsPredicate majorPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final GenderContainsKeywordsPredicate genderPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final TagsContainsKeywordsPredicate tagsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberFilterCommand(String[] input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(input[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(input[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.majorPredicate \u003d new MajorContainsKeywordsPredicate(input[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.genderPredicate \u003d new GenderContainsKeywordsPredicate(input[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.tagsPredicate \u003d new TagsContainsKeywordsPredicate(input[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.yearOfStudyPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new YearOfStudyContainsKeywordsPredicate(input[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (input[0].equalsIgnoreCase(\"gender\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            model.updateFilteredPersonList(genderPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        } else if (input[0].equalsIgnoreCase(\"major\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            model.updateFilteredPersonList(majorPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        } else if (input[0].equalsIgnoreCase(\"yearofstudy\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            model.updateFilteredPersonList(yearOfStudyPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        } else if (input[0].equalsIgnoreCase(\"tags\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            model.updateFilteredPersonList(tagsPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof MemberFilterCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 1,
      "joel0111": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.parser.FindCriteriaContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.model.person.MatricNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melkwx"
        },
        "content": " * Finds and lists all members in Club Manager whose name and/or matric number contain any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melkwx"
        },
        "content": " * Keyword matching is case insensitive and partial matching is available."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberFindCommand extends MemberCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberFind\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mFind\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all members whose specified criteria \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"contain any of the specified keyword (case-insensitive) and displays them as a list with index \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"Parameters: CRITERIA KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"name alice bob charlie\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"matricnum A012\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private final FindCriteriaContainsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private final NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private final MatricNumberContainsKeywordsPredicate matricNumPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public MemberFindCommand(FindCriteriaContainsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        this.namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(predicate.getFindKeywords()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        this.matricNumPredicate \u003d new MatricNumberContainsKeywordsPredicate(Arrays.asList(predicate.getFindKeywords()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (predicate.toString().equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            model.updateFilteredPersonList(namePredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        } else if (predicate.toString().equalsIgnoreCase(\"matricnum\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            model.updateFilteredPersonList(matricNumPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                || (other instanceof MemberFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u0026\u0026 predicate.equals(((MemberFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 5,
      "melkwx": 25,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberListCommand extends MemberCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberList\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mList\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "-": 23,
      "joel0111": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberSelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberSelectCommand extends MemberCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberSelect\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mSelect\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \": Selects the member identified by the index number used in the displayed member list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberSelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(filteredPersonList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof MemberSelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MemberSelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "-": 49,
      "joel0111": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MemberSortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Creates an SortCommand to sort the member\u0027s list based on a given criteria."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Criteria is case-insensitive."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberSortCommand extends MemberCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"memberSort\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mSort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all members in the members\u0027 list based on \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            + \"the specified attribute (case-insensitive).\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \"Parameters: KEYWORD...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_MEMBER_SORT_SUCCESS \u003d \"Members\u0027 list successfully sorted!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberSortCommand(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        model.sortAddressBook(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(MESSAGE_MEMBER_SORT_SUCCESS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof MemberSortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 input.equals(((MemberSortCommand) other).input)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "ivyyangyq": 1,
      "joel0111": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ModeCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Get / Sets the mode\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"if left blank the function returns current mode\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"if MEMBER (case insensitive), changes mode to Member Management\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"if ACTIVITY (case insensitive), changes mode to Activity Management\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_USAGE_CHANGE_MODE \u003d COMMAND_WORD + \" : Sets the mode\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"if MEMBER (case insensitive), changes mode to Member Management\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            + \"if ACTIVITY (case insensitive), changes mode to Activity Management\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static final String MESSAGE_USAGE_CHECK_MODE \u003d COMMAND_WORD + \" : Get the mode\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private final AppMode.Modes modeToChange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public ModeCommand(AppMode.Modes mode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        modeToChange \u003d mode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (modeToChange \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            String modeText \u003d model.getAddressBookMode().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new CommandResult(String.format(\"Mode %s\", modeText));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } else if (modeToChange.equals(model.getAddressBookMode())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            String modeText \u003d model.getAddressBookMode().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new CommandResult(String.format(\"Mode is already: %s\", modeText));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            model.setAddressBookMode(modeToChange);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new CommandResult(String.format(\"Mode changed to %s\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                    model.getAddressBookMode().toString()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                    false, false, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String argInStrThis \u003d (modeToChange !\u003d null) ? modeToChange.toString() : \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String argInStrOther \u003d (((ModeCommand) other).modeToChange !\u003d null)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                ? ((ModeCommand) other).modeToChange.toString() : \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                || (other instanceof ModeCommand// instanceof handles Member / Activity"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u0026\u0026 argInStrThis.equals(argInStrOther));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class RedoCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class UndoCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/exportutil/ExportUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.exportutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * File handling utility functions for exporting data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ExportUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Exports utility"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * File handling checks and exports the data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @throws IOException if file cannot be created successfully"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static void exportDataToFile (String fileIdentifier, String extension, String data) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"ddMMyyyy_HHmmss\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String now \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        fileIdentifier \u003d fileIdentifier.replaceAll(\"[^a-zA-Z0-9]\", \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        extension \u003d extension.replaceAll(\"[^a-zA-Z0-9]\", \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String filename \u003d fileIdentifier + \"_\" + generateRandom() + \"_exportedOn\" + now;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        File file \u003d new File(filename + \".\" + extension);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            writer.write(data);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            System.out.println(\"File already Exists\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            exportDataToFile(fileIdentifier, extension, data);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Formats and export person to file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static void exportPerson (Person person) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String name \u003d person.getName().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String fileIdentifier \u003d name.replaceAll(\"[^a-zA-Z0-9]\", \"\");;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String matricNumber \u003d person.getMatricNumber().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String phone \u003d person.getPhone().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String email \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String address \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String gender \u003d person.getGender().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String yearOfStudy \u003d person.getYearOfStudy().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String major \u003d person.getMajor().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        /*Set\u003cTag\u003e tagSet \u003d person.getTags();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (!tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            for (Tag t : tagSet) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                tagList.add(t.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String now \u003d generateFileDateTime();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String title \u003d name + \" - \" + now;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String respath \u003d \"/exportutil/personInfo.html\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String htmlString \u003d readFormatFromHtmlFile(respath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$title\", title);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$name\", name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$matricNumber\", matricNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$gender\", gender);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$yearOfStudy\", yearOfStudy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$major\", major);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$phone\", phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$email\", email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$address\", address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        exportDataToFile(fileIdentifier, \"html\", htmlString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Formats and export activity to file"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static void exportActivity (Activity activity, ObservableList\u003cPerson\u003e personObservableList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String name \u003d activity.getName().toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String fileIdentifier \u003d name.replaceAll(\"[^a-zA-Z0-9]\", \"\");;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String description \u003d activity.getDescription().toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String dateTime \u003d activity.getDateTime().toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String location \u003d activity.getLocation().toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String status \u003d activity.getCurrentStatus().toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String now \u003d generateFileDateTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String title \u003d name + \" - \" + now;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String respath \u003d \"/exportutil/activityInfo.html\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String htmlString \u003d readFormatFromHtmlFile(respath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$title\", title);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$name\", name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$description\", description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$location\", location);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$dateTime\", dateTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$status\", status);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String attendanceListHtml \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String ls \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        //build attendance list html"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        StringBuilder attendanceListHtmlBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (!personObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003ch4\u003eMembers Attending :\u003c/h4\u003e\" + ls);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003ctable\u003e\" + ls + \"\u003ctbody\u003e\" + ls);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003ctr\u003e\" + ls);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003cth class\u003d\u0027tblhead\u0027\u003eName\u003c/th\u003e\" + ls);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003cth class\u003d\u0027tblhead\u0027\u003eMatric No.\u003c/th\u003e\" + ls);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003cth class\u003d\u0027tblhead\u0027\u003eAttended\u003c/th\u003e\" + ls);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003c/tr\u003e\" + ls);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            for (Person p : personObservableList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003ctr\u003e\" + ls);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003ctd class\u003d\u0027listName\u0027\u003e\" + ls);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(p.getName().toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003c/td\u003e\" + ls);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003ctd class\u003d\u0027listMatric\u0027\u003e\" + ls);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(p.getMatricNumber().toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003c/td\u003e\" + ls);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003ctd class\u003d\u0027listAttendBox\u0027\u003e\" + ls);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u0026nbsp;\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003c/td\u003e\" + ls);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                attendanceListHtmlBuilder.append(\"\u003c/tr\u003e\" + ls);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            attendanceListHtmlBuilder.append(\"\u003c/tbody\u003e\" + ls + \"\u003c/table\u003e\" + ls);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        attendanceListHtml \u003d attendanceListHtmlBuilder.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        htmlString \u003d htmlString.replace(\"$attendanceListHtml\", attendanceListHtml);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        exportDataToFile(fileIdentifier, \"html\", htmlString);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Creates datetime part of the filename"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private static String generateFileDateTime() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return dateFormat.format(date);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Build format into string from resource format file"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private static String readFormatFromHtmlFile(String respath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            InputStream resourceFormat \u003d MainApp.class.getResourceAsStream(respath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new InputStreamReader(resourceFormat, \"UTF-8\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            String ls \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                stringBuilder.append(line);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                stringBuilder.append(ls);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return stringBuilder.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            System.out.println(\"Cannot read from format file: \" + respath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return \"No format file found\" + System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Creates a random string for a part of the filename"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private static String generateRandom() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String allowedChar \u003d \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        StringBuilder strBuilt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        Random rnd \u003d new Random();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        while (strBuilt.length() \u003c 5) { // length of the random string."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            int index \u003d (int) (rnd.nextFloat() * allowedChar.length());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            strBuilt.append(allowedChar.charAt(index));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String randStr \u003d strBuilt.toString();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return randStr;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.ActivityAddMemberCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ActivityDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.ActivityDeleteMemberCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.ActivityEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.ActivityExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityFilterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.ActivityFindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ActivityListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.ActivitySelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberExportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberFilterCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberFindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSortCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityAddCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityAddMemberCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityDeleteCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityDeleteMemberCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityEditCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityExportCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityFilterCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.parser.activity.ActivityFindCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.parser.activity.ActivitySelectCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new ModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        case MemberAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberAddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            return new MemberAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case MemberEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberEditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new MemberEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case MemberSelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberSelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new MemberSelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case MemberDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberDeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new MemberDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberFindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new MemberFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case MemberSortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberSortCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new MemberSortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        case MemberListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            return new MemberListCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case MemberFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberFilterCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new MemberFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MemberExportCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new MemberExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        case ActivityAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityAddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return new ActivityAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        case ActivityAddMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityAddMemberCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return new ActivityAddMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        case ActivityDeleteMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityDeleteMemberCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return new ActivityDeleteMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        case ActivityEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityEditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return new ActivityEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        case ActivityFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityFindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            return new ActivityFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        case ActivityFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityFilterCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return new ActivityFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        case ActivitySelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivitySelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            return new ActivitySelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityExportCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new ActivityExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case ActivityDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityDeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ActivityDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        case ActivityListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ActivityListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return new ActivityListCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 15,
      "A0143487X-Kevin": 34,
      "ivyyangyq": 12,
      "melkwx": 16,
      "-": 82,
      "joel0111": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Prefix PREFIX_MATRICNUMBER \u003d new Prefix(\"mn/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Prefix PREFIX_YEAROFSTUDY \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Prefix PREFIX_ACTIVITYNAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Prefix PREFIX_ADESCRIPTION \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Prefix PREFIX_ALL \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String CONDITION_POSITIVE \u003d \"+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String CONDITION_NEGATIVE \u003d \"-\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 7,
      "-": 14,
      "joel0111": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCriteriaContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melkwx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melkwx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melkwx"
        },
        "content": " * Tests that a criteria given matches the list of available sorting criteria."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melkwx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class FindCriteriaContainsKeywordPredicate implements Predicate\u003cString\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private final String criteria;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private final String[] findKeywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private final String[] keywords \u003d {\"name\", \"matricnum\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public FindCriteriaContainsKeywordPredicate(String criteria) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(criteria);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        requireNonNull(criteria.split(\"\\\\s+\", 2)[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        this.criteria \u003d criteria.split(\"\\\\s+\", 2)[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        this.findKeywords \u003d criteria.split(\"\\\\s+\", 2)[1].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public boolean test(String criteria) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            if (criteria.equalsIgnoreCase(keywords[i])) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                || (other instanceof FindCriteriaContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                \u0026\u0026 criteria.equals(((FindCriteriaContainsKeywordPredicate) other).criteria)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return criteria;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public String[] getFindKeywords() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return findKeywords;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melkwx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICNUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAROFSTUDY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melkwx"
        },
        "content": " * Parses input arguments and creates a new MemberAddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class MemberAddCommandParser implements Parser\u003cMemberAddCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public MemberAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICNUMBER, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_GENDER, PREFIX_YEAROFSTUDY, PREFIX_MAJOR, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRICNUMBER, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_GENDER, PREFIX_YEAROFSTUDY, PREFIX_MAJOR)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRICNUMBER).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        YearOfStudy yearOfStudy \u003d ParserUtil.parseYearOfStudy(argMultimap.getValue(PREFIX_YEAROFSTUDY).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Major major \u003d ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person person \u003d new Person(name, matricNumber, phone, email, address, gender, yearOfStudy, major, tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new MemberAddCommand(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 6,
      "-": 50,
      "joel0111": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Parses input arguments and creates a new MemberDeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberDeleteCommandParser implements Parser\u003cMemberDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemberDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * and returns an MemberDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new MemberDeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "joel0111": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICNUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAROFSTUDY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Parses input arguments and creates a new MemberEditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberEditCommandParser implements Parser\u003cMemberEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemberEditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * and returns an MemberEditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICNUMBER, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_GENDER, PREFIX_YEAROFSTUDY, PREFIX_MAJOR, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    MemberEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRICNUMBER).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                    \"Matriculation Number cannot be changed!\\n\" + MemberEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAROFSTUDY).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            editPersonDescriptor.setYearOfStudy(ParserUtil.parseYearOfStudy"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    (argMultimap.getValue(PREFIX_YEAROFSTUDY).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAJOR).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            editPersonDescriptor.setMajor(ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException(MemberEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new MemberEditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 2,
      "-": 71,
      "joel0111": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberExportCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Parses input arguments and creates a new MemberExportCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberExportCommandParser implements Parser\u003cMemberExportCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemberExportCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * and returns an MemberExportCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public MemberExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new MemberExportCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberFilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberFilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Parses input arguments and creates a new MemberFilterCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberFilterCommandParser implements Parser\u003cMemberFilterCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String[] keywords \u003d {\"gender\", \"major\", \"tags\", \"yearofstudy\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemberFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * and returns an MemberFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String[] input \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (input.length \u003c 2 || !isCriteriaValid(input[0])) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String[] criteriaAndKeyword \u003d combineKeywords(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new MemberFilterCommand(criteriaAndKeyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * to check if the filter type is valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Boolean isCriteriaValid(String criteria) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (criteria.equalsIgnoreCase(keywords[i])) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *  Concatenate keywords from the input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private String[] combineKeywords(String[] input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String[] keywordsArray \u003d Arrays.copyOfRange(input, 1, input.length);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String keywords \u003d String.join(\" \", keywordsArray);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String[] criteriaAndKeyword \u003d new String[2];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        criteriaAndKeyword[0] \u003d input[0]; //store criteria"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        criteriaAndKeyword[1] \u003d keywords; //store keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return criteriaAndKeyword;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberFindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberFindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Parses input arguments and creates a new MemberFindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberFindCommandParser implements Parser\u003cMemberFindCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final String[] keywords \u003d {\"name\", \"matricnum\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemberFindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * and returns an MemberFindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public MemberFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String[] input \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (input.length \u003c 2 || !isCriteriaValid(input[0])) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new MemberFindCommand(new FindCriteriaContainsKeywordPredicate(trimmedArgs));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * to check if the find type is valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Boolean isCriteriaValid(String criteria) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (criteria.equalsIgnoreCase(keywords[i])) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 7,
      "ivyyangyq": 20,
      "melkwx": 8,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberSelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Parses input arguments and creates a new MemberSelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberSelectCommandParser implements Parser\u003cMemberSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemberSelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * and returns an MemberSelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberSelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new MemberSelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberSelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "joel0111": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MemberSortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Parses input arguments and creates a new MemberSortCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberSortCommandParser implements Parser\u003cMemberSortCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final String[] keywords \u003d {\"name\", \"gender\", \"major\", \"yearOfStudy\"};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemberSortCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * and returns an MemberSortCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberSortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String[] sortCriteria \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (trimmedArgs.isEmpty() || sortCriteria.length \u003e 1 || !isCriteriaValid(sortCriteria[0])) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberSortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new MemberSortCommand(trimmedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * to check if the input is valid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private boolean isCriteriaValid(String criteria) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (criteria.equalsIgnoreCase(keywords[i])) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 16,
      "melkwx": 1,
      "joel0111": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ModeCommandParser implements Parser\u003cModeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public ModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (args.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new ModeCommand(null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            if (AppMode.modeStringIsValidValue(trimmedArgs)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                return new ModeCommand(AppMode.convertStringToModes(trimmedArgs));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityLocation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses a {@code String major} into a {@code Major}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @throws ParseException if the given {@code major} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static Major parseMajor(String major) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String trimmedMajor \u003d major.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!Major.isValidMajor(trimmedMajor)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new Major(trimmedMajor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *Parses a {@code String matricNumber} into a {@code MatricNumber}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @throws ParseException if the given {@code matricNumber} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static MatricNumber parseMatricNumber(String matricNumber) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String trimmedMatricNumber \u003d matricNumber.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!MatricNumber.isValidMatricNumber(trimmedMatricNumber)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException(MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new MatricNumber(trimmedMatricNumber);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Parses a {@code String yearOfStudy} into a {@code YearOfStudy}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @throws ParseException if the given {@code yearOfStudy} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static YearOfStudy parseYearOfStudy(String yearOfStudy) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(yearOfStudy);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String trimmedYearOfStudy \u003d yearOfStudy.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!YearOfStudy.isValidYearOfStudy(trimmedYearOfStudy)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new ParseException(YearOfStudy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new YearOfStudy(trimmedYearOfStudy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses a {@code String activityname} into a {@code ActivityName}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the given {@code ActivityName} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static ActivityName parseActivityName(String activityname) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(activityname);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String trimmedName \u003d activityname.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityName.isValidActivityName(trimmedName)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(ActivityName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityName(trimmedName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses a {@code String activitydatetime} into a {@code ActivityDateTime}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the given {@code ActivityDateTime} is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static ActivityDateTime parseActivityDateTime(String activitydatetime) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(activitydatetime);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String trimmedDateTime \u003d activitydatetime.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityDateTime.isValidActivityDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(ActivityDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses a {@code String activitydescription} into a {@code ActivityDescription}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the given {@code ActivityDescription} is invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static ActivityDescription parseActivityDescription(String activitydescription) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(activitydescription);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String trimmedDescription \u003d activitydescription.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityDescription.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(ActivityDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityDescription(trimmedDescription);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses a {@code String activitylocation} into a {@code ActivityLocation}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the given {@code ActivityLocation} is invalid."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static ActivityLocation parseActivityLocation(String activitylocation) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(activitylocation);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String trimmedLocation \u003d activitylocation.trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityLocation.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(ActivityLocation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityLocation(trimmedLocation);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 65,
      "-": 124,
      "joel0111": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Parses input arguments and creates a new ActivityAddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityAddCommandParser implements Parser\u003cActivityAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * and returns an ActivityAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACTIVITYNAME, PREFIX_DATETIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        PREFIX_ADESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ACTIVITYNAME, PREFIX_DATETIME, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (areDuplicatedPrefixesPresent(argMultimap, PREFIX_ACTIVITYNAME, PREFIX_DATETIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                PREFIX_ADESCRIPTION)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    ActivityAddCommand.MESSAGE_DUPLICATED_PREFIXES));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityName name \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITYNAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDateTime datetime \u003d ParserUtil.parseActivityDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityLocation location \u003d ParserUtil.parseActivityLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            ActivityDescription description \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    ParserUtil.parseActivityDescription(argMultimap.getValue(PREFIX_ADESCRIPTION).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            Activity activity \u003d new Activity(name, datetime, location, description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return new ActivityAddCommand(activity);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity activity \u003d new Activity(name, datetime, location);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityAddCommand(activity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if there are duplicated prefixes  in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static boolean areDuplicatedPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003e 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityAddMemberCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.ActivityAddMemberCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Parses input arguments and creates a new ActivityAddMemberCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityAddMemberCommandParser implements Parser\u003cActivityAddMemberCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityAddMemberCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * and returns an ActivityAddMemberCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityAddMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityAddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(splitArgs[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new ActivityAddMemberCommand(index, matricNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 31,
      "ivyyangyq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ActivityDeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "//@@author minernchan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Parses input arguments and creates a new ActivityDeleteCommandParser object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityDeleteCommandParser implements Parser\u003cActivityDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityDeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * and returns an ActivityDeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return new ActivityDeleteCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 23,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityDeleteMemberCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.ActivityDeleteMemberCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Parses input arguments and creates a new ActivityAddMemberCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityDeleteMemberCommandParser implements Parser\u003cActivityDeleteMemberCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityAddMemberCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * and returns an ActivityAddMemberCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityDeleteMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityDeleteMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(splitArgs[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new ActivityDeleteMemberCommand(index, matricNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 31,
      "ivyyangyq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.ActivityEditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Parses input arguments and creates a new ActivityEditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityEditCommandParser implements Parser\u003cActivityEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityEditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * and returns an ActivityEditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACTIVITYNAME, PREFIX_LOCATION, PREFIX_DATETIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                        PREFIX_ADESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    ActivityEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand.EditActivityDescriptor editActivityDescriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityEditCommand.EditActivityDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTIVITYNAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            editActivityDescriptor.setActivityName(ParserUtil.parseActivityName("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    argMultimap.getValue(PREFIX_ACTIVITYNAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            editActivityDescriptor.setActivityLocation(ParserUtil.parseActivityLocation("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            editActivityDescriptor.setActivityDateTime(ParserUtil.parseActivityDateTime("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            editActivityDescriptor.setActivityDescription(ParserUtil.parseActivityDescription("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                    argMultimap.getValue(PREFIX_ADESCRIPTION).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (!editActivityDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new ParseException(ActivityEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new ActivityEditCommand(index, editActivityDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.ActivityExportCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Parses input arguments and creates a new ActivityExportCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ActivityExportCommandParser implements Parser\u003cActivityExportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityExportCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * and returns an ActivityExportCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public ActivityExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            return new ActivityExportCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityFilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CONDITION_NEGATIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CONDITION_POSITIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityFilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTimeAfterPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTimeBeforePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Parses input arguments and creates a new ActivityFilterCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityFilterCommandParser implements Parser\u003cActivityFilterCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityFindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * and returns an ActivityFindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String[] input \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (input.length !\u003d 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String cond \u003d input[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Integer days;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            days \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFilterCommand.MESSAGE_INCORECT_DAYS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (days \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFilterCommand.MESSAGE_INCORECT_DAYS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        switch(cond) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        case CONDITION_POSITIVE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return new ActivityFilterCommand(new ActivityDateTimeAfterPredicate(days));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        case CONDITION_NEGATIVE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return new ActivityFilterCommand(new ActivityDateTimeBeforePredicate(days));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFilterCommand.MESSAGE_NO_CONDITION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivityFindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityFindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Parses input arguments and creates a new ActivityFindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityFindCommandParser implements Parser\u003cActivityFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ArrayList\u003cPrefix\u003e prefixes \u003d new ArrayList\u003c\u003e(Arrays.asList(PREFIX_ACTIVITYNAME,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            PREFIX_ADESCRIPTION, PREFIX_LOCATION));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivityFindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * and returns an ActivityFindCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cPrefix\u003e prefixesFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Matcher matcher \u003d Pattern.compile(\"\\\\s\\\\w+/\").matcher(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            prefixesFound.add(new Prefix(matcher.group().trim()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Prefix p: prefixesFound) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (prefixes.stream().noneMatch(x -\u003e x.equals(p))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                throw new ParseException(String"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACTIVITYNAME, PREFIX_LOCATION, PREFIX_ADESCRIPTION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        HashMap\u003cPrefix, List\u003cString\u003e\u003e activityFindKeywords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!isAnyPrefixPresent(argMultimap) \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(String"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    .format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!isAnyPrefixPresent(argMultimap)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList(argMultimap.getPreamble().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            activityFindKeywords.put(PREFIX_ALL, keywords);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Prefix p: prefixesFound) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            List\u003cString\u003e keywords \u003d getKeyWords(argMultimap, p);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            activityFindKeywords.put(p, keywords);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityFindCommand(new ActivityContainsKeywordsPredicate(activityFindKeywords));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return prefixes.stream().anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns the keywords for the given prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static List\u003cString\u003e getKeyWords (ArgumentMultimap argumentMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cString\u003e args \u003d argumentMultimap.getAllValues(prefix);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (String arg: args) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            keywords.addAll(Arrays.asList(arg.trim().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (keywords.isEmpty() || keywords.get(0).equals(new String(\"\"))) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException(String"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    .format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/ActivitySelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivitySelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Parses input arguments and creates a new ActivitySelectCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivitySelectCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ActivitySelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * and returns an ActivitySelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivitySelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return new ActivitySelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivitySelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/InvalidCommandModeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Represents an error when an invalid command is passed in the current mode"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class InvalidCommandModeException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public InvalidCommandModeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public InvalidCommandModeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueActivityList activities;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private final AppMode appMode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        activities \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        appMode \u003d new AppMode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns true if appMode is MEMBER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean modeIsMember () {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return appMode.isMember();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns true if appMode is ACTIVITY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean modeIsActivity () {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return appMode.isActivity();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns value of appMode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public AppMode.Modes getAppMode () {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return appMode.getAppMode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Sets value of appMode to (@code mode)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void setAppMode (AppMode.Modes mode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        appMode.setAppMode(mode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Replaces the contents of the activity list with {@code activities}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.activities.setActivities(activities);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Update the status of the activities in the activity list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void updateActivities() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cActivity\u003e activityList \u003d this.getActivityList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Activity activity: activityList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (!activity.getStatus().equals(activity.getCurrentStatus())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                Activity updated \u003d activity.updateActivity();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setActivity(activity, updated);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        setActivities(newData.getActivityList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        setAppMode(newData.getCurrMode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void sortAddressBook(String input) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.persons.sortList(input);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if a person with the same matricNumber as {@code person} exists in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean hasMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return persons.containsMatricNumber(matricNumber);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns the person if a person with the same matricNumber as {@code person} exists in the address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Person getPersonWithMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return persons.getPersonWithMatricNumber(matricNumber);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    //// activity-level operations"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if activity with the same identity as {@code activity} exists in the address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if activity that clash in location and time as {@code activity} exists in the address book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean hasActivityClashInLocation(Activity activity) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return activities.containsActivityWithLocationClash(activity);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Adds an activity to the address book."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * The activity must not already exist in the address book."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addActivity(Activity a) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        activities.add(a);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Removes {@code matricNumber} from all existing attendance lists in the activity list."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * {@code matricNumber} must exist in the address book."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void removeMemberFromAllAttendance(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        for (Activity activity : activities) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            if (activity.hasPersonInAttendance(matricNumber)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Activity copyActivity \u003d Activity.removeMemberFromActivity(activity, matricNumber);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                setActivity(activity, copyActivity);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Get the activities attended by this {@code Person}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivitiesOfPerson(Person key) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        UniqueActivityList attending \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        for (Activity activity: activities) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (isPersonAttending(key, activity)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                attending.add(activity);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return attending.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Get the activities attended by this {@code Person}."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int getAttendedActivitiesCounter(Person key) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        for (Activity activity: activities) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (isPersonAttending(key, activity) \u0026\u0026 activity.getStatus().isCompleted()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Get the activities attended by this {@code Person}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int getParticipationRate(Person key) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int attendedCounter \u003d 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int activitiesCounter \u003d 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        for (Activity activity: activities) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (activity.getStatus().isCompleted()) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                activitiesCounter++;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (isPersonAttending(key, activity) \u0026\u0026 activity.getStatus().isCompleted()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                attendedCounter++;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (activitiesCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return (attendedCounter * 100) / activitiesCounter;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Get the person in the attendance from this {@code AddressBook}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cPerson\u003e getAttendingFromActivity(Activity key) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ObservableList\u003cPerson\u003e attending \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cMatricNumber\u003e matricAttending \u003d key.getAttendance();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (MatricNumber matric: matricAttending) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (hasMatricNumber(matric)) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                attending.add(getPersonWithMatricNumber(matric));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return attending;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Get the list of Person not attending an activity from this {@code AddressBook}."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPeronNotAttending(Activity key) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        UniquePersonList notAttending \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Person person: persons) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (!isPersonAttending(person, key)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                notAttending.add(person);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return notAttending.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns a boolean of whether a person is attending the given {@code Activity}."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean isPersonAttending(Person person, Activity activity) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return activity.isMatricAttending(person.getMatricNumber());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public AppMode.Modes getCurrMode() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return appMode.getAppMode();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 activities.equals(((AddressBook) other).activities));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return Objects.hash(persons, activities);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 12,
      "A0143487X-Kevin": 36,
      "ivyyangyq": 78,
      "-": 190,
      "joel0111": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AppMode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Represents the operation mode of the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class AppMode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private Modes appMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public AppMode () {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        this.init();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Specifies Modes ENUM values for AppMode class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public enum Modes {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MEMBER, ACTIVITY"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Initialize appMode to MEMBER."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void init () {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        this.appMode \u003d Modes.MEMBER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns true if a appMode is MEMBER."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean isMember () {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return this.getAppMode().equals(Modes.MEMBER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns true if a appMode is ACTIVITY"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean isActivity () {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return this.getAppMode().equals(Modes.ACTIVITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns value of appMode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public Modes getAppMode () {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return appMode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Sets value of appMode to (@code mode)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void setAppMode (Modes mode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        appMode \u003d mode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *  Returns true if (@modeStr) is valid string value of Modes ENUM"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *  else return false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static boolean modeStringIsValidValue (String modeStr) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        for (AppMode.Modes mode : AppMode.Modes.values()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            if (mode.toString().equalsIgnoreCase(modeStr)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *  Returns ENUM value Modes if (@modeStr) is valid ENUM value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *  else return null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public static Modes convertStringToModes (String modeStr) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        for (AppMode.Modes mode : AppMode.Modes.values()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            if (mode.toString().equalsIgnoreCase(modeStr)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                return mode;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Sets AddressBook mode to {@code mode}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    void setAddressBookMode(AppMode.Modes mode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Get AddressBook mode."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    AppMode.Modes getAddressBookMode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns true if appMode is MEMBER."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    boolean addressBookModeIsMember ();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns true if appMode is ACTIVITY."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    boolean addressBookModeIsActivity ();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if a person with the same matricNumber as {@code person} exists in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    boolean hasMatricNumber(MatricNumber matricNumber);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns Person if a person with the same matricNumber as {@code person} exists in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    Person getPersonWithMatricNumber(MatricNumber matricNumber);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Updates the filter of the filtered person and activity list to NONE."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    void resetLists();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    void sortAddressBook(String input);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns the filtered person, for export"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    Person generateExportedPerson(Person person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Sets the selected activity in the filtered person list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns the filtered activity, for export"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    Activity generateExportedActivity(Activity activity);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered activity list */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered activity list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasActivity(Activity activity);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if an activity at the same time and location as {@code activity} exists in the address book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    boolean hasActivityClashInLocation(Activity activity);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given activity."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * The activity must exist in the address book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteActivity(Activity target);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code activity} must not already exist in the address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    void addActivity(Activity activity);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given activity {@code target} with {@code editedActivity}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    void setActivity(Activity target, Activity editedActivity);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    ReadOnlyProperty\u003cActivity\u003e selectedActivityProperty();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    Activity getSelectedActivity();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    void setSelectedActivity(Activity activity);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Gets the lists of Person attending an activity"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    ObservableList\u003cPerson\u003e getAttendingOfSelectedActivity();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Gets the lists of Person not attending an activity"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonNotInSelectedActivity();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns lists of activity attended by Person"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivitiesOfPerson();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Update entire activity list"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    void updateActivityList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * removes member from all activities using matriculation number"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    void removeMemberFromAllAttendance(MatricNumber matricNumber);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns number of activities attended by member."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    int getAttendedActivitiesCounter(Person person);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns participation rate of member."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    int getParticipationRate(Person person);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 39,
      "ivyyangyq": 38,
      "melkwx": 5,
      "-": 165,
      "joel0111": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredActivities;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final SimpleObjectProperty\u003cActivity\u003e selectedActivity \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final ObservableList\u003cPerson\u003e personAttendingActivity \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final ObservableList\u003cPerson\u003e personNotAttendingActivity \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final ObservableList\u003cActivity\u003e activitiesAttendedByMember \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        filteredActivities \u003d new FilteredList\u003c\u003e(versionedAddressBook.getActivityList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        filteredActivities.addListener(this::ensureSelectedActivityIsValid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void setAddressBookMode(AppMode.Modes mode) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        versionedAddressBook.setAppMode(mode);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public AppMode.Modes getAddressBookMode () {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return versionedAddressBook.getAppMode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean addressBookModeIsMember () {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return versionedAddressBook.modeIsMember();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public boolean addressBookModeIsActivity () {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return versionedAddressBook.modeIsActivity();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook () {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson (Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean hasMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return versionedAddressBook.hasMatricNumber(matricNumber);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Person getPersonWithMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return versionedAddressBook.getPersonWithMatricNumber(matricNumber);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasActivity(activity);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean hasActivityClashInLocation(Activity activity) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return versionedAddressBook.hasActivityClashInLocation(activity);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removeActivity(target);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addActivity(activity);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void sortAddressBook(String input) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        versionedAddressBook.sortAddressBook(input);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void updateActivityList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        versionedAddressBook.updateActivities();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void resetLists() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        setSelectedPerson(null);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        setSelectedActivity(null);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public Person generateExportedPerson(Person person) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        setSelectedPerson(person);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return selectedPerson.get(); // this function returns a person"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public Activity generateExportedActivity(Activity activity) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (activity !\u003d null \u0026\u0026 !filteredActivities.contains(activity)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        setSelectedActivity(activity);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return selectedActivity.get(); // this function returns a activity"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            activitiesAttendedByMember.clear();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            activitiesAttendedByMember.setAll(versionedAddressBook.getActivitiesOfPerson(person));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int getAttendedActivitiesCounter(Person person) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return versionedAddressBook.getAttendedActivitiesCounter(person);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int getParticipationRate(Person person) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return versionedAddressBook.getParticipationRate(person);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Activity List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Activity} backed by the internal list of"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredActivities;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        updateActivityList();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredActivities.setPredicate(predicate);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected activity \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ReadOnlyProperty\u003cActivity\u003e selectedActivityProperty() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return selectedActivity;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public Activity getSelectedActivity() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return selectedActivity.getValue();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setSelectedActivity(Activity activity) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (activity !\u003d null \u0026\u0026 !filteredActivities.contains(activity)) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        selectedActivity.setValue(activity);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            personNotAttendingActivity.clear();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            personAttendingActivity.clear();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            personAttendingActivity.setAll(versionedAddressBook.getAttendingFromActivity(activity));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            personNotAttendingActivity.setAll(versionedAddressBook.getPeronNotAttending(activity));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cPerson\u003e getAttendingOfSelectedActivity() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return personAttendingActivity;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonNotInSelectedActivity() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return personNotAttendingActivity;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivitiesOfPerson() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return activitiesAttendedByMember;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Ensures {@code selectedActivity} is a valid activity in {@code filteredActivities}."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private void ensureSelectedActivityIsValid(ListChangeListener.Change\u003c? extends Activity\u003e change) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (selectedActivity.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                // null is always a valid selected activity, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            boolean wasSelectedActivityReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedActivity.getValue());"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (wasSelectedActivityReplaced) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                // Update selectedActivity to its new value."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedActivity.getValue());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                selectedActivity.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                logger.fine(personAttendingActivity.stream().toString());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            boolean wasSelectedActivityRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    .anyMatch(removedActivity -\u003e selectedActivity.getValue().isSameActivity(removedActivity));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (wasSelectedActivityRemoved) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                // Select the activity that came before it in the list,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                // or clear the selection if there is no such activity."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                selectedActivity.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Member-Activity Interaction\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void removeMemberFromAllAttendance(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        versionedAddressBook.removeMemberFromAllAttendance(matricNumber);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 filteredActivities.equals(other.filteredActivities)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get())"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedActivity.get(), other.selectedActivity.get());"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 10,
      "A0143487X-Kevin": 42,
      "ivyyangyq": 97,
      "melkwx": 1,
      "-": 276,
      "joel0111": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the activity list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate activities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivityList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Returns the mode of the AddressBook"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    AppMode.Modes getCurrMode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"clubmanager.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return super.equals(otherVersionedAddressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //\u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 3,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Activity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Represents an Activity in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class Activity implements Comparable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ActivityName name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ActivityDateTime dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ActivityLocation location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ActivityDescription description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final ActivityStatus status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final List\u003cMatricNumber\u003e attendance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public Activity(ActivityName name, ActivityDateTime dateTime, ActivityLocation location,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    ActivityDescription description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireAllNonNull(name, dateTime, location, description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.status \u003d setStatus(dateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.attendance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public Activity(ActivityName name, ActivityDateTime dateTime, ActivityLocation location) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireAllNonNull(name, dateTime, location);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.description \u003d new ActivityDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.status \u003d setStatus(dateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.attendance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public Activity(ActivityName name, ActivityDateTime dateTime, ActivityLocation location,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDescription description, List\u003cMatricNumber\u003e attendance) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireAllNonNull(name, dateTime, location, description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.status \u003d setStatus(dateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ActivityName getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ActivityDateTime getDateTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ActivityLocation getLocation() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ActivityDescription getDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public List\u003cMatricNumber\u003e getAttendance() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityStatus getStatus() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityStatus getCurrentStatus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityStatus(dateTime.isPast());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Adds member to attendance list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static Activity addMemberToActivity(Activity toReplace, MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityName copyName \u003d toReplace.getName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDateTime copyDateTime \u003d toReplace.getDateTime();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityLocation copyLocation \u003d toReplace.getLocation();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDescription copyDescription \u003d toReplace.getDescription();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cMatricNumber\u003e copyAttendance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        copyAttendance.addAll(toReplace.getAttendance());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        copyAttendance.add(matricNumber);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new Activity(copyName, copyDateTime, copyLocation, copyDescription, copyAttendance);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Removes member from attendance list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static Activity removeMemberFromActivity(Activity toReplace, MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityName copyName \u003d toReplace.getName();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDateTime copyDateTime \u003d toReplace.getDateTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityLocation copyLocation \u003d toReplace.getLocation();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDescription copyDescription \u003d toReplace.getDescription();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        List\u003cMatricNumber\u003e copyAttendance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        copyAttendance.addAll(toReplace.getAttendance());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        copyAttendance.remove(matricNumber);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new Activity(copyName, copyDateTime, copyLocation, copyDescription, copyAttendance);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean hasPersonInAttendance(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return attendance.contains(matricNumber);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberAttending() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.attendance.size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns a activity status based on the ActivityDateTime input"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private ActivityStatus setStatus(ActivityDateTime dateTime) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ActivityStatus(dateTime.isPast());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if both activities are of the same name have the same date."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two activities."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherActivity !\u003d null"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherActivity.getName().equals(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherActivity.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if both activities have the same datetime and location."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * This is to check if there are clashes in location."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean hasClashInTimeLocation(Activity otherActivity) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return otherActivity !\u003d null"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 otherActivity.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 otherActivity.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns an updated activity with new Status"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public Activity updateActivity() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityName name \u003d this.getName();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDateTime dateTime \u003d this.getDateTime();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityLocation location \u003d this.getLocation();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDescription description \u003d this.getDescription();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cMatricNumber\u003e attendance \u003d this.getAttendance();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new Activity(name, dateTime, location, description, attendance);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns whether a Person represented by the {@code Matric} is Attending the activity"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean isMatricAttending(MatricNumber matric) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return attendance.contains(matric);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherActivity.getName().equals(getName())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherActivity.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherActivity.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherActivity.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherActivity.getAttendance().equals(getAttendance());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return Objects.hash(name, dateTime, location, description, attendance);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Date Time: \")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Number Attending: \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getNumberAttending());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public int compareTo(Activity other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //when both activity are ongoing or completed, compare by the time of the activity"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (this.getStatus().equals(other.getStatus())) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return this.getDateTime().compareTo(other.getDateTime());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (other.getStatus().isCompleted()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            //this activity is ongoing while the other is completed, this activity will come first in the list"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // this activity is completed while the other is ongoing, the other activity will come first in the list"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 38,
      "ivyyangyq": 94,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Tests that the attributes of an {@code Activity} matches any of the keywords given."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final HashMap\u003cPrefix, List\u003cString\u003e\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityContainsKeywordsPredicate(HashMap\u003cPrefix, List\u003cString\u003e\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if activity contains the predicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (keywords.containsKey(PREFIX_ALL)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return keywords.get(PREFIX_ALL).stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().fullActivityName, keyword)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                            || StringUtil.containsWordIgnoreCase(activity.getDescription().value, keyword)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                            || StringUtil.containsWordIgnoreCase(activity.getLocation().value, keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        boolean isNameMatched \u003d keywords.get(PREFIX_ACTIVITYNAME) \u003d\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || keywords.get(PREFIX_ACTIVITYNAME).stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().fullActivityName, keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        boolean isDescriptionMatched \u003d keywords.get(PREFIX_ADESCRIPTION) \u003d\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || keywords.get(PREFIX_ADESCRIPTION).stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getDescription().value, keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        boolean isLocationMatched \u003d keywords.get(PREFIX_LOCATION) \u003d\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || keywords.get(PREFIX_LOCATION).stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getLocation().value, keyword));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return isNameMatched \u0026\u0026 isDescriptionMatched \u0026\u0026 isLocationMatched;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (other instanceof seedu.address.model.activity.ActivityContainsKeywordsPredicate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 keywords.equals(((ActivityContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityDateTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an Activity\u0027s Date and Time in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidActivityDateTime(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityDateTime implements Comparable\u003cActivityDateTime\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \"Dates and time should be in dd/MM/YYYY HHmm format separated by a blank between date and time. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    + \"Date and month should have 2 digits and the year should be four digits. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    + \"Time should be entered in 24 hr clock format. e.g. 1330 represents 1:30 pm. \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String DATE_PART_REGEX \u003d \"^\\\\d{2}\" + \"/\" + \"\\\\d{2}\" + \"/\" + \"\\\\d{4}\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String TIME_PART_REGEX \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d DATE_PART_REGEX + \" \" + TIME_PART_REGEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public final Calendar calendarDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code ActivityDateTime}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateTime A valid datetime."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ActivityDateTime(String dateTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidActivityDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        fullDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        calendarDateTime \u003d getCalendarTime(dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if a given string is a valid datetime."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidActivityDateTime(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cString\u003e dateTimeParts \u003d Arrays.asList(test.split(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String datePart \u003d dateTimeParts.get(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String timePart \u003d dateTimeParts.get(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return isValidDate(datePart) \u0026\u0026 isValidTime(timePart);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if a given date is a valid date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            format.parse(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if a given time is a valid time."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return !(hour \u003e 23 || minute \u003e 59);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns the calendar date and time from the input"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static Calendar getCalendarTime(String datetime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance(new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cString\u003e dateTimeParts \u003d Arrays.asList(datetime.split(\" \"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String datePart \u003d dateTimeParts.get(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String timePart \u003d dateTimeParts.get(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cString\u003e date \u003d Arrays.asList(datePart.split(\"/\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        int day \u003d Integer.parseInt(date.get(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        int month \u003d Integer.parseInt(date.get(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        int year \u003d Integer.parseInt(date.get(2));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        int hour \u003d Integer.parseInt(timePart.substring(0, 2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        int minute \u003d Integer.parseInt(timePart.substring(2));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        cal.set(year, month - 1, day, hour, minute, 00);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return cal;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if a given time is before the current date and time"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean isPast() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Calendar now \u003d Calendar.getInstance(new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return calendarDateTime.before(now);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the time is before the given date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean isBefore(Calendar toCompare) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return calendarDateTime.before(toCompare);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the time is after the given date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean isAfter(Calendar toCompare) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return calendarDateTime.after(toCompare);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the time is on the same day"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean isSameDay(Calendar toCompare) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return (calendarDateTime.get(Calendar.ERA) \u003d\u003d toCompare.get(Calendar.ERA)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 calendarDateTime.get(Calendar.YEAR) \u003d\u003d toCompare.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 calendarDateTime.get(Calendar.DAY_OF_YEAR) \u003d\u003d toCompare.get(Calendar.DAY_OF_YEAR));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullDateTime;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ActivityDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullDateTime.equals(((ActivityDateTime) other).fullDateTime)); // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullDateTime.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public int compareTo(ActivityDateTime other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return this.calendarDateTime.compareTo(other.calendarDateTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 107,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityDateTimeAfterPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Tests that the DateTime of an {@code Activity} is within x number of days after from now."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityDateTimeAfterPredicate extends ActivityDateTimePredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final Calendar toCompare;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final Calendar now;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityDateTimeAfterPredicate(int days) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Calendar now \u003d Calendar.getInstance(new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        now.add(Calendar.DAY_OF_YEAR, days);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.toCompare \u003d now;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.now \u003d Calendar.getInstance(new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the date of the activity is within the range from toCompare to now."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return (activity.getDateTime().isAfter(now) \u0026\u0026 activity.getDateTime().isBefore(toCompare))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (activity.getDateTime().isSameDay(now) \u0026\u0026 !activity.getCurrentStatus().isCompleted())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || activity.getDateTime().isSameDay(toCompare);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (other instanceof ActivityDateTimeAfterPredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 now.equals(((ActivityDateTimeAfterPredicate) other).now)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 toCompare.equals(((ActivityDateTimeAfterPredicate) other).toCompare));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityDateTimeBeforePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Tests that the DateTime of an {@code Activity} is within x number of days before to now."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityDateTimeBeforePredicate extends ActivityDateTimePredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final Calendar toCompare;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final Calendar now;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityDateTimeBeforePredicate(int days) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Calendar now \u003d Calendar.getInstance(new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        now.add(Calendar.DAY_OF_YEAR, 0 - days);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.toCompare \u003d now;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.now \u003d Calendar.getInstance(new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the date of the activity is within the range from toCompare to now."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return (activity.getDateTime().isAfter(toCompare) \u0026\u0026 activity.getDateTime().isBefore(now))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (activity.getDateTime().isSameDay(now) \u0026\u0026 activity.getCurrentStatus().isCompleted())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || activity.getDateTime().isSameDay(toCompare);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (other instanceof ActivityDateTimeBeforePredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 now.equals(((ActivityDateTimeBeforePredicate) other).now)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 toCompare.equals(((ActivityDateTimeBeforePredicate) other).toCompare));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityDateTimePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Tests that the DateTime of an {@code Activity} matches the condition given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public abstract class ActivityDateTimePredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public abstract boolean test(Activity activity);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "//@@author minernchan"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Represents an Activity\u0027s Description"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, should describe the activity, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"More details to be added.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Constructs an {@code ActivityDescription}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityDescription(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Constructs an {@code ActivityDescription}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        value \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                || (other instanceof ActivityDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 value.equals(((ActivityDescription) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 65,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityLocation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "//@@author minernchan"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Represents an Activity\u0027s Location"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityLocation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Constructs an {@code ActivityLocation}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityLocation(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                || (other instanceof ActivityLocation // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 value.equalsIgnoreCase(((ActivityLocation) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 53,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "//@@author minernchan"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code ActivityName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityNameContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().fullActivityName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                || (other instanceof seedu.address.model.activity.ActivityNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                \u0026\u0026 keywords.equals(((seedu.address.model.activity.ActivityNameContainsKeywordsPredicate) other)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 26,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/ActivityStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Represents an Activity\u0027s Status in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityStatus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Represents the possible status of ActivityStatus"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public enum Status { ONGOING, COMPLETED }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public final Status status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Constructs a {@code ActivityStatus}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @param isPast a boolean about whether the activity time is in the past."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityStatus(boolean isPast) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (isPast) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            this.status \u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            this.status \u003d Status.ONGOING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the status is completed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return (this.status \u003d\u003d Status.COMPLETED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return this.status.name();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (other instanceof ActivityStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 this.status.equals(((ActivityStatus) other).status)); //state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/UniqueActivityList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * A list of activities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * An activity is considered unique by comparing using {@code Activity#isSameActivity(Activity)}. As such, adding"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * and updating of activities uses Activity#isSameActivity(Activity) for equality so as to ensure that  the activity"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueActivityList.  However, the removal of a activity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * uses Activity#equals(Object) so as to ensure that the activity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * @see Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class UniqueActivityList implements Iterable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final SortedList\u003cActivity\u003e sortedInternalList \u003d internalList.sorted();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            FXCollections.unmodifiableObservableList(sortedInternalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the list contains an equivalent activity as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean contains(Activity toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if the list contains an activity at the same location and same datetime."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean containsActivityWithLocationClash(Activity toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasClashInTimeLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Adds an activity to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void add(Activity toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameActivity(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Removes the equivalent activity from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!activitiesAreUnique(activities)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ObservableList\u003cActivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public Iterator\u003cActivity\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private boolean activitiesAreUnique(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            for (int j \u003d i + 1; j \u003c activities.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                if (activities.get(i).isSameActivity(activities.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 129,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/ActivityNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/DuplicateActivityException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Activities (Activities are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class DuplicateActivityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        super(\"Operation would result in duplicate activities\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 4,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            \"Gender should be Male or Female, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"Male|Female\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.value \u003d gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!test.equalsIgnoreCase(\"male\") \u0026\u0026 !test.equalsIgnoreCase(\"female\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/GenderContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Gender} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class GenderContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public GenderContainsKeywordsPredicate(String keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return keywords.equalsIgnoreCase(person.getGender().value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof GenderContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 keywords.equals(((GenderContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Major.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Represents a Person\u0027s major in the club manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            \"Majors should only contain alphabets and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * The first character of the major must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param major A valid major."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Major(String major) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        checkArgument(isValidMajor(major), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.value \u003d major;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static boolean isValidMajor(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof Major // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 value.equals(((Major) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MajorContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Major} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MajorContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MajorContainsKeywordsPredicate(String keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return keywords.equalsIgnoreCase(person.getMajor().value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof MajorContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 keywords.equals(((MajorContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatricNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Represents a Person\u0027s matricNumber in the club manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MatricNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            \"MatricNumber should only contain alphanumeric characters, starting with an A\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    + \" and ending with an uppercase alphabet,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    + \" with 7 digits in between the first and last character.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    + \" The last letter must be a valid checksum.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[AU]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param matricNumber A valid matricNumber."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.value \u003d matricNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if both persons of the same matric number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean isSameMatricNumber(MatricNumber otherMatricNumber) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return otherMatricNumber !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 otherMatricNumber.value.equalsIgnoreCase(this.value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static boolean isValidMatricNumber(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!isCheckSumValid(test)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * * Returns true if a given string ends with a valid checksum letter."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static boolean isCheckSumValid(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        char[] checkDigit \u003d {\u0027Y\u0027, \u0027X\u0027, \u0027W\u0027, \u0027U\u0027, \u0027R\u0027, \u0027N\u0027, \u0027M\u0027, \u0027L\u0027, \u0027J\u0027, \u0027H\u0027, \u0027E\u0027, \u0027A\u0027, \u0027B\u0027};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int endIndex \u003d test.length() - 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        for (int i \u003d 2; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            sum +\u003d test.charAt(i) - \u00270\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int result \u003d sum % 13;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (checkDigit[result] \u003d\u003d test.charAt(endIndex)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof MatricNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 value.equals(((MatricNumber) other).value)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatricNumberContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melkwx"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melkwx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melkwx"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code MatricNum} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melkwx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class MatricNumberContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public MatricNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsIgnoreCase(person.getMatricNumber().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                || (other instanceof MatricNumberContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                \u0026\u0026 keywords.equals(((MatricNumberContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melkwx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "joel0111": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final MatricNumber matricNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final YearOfStudy yearOfStudy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Person(Name name, MatricNumber matricNumber, Phone phone, Email email, Address address, Gender gender,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                  YearOfStudy yearOfStudy, Major major, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireAllNonNull(name, matricNumber, phone, email, address, gender, yearOfStudy, major, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MatricNumber getMatricNumber() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return matricNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public YearOfStudy getYearOfStudy() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return yearOfStudy;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 otherPerson.getMatricNumber().equals((getMatricNumber()))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 otherPerson.getMatricNumber().equals(getMatricNumber())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(getGender())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 otherPerson.getYearOfStudy().equals(getYearOfStudy())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 otherPerson.getMajor().equals(getMajor())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return Objects.hash(address, name, phone, email, gender, major, matricNumber, tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(\" Matric Number: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(getMatricNumber())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(\" Year of Study: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(getYearOfStudy())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(\" Major: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(getMajor())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "joel0111": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            \"Phone numbers should only start with 6, 8 or 9, and it should be only be 8 digits long.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[689]\\\\d{7}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "joel0111": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tags} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public TagsContainsKeywordsPredicate(String keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return person.getTags().toString().toLowerCase().contains(keywords.toLowerCase());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String SORT_BY_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String SORT_BY_GENDER \u003d \"gender\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String SORT_BY_MAJOR \u003d \"major\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String SORT_BY_YEAR_OF_STUDY \u003d \"yearofstudy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean containsMatricNumber (MatricNumber toCheck) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return internalList.stream().map(x -\u003e x.getMatricNumber()).anyMatch(toCheck::isSameMatricNumber);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns the person if the list contains a person who has the matric number as the given argument."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Person getPersonWithMatricNumber (MatricNumber toCheck) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person person;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            person \u003d internalList.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (person.getMatricNumber().isSameMatricNumber(toCheck)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                return person;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sorts the Member\u0027s list based on a given predicate."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void sortList(String input) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        FXCollections.sort(internalList, new Comparator \u003cPerson\u003e () {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            public int compare(Person o1, Person o2) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String sortCriteria \u003d input.toString().toLowerCase();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                Pair\u003cString, String\u003e test \u003d getCriteria(sortCriteria, o1, o2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                int result \u003d 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                result \u003d test.getKey().compareTo(test.getValue());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                if (result !\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    return result;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                return o1.getName().fullName.compareTo(o2.getName().fullName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * [Add your comments]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param sortCriteria"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param o1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param o2"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public Pair\u003cString, String\u003e getCriteria(String sortCriteria, Person o1, Person o2) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        switch (sortCriteria.toLowerCase()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case SORT_BY_NAME:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new Pair\u003c\u003e(o1.getName().fullName, o2.getName().fullName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case SORT_BY_GENDER:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new Pair\u003c\u003e(o1.getGender().value, o2.getGender().value);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case SORT_BY_MAJOR:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new Pair\u003c\u003e(o1.getMajor().value, o2.getMajor().value);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case SORT_BY_YEAR_OF_STUDY:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return new Pair\u003c\u003e(o1.getYearOfStudy().value, o2.getYearOfStudy().value);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "joel0111": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/YearOfStudy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Represents a Person\u0027s yearOfStudy in the club manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidYearOfStudy(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class YearOfStudy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            \"YearOfStudy should only contain a single digit between 1 to 6 and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * The first character of the yearOfStudy must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[[1-6]{1}]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param yearOfStudy A valid yearOfStudy."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public YearOfStudy(String yearOfStudy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        requireNonNull(yearOfStudy);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        checkArgument(isValidYearOfStudy(yearOfStudy), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.value \u003d yearOfStudy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns true if a given string is a valid yearOfStudy."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static boolean isValidYearOfStudy(String yearOfStudy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if ((!yearOfStudy.matches(VALIDATION_REGEX))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return \"Year \" + value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof YearOfStudy // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 value.equals(((YearOfStudy) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/YearOfStudyContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code YearOfStudy} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class YearOfStudyContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public YearOfStudyContainsKeywordsPredicate(String keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return keywords.equalsIgnoreCase(person.getYearOfStudy().value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                || (other instanceof YearOfStudyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 keywords.equals(((YearOfStudyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityLocation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new MatricNumber(\"A0111111M\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Gender(\"Male\"), new YearOfStudy(\"1\"), new Major(\"Chemistry\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    getTagSet(\"Swimming\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new MatricNumber(\"A0222222B\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Gender(\"Female\"), new YearOfStudy(\"2\"), new Major(\"Computer Science\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    getTagSet(\"Running\", \"Swimming\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new MatricNumber(\"A0333333N\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Gender(\"Female\"), new YearOfStudy(\"3\"), new Major(\"Mathematics\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    getTagSet(\"Running\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"David Li\"), new MatricNumber(\"A0444444A\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Gender(\"Male\"), new YearOfStudy(\"3\"), new Major(\"Bioengineering\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    getTagSet(\"Soccer\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new MatricNumber(\"A0555555R\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Gender(\"Male\"), new YearOfStudy(\"2\"), new Major(\"Physics\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    getTagSet(\"Basketball\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new MatricNumber(\"A0777777U\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"royb@example.com\"), new Address(\"Blk 4 Bedok Street 12, #12-31\"), new Gender(\"Male\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new YearOfStudy(\"2\"), new Major(\"Physics\"), getTagSet(\"Soccer\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Jonathan Ng\"), new MatricNumber(\"A0888888H\"), new Phone(\"89225657\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"jon@example.com\"), new Address(\"Blk 15 Sengkang Drive 17, #02-31\"), new Gender(\"Male\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new YearOfStudy(\"6\"), new Major(\"Medicine\"), getTagSet(\"Hockey\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Amy Ang\"), new MatricNumber(\"A0181234M\"), new Phone(\"92621117\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Email(\"amya@example.com\"), new Address(\"Blk 2 Clementi Street 23, #09-12\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Gender(\"Female\"), new YearOfStudy(\"3\"), new Major(\"Physics\"), getTagSet(\"Swimming\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            new Person(new Name(\"Jane Ong\"), new MatricNumber(\"A0171453J\"), new Phone(\"80113651\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        new Email(\"janeo@example.com\"), new Address(\"Blk 5 Marine Parade Street 12, #11-31\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    new Gender(\"Female\"), new YearOfStudy(\"4\"), new Major(\"Economics\"), getTagSet(\"Soccer\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static Activity[] getSampleActivities() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new Activity[] {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"CS2103 Help Session\"), new ActivityDateTime(\"10/02/2019 1400\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ActivityLocation(\"Com1 02-06\"), new ActivityDescription(\"Bring Laptop\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0111111M\"), new MatricNumber(\"A0555555R\")))),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Club Annual Meeting\"), new ActivityDateTime(\"11/02/2019 1600\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ActivityLocation(\"Computer Club Room\"), new ActivityDescription(\"Summary of past year activities\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0222222B\"), new MatricNumber(\"A0333333N\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        new MatricNumber(\"A0555555R\"), new MatricNumber(\"A0444444A\"), new MatricNumber(\"A0777777U\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        new MatricNumber(\"A0888888H\")))),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Avenger Movie Viewing\"), new ActivityDateTime(\"10/05/2019 2000\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ActivityLocation(\"Cathay cinema\"), new ActivityDescription(\"12 dollar per pax\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0111111M\"), new MatricNumber(\"A0222222B\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        new MatricNumber(\"A0555555R\"), new MatricNumber(\"A0444444A\"), new MatricNumber(\"A0777777U\")))),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Summer Hackerthon\"), new ActivityDateTime(\"06/06/2019 0900\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ActivityLocation(\"Icube Auditorium\"), new ActivityDescription(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0222222B\"), new MatricNumber(\"A0181234M\")))),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"CS2103 Final Exam\"), new ActivityDateTime(\"30/04/2019 1300\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ActivityLocation(\"MPSH5\"), new ActivityDescription(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0171453J\"), new MatricNumber(\"A0555555R\")))),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Lightroom Workshop\"), new ActivityDateTime(\"03/03/2019 1500\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ActivityLocation(\"Central Library\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ActivityDescription(\"Learn new photo editing techniques\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0171453J\"), new MatricNumber(\"A0181234M\")))),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Quadrantid Meteor Shower\"), new ActivityDateTime(\"03/01/2019 2300\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ActivityLocation(\"Multi-purpose filed\"), new ActivityDescription(\"Telescope will be provided\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0777777U\"), new MatricNumber(\"A0333333N\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                            new MatricNumber(\"A0555555R\"), new MatricNumber(\"A0444444A\")))),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Video Department Meeting\"), new ActivityDateTime(\"31/03/2019 1930\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ActivityLocation(\"Club Room\"), new ActivityDescription(\"Attendance required.\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0333333N\"), new MatricNumber(\"A0777777U\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                            new MatricNumber(\"A0444444A\"), new MatricNumber(\"A0555555R\")))),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Valentine Day Sales\"), new ActivityDateTime(\"14/02/2019 1500\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ActivityLocation(\"Utown Green Plaza\"), new ActivityDescription(\"Selling brownies.\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0111111M\"), new MatricNumber(\"A0333333N\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                            new MatricNumber(\"A0555555R\"), new MatricNumber(\"A0444444A\"), new MatricNumber(\"A0777777U\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                            new MatricNumber(\"A0888888H\")))),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            new Activity(new ActivityName(\"Computing Open Day\"), new ActivityDateTime(\"17/03/2019 0900\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ActivityLocation(\"Com1 Level 2\"), new ActivityDescription(\"Students and families are welcome\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new MatricNumber(\"A0181234M\"), new MatricNumber(\"A0777777U\"))))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Activity sampleActivity : getSampleActivities()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            sampleAb.addActivity(sampleActivity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 49,
      "-": 45,
      "joel0111": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedActivity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityLocation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Jackson-friendly version of {@link Activity}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class JsonAdaptedActivity {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Activity\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final List\u003cJsonAdaptedMatric\u003e attendance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Constructs a {@code JsonAdaptedActivity} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public JsonAdaptedActivity(@JsonProperty(\"name\") String name, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                               @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                               @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                               @JsonProperty(\"attendance\") List\u003cJsonAdaptedMatric\u003e attendance) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (attendance !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            this.attendance.addAll(attendance);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Converts a given {@code Activity} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public JsonAdaptedActivity(Activity source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        name \u003d source.getName().fullActivityName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        time \u003d source.getDateTime().fullDateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        attendance.addAll(source.getAttendance().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                .map(JsonAdaptedMatric::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Activity} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        final List\u003cMatricNumber\u003e attending \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (JsonAdaptedMatric matric : attendance) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            attending.add(matric.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    ActivityName.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityName.isValidActivityName(name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(ActivityName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        final ActivityName modelName \u003d new ActivityName(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            ActivityDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityDateTime.isValidActivityDateTime(time)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(ActivityDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        final ActivityDateTime modelDateTime \u003d new ActivityDateTime(time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    ActivityLocation.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityLocation.isValidLocation(location)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(ActivityLocation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        final ActivityLocation modelLocation \u003d new ActivityLocation(location);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    ActivityDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!ActivityDescription.isValidDescription(description)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(ActivityDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        final ActivityDescription modelDescription \u003d new ActivityDescription(description);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new Activity(modelName, modelDateTime, modelLocation, modelDescription, attending);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 2,
      "ivyyangyq": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String matricNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String yearOfStudy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"matricNumber\") String matricNumber,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                             @JsonProperty(\"address\") String address, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                             @JsonProperty(\"yearOfStudy\") String yearOfStudy, @JsonProperty(\"major\") String major,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        matricNumber \u003d source.getMatricNumber().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        yearOfStudy \u003d source.getYearOfStudy().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        major \u003d source.getMajor().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (matricNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    MatricNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!MatricNumber.isValidMatricNumber(matricNumber)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        final MatricNumber modelMatricNumber \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (yearOfStudy \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    YearOfStudy.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!YearOfStudy.isValidYearOfStudy(yearOfStudy)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(YearOfStudy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        final YearOfStudy modelYearOfStudy \u003d new YearOfStudy(yearOfStudy);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (major \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!Major.isValidMajor(major)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new IllegalValueException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        final Major modelMajor \u003d new Major(major);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new Person(modelName, modelMatricNumber, modelPhone, modelEmail, modelAddress, modelGender,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                modelYearOfStudy, modelMajor, modelTags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "joel0111": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdatpedMatric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Jackson-friendly version of {@link MatricNumber}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "class JsonAdaptedMatric {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final String matric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Constructs a {@code JsonAdaptedMatric} with the given {@code matric}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public JsonAdaptedMatric(String matric) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.matric \u003d matric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Converts a given {@code MatricNumber} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public JsonAdaptedMatric(MatricNumber source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        matric \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public String getMatric() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return matric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Converts this Jackson-friendly adapted matric object into the model\u0027s {@code MatricNumber} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted matricNumber."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public MatricNumber toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!MatricNumber.isValidMatricNumber(matric)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new IllegalValueException(MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new MatricNumber(matric);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_ACTIVITY \u003d \"Activity list contains duplicated activity(ies).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                                       @JsonProperty(\"activities\") List\u003cJsonAdaptedActivity\u003e activities) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.activities.addAll(activities);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        activities.addAll(source.getActivityList().stream().map(JsonAdaptedActivity::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (JsonAdaptedActivity jsonAdaptedActivity : activities) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            Activity activity \u003d jsonAdaptedActivity.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (addressBook.hasActivity(activity)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATED_ACTIVITY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            addressBook.addActivity(activity);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 18,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivitiesAttendedByMemberPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Panel containing the list of activities attended by member."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class ActivitiesAttendedByMemberPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String FXML \u003d \"ActivitiesAttendedByMemberPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private ListView\u003cActivity\u003e activitiesAttendedByMember;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public ActivitiesAttendedByMemberPanel(ObservableList\u003cActivity\u003e activityList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        activitiesAttendedByMember.setItems(activityList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        activitiesAttendedByMember.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Activity} using a {@code ActivityCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                setGraphic(new ActivityCard(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * An UI component that displays information of a {@code Activity}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String FXML \u003d \"ActivityListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public final Activity activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Label alocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityCard(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        name.setText(activity.getName().fullActivityName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        time.setText(activity.getDateTime().fullDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        alocation.setText(activity.getLocation().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        description.setText(activity.getDescription().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        status.setText(activity.getStatus().status.name());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (activity.getStatus().isCompleted()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            status.setStyle(\"-fx-background-color: #112d4e\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            status.setStyle(\"-fx-background-color: #11999e\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityDetailPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Panel containing the details of an activity."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityDetailPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String FXML \u003d \"ActivityDetailPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    //private final ObservableList\u003cPerson\u003e attending;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private VBox actDetParent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Text actName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Text actTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Text actLocation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Text actDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Text actStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Text numAttending;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Text hasAttending;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private ListView\u003cPerson\u003e attendingList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityDetailPanel(ObservableValue\u003cActivity\u003e selectedActivity, ObservableList\u003cPerson\u003e attending) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        selectedActivity.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setUpDefaultView();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            setActivityDetails(newValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        setUpDefaultView();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //attending.addListener((ListChangeListener.Change\u003c? super Person\u003e c) -\u003e  );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        attendingList.setItems(attending);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        attendingList.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private void setActivityDetails(Activity activity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actName.setText(activity.getName().fullActivityName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actTime.setText(\"Date \u0026 Time: \" + activity.getDateTime().fullDateTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actLocation.setText(\"Location: \" + activity.getLocation().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actDescription.setText(\"Description: \" + activity.getDescription().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        actDescription.setWrappingWidth(actDetParent.getWidth() - 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actStatus.setText(\"Status: \" + activity.getStatus().status.name());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        numAttending.setText(\"Number of people attending: \" + activity.getNumberAttending());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (activity.getNumberAttending() \u003e 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            hasAttending.setText(\"\\nHere\u0027s the list of people attending: \\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            hasAttending.setText(\"\\nNo person in the attending list. \\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private void setUpView(Activity activity, ObservableList\u003cPerson\u003e attending) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        this.setActivityDetails(activity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        attendingList.setItems(attending);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        attendingList.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private void setUpDefaultView() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actName.setText(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actTime.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actLocation.setText(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actDescription.setText(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        actStatus.setText(\"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        numAttending.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        hasAttending.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDetailPanel detail \u003d (ActivityDetailPanel) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return actName.getText().equals(detail.actName.getText())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u0026\u0026 actTime.getText().equals(actTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 6,
      "ivyyangyq": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Panel containing the list of activities."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String FXML \u003d \"ActivityListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ActivityListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private ListView\u003cActivity\u003e activityListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ActivityListPanel(ObservableList\u003cActivity\u003e activityList, ObservableValue\u003cActivity\u003e selectedActivity,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                             Consumer\u003cActivity\u003e onSelectedActivityChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        activityListView.setItems(activityList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        activityListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            logger.fine(\"Selection in activity list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            onSelectedActivityChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        selectedActivity.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            logger.fine(\"Selected activity changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected activity,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (Objects.equals(activityListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                activityListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                int index \u003d activityListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                activityListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                activityListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Activity} using a {@code ActivityCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setGraphic(new ActivityCard(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (CommandException | InvalidCommandModeException | ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, InvalidCommandModeException;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 3,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    //private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private ActivityDetailPanel activityDetailPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private PersonNotAttendingListPanel personNotInActivityListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private ActivitiesAttendedByMemberPanel activitiesAttendedByMemberPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private ActivityListPanel activityListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private MemberDetailPanel memberDetailPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private StackPane leftListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private StackPane rightListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private Label modeLabel;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        memberDetailPanel \u003d new MemberDetailPanel(logic.selectedPersonProperty(), logic);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        activityDetailPanel \u003d new ActivityDetailPanel(logic.selectedActivityProperty(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                logic.getAttendingOfSelectedActivity());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        browserPlaceholder.getChildren().add(memberDetailPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        activityListPanel \u003d new ActivityListPanel(logic.getFilteredActivityList(), logic.selectedActivityProperty(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                logic::setSelectedActivity);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        leftListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        personNotInActivityListPanel \u003d new PersonNotAttendingListPanel(logic.getPersonNotInSelectedActivity());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        activitiesAttendedByMemberPanel \u003d new ActivitiesAttendedByMemberPanel(logic.getActivitiesOfPerson());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        rightListPanelPlaceholder.getChildren().add(activitiesAttendedByMemberPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        setModeLabel(logic.getAddressBook().getCurrMode());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     * Change mode"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private void handleModeHasChanged() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        logic.callAllListFn();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (isModeChangeToMember()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            leftListPanelPlaceholder.getChildren().set(0, personListPanel.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            browserPlaceholder.getChildren().set(0, memberDetailPanel.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            rightListPanelPlaceholder.getChildren().set(0, activitiesAttendedByMemberPanel.getRoot());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            setModeLabel(AppMode.Modes.MEMBER);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        if (isModeChangeToActivity()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            leftListPanelPlaceholder.getChildren().set(0, activityListPanel.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            browserPlaceholder.getChildren().set(0, activityDetailPanel.getRoot());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            rightListPanelPlaceholder.getChildren().set(0, personNotInActivityListPanel.getRoot());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            setModeLabel(AppMode.Modes.ACTIVITY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private void setModeLabel(AppMode.Modes mode) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case MEMBER:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            modeLabel.setText(\"Mode : MEMBER\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            modeLabel.getStyleClass().remove(\"labelMode-Activity\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            modeLabel.getStyleClass().add(\"labelMode-Member\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        case ACTIVITY:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            modeLabel.setText(\"Mode : ACTIVITY\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            modeLabel.getStyleClass().remove(\"labelMode-Member\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            modeLabel.getStyleClass().add(\"labelMode-Activity\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private boolean isModeChangeToMember() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return logic.modeHasChange_isCurrModeMember();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private boolean isModeChangeToActivity() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        return logic.modeHasChange_isCurrModeActivity();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            ParseException, InvalidCommandModeException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            if (commandResult.isModeHasChanged()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                handleModeHasChanged();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (InvalidCommandModeException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            logger.info(\"Invalid command mode: \" + commandText);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 68,
      "ivyyangyq": 8,
      "-": 195,
      "joel0111": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MemberDetailPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * A panel class to display member\u0027s information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberDetailPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String FXML \u003d \"MemberDetailPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text matricNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text yearOfStudy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text major;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text statistics;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text attendedActivitiesCounter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Text participationRate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public MemberDetailPanel (ObservableValue\u003cPerson\u003e selectedMember, Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        selectedMember.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            loadMemberDetails(newValue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Set up all patient details into the display panel."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @param member The patient to be displayed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private void loadMemberDetails(Person member) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        name.setText(member.getName().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        matricNumber.setText(\"Matric Number: \" + member.getMatricNumber().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        phone.setText(\"Phone: \" + member.getPhone().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        email.setText(\"Email: \" + member.getEmail().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        address.setText(\"Address: \" + member.getAddress().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        gender.setText(\"Gender: \" + member.getGender().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        yearOfStudy.setText(\"Year of study: \" + member.getYearOfStudy().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        major.setText(\"Major: \" + member.getMajor().toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        statistics.setText(\"Member Statistics\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int attendedCounter \u003d logic.getAttendedActivitiesCounter(member);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        attendedActivitiesCounter.setText(\"Number of Activities Attended By Member: \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + Integer.toString(attendedCounter));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        int memberParticipationRate \u003d logic.getParticipationRate(member);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String rateOfParticipation \u003d Integer.toString(memberParticipationRate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        rateOfParticipation \u003d rateOfParticipation.concat(\"%\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        participationRate.setText(\"Participation Rate:\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + \"(Number of activities completed by member\\n / total number of completed activities) \u003d \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + rateOfParticipation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        name.setText(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        matricNumber.setText(\"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        address.setText(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        gender.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        yearOfStudy.setText(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        major.setText(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        statistics.setText(\"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        attendedActivitiesCounter.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        participationRate.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDetailPanel detail \u003d (MemberDetailPanel) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return name.getText().equals(detail.name.getText())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 matricNumber.getText().equals(matricNumber);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"darkestblue\", \"darkblue\", \"blue\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \"lightblue\", \"lightestblue\", \"white\", \"black\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Label matricNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Label yearOfStudy;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Label major;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        matricNumber.setText(person.getMatricNumber().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        yearOfStudy.setText(\"Year \" + person.getYearOfStudy().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        major.setText(person.getMajor().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "joel0111": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonNotAttendingListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Panel containing the list of persons not in activity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class PersonNotAttendingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String FXML \u003d \"PersonNotAttendingListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private ListView\u003cPerson\u003e personNotAttending;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public PersonNotAttendingListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        personNotAttending.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        personNotAttending.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            double screenMaxX \u003d (primaryScreenBounds.getMaxX() \u003c 1000)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                    ? primaryScreenBounds.getMaxX() - 80 : 1000;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            double screenMaxY \u003d (primaryScreenBounds.getMaxY() \u003c 1000)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                    ? primaryScreenBounds.getMaxY() - 80 : 700;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            mainWindow.getPrimaryStage().setMinWidth(screenMaxX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            mainWindow.getPrimaryStage().setMinHeight(screenMaxY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            mainWindow.getPrimaryStage().setMaximized(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 12,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/exportutil/activityInfo.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003ctitle\u003e$title\u003c/title\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        * {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            box-sizing: border-box;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .row::after {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            content: \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            clear: both;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            display: table;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        [class*\u003d\"col-\"] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            float: left;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding: 15px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        html {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            font-family: \"Lucida Sans\", sans-serif;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .header {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            background-color: #aaaaaa;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            color: #ffffff;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding: 15px;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .row-small-padding {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 2px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 2px;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .left {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 2px;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 2px;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            text-align: center;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            font-weight: bold;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .right {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 2px;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 10px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            text-align: center;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        td {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            border: 1px solid #000000;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        th {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            background: #333333;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            color: #ffffff;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            font-weight: bolder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            border: 1px solid #000000;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 8px;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 12px;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        tr:nth-child(even) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            background: #ffffff;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        tr:nth-child(odd) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            background: #c0c0c0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        table {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            color: #000000;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            border-spacing: 0px;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            border: 1px solid #000000;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .listName {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            min-width: 230px;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-left: 30px;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-right: 30px;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 7px;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 7px;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .listMatric {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-left: 30px;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-right: 30px;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 7px;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 7px;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .listAttendBox {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-left:50px;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-right: 50px;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 7px;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 7px;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        /* For mobile phones: */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        [class*\u003d\"col-\"] {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            width: 100%;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .desc-area {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            border-bottom: 1px ridge #cdcdcd;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            margin-bottom: 20px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            /* For desktop: */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-1 {width: 8.33%;}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-2 {width: 16.66%;}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-3 {width: 25%;}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-4 {width: 33.33%;}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-5 {width: 41.66%;}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-6 {width: 50%;}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-7 {width: 58.33%;}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-8 {width: 66.66%;}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-9 {width: 75%;}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-10 {width: 83.33%;}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-11 {width: 91.66%;}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-12 {width: 100%;}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .left {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-top: 2px;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-bottom: 2px;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                text-align: left;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .right {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-top: 2px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-bottom: 2px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                text-align: left;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .desc-area {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                border-bottom: none;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                margin-bottom: auto;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003ch1\u003eDetails for $title\u003c/h1\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003chr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-6 row-small-padding desc-area\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cdiv class\u003d\"col-12 right\"\u003e\u003ch3\u003e$name\u003c/h3\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cdiv class\u003d\"col-12 left\"\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003ch4\u003e$description\u003c/h4\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-6 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-4 left\"\u003eEvent Name :\u003c/div\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-8 right\"\u003e$name\u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-4 left\"\u003eDate Time :\u003c/div\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-8 right\"\u003e$dateTime\u003c/div\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-4 left\"\u003eLocation :\u003c/div\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-8 right\"\u003e$location\u003c/div\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-4 left\"\u003eStatus :\u003c/div\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \u003cdiv class\u003d\"col-8 right\"\u003e$status\u003c/div\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003chr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\" style\u003d\"overflow-x: scroll;\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        $attendanceListHtml"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 179
    }
  },
  {
    "path": "src/main/resources/exportutil/personInfo.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003ctitle\u003e$title\u003c/title\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        * {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            box-sizing: border-box;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .row::after {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            content: \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            clear: both;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            display: table;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        [class*\u003d\"col-\"] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            float: left;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding: 15px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        html {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            font-family: \"Lucida Sans\", sans-serif;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .header {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            background-color: #aaaaaa;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            color: #ffffff;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding: 15px;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .row-small-padding {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 2px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 2px;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .left {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 2px;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 2px;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            text-align: center;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            font-weight: bold;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        .right {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-top: 2px;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            padding-bottom: 10px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            text-align: center;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        /* For mobile phones: */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        [class*\u003d\"col-\"] {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            width: 100%;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @media only screen and (min-width: 600px) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            /* For tablets: */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-1 {width: 8.33%;}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-2 {width: 16.66%;}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-3 {width: 25%;}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-4 {width: 33.33%;}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-5 {width: 41.66%;}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-6 {width: 50%;}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-7 {width: 58.33%;}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-8 {width: 66.66%;}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-9 {width: 75%;}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-10 {width: 83.33%;}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-11 {width: 91.66%;}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-s-12 {width: 100%;}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            /* For desktop: */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-1 {width: 8.33%;}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-2 {width: 16.66%;}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-3 {width: 25%;}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-4 {width: 33.33%;}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-5 {width: 41.66%;}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-6 {width: 50%;}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-7 {width: 58.33%;}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-8 {width: 66.66%;}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-9 {width: 75%;}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-10 {width: 83.33%;}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-11 {width: 91.66%;}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .col-12 {width: 100%;}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .left {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-top: 2px;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-bottom: 2px;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                text-align: left;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            .right {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-top: 2px;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                padding-bottom: 2px;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                text-align: left;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003ch1\u003eDetails for $title\u003c/h1\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003chr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003eName :\u003c/div\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-10 right\"\u003e$name\u003c/div\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003eMatric Number :\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-10 right\"\u003e$matricNumber\u003c/div\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003eGender :\u003c/div\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-4 right\"\u003e$gender\u003c/div\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003eYear of Study :\u003c/div\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-4 right\"\u003e$yearOfStudy\u003c/div\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003eMajor :\u003c/div\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-10 right\"\u003e$major\u003c/div\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003ePhone Number :\u003c/div\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-10 right\"\u003e$phone\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003eEmail :\u003c/div\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-10 right\"\u003e$email\u003c/div\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cdiv class\u003d\"col-12 row-small-padding\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-2 left\"\u003eAddress :\u003c/div\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cdiv class\u003d\"col-10 right\"\u003e$address\u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 142
    }
  },
  {
    "path": "src/main/resources/view/ActivitiesAttendedByMemberPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cVBox styleClass\u003d\"list-label-activity\"\u003e\u003cLabel style\u003d\"-fx-text-fill: WHITE;\"\u003eACTIVITIES ATTENDING\u003c/Label\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \u003cListView fx:id\u003d\"activitiesAttendedByMember\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "joel0111": 8
    }
  },
  {
    "path": "src/main/resources/view/ActivityDetailPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:id\u003d\"actDetParent\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003cText fx:id\u003d\"actName\" styleClass\u003d\"activity-details-title\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003cText fx:id\u003d\"actTime\" styleClass\u003d\"activity-details-text\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003cText fx:id\u003d\"actLocation\" styleClass\u003d\"activity-details-text\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003cText fx:id\u003d\"actDescription\" styleClass\u003d\"activity-details-text\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003cText fx:id\u003d\"actStatus\" styleClass\u003d\"activity-details-text\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003cText fx:id\u003d\"numAttending\" styleClass\u003d\"activity-details-text\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        \u003cText fx:id\u003d\"hasAttending\" styleClass\u003d\"activity-details-title list-label-member\" style\u003d\"-fx-font-size: 13px; -fx-fill: white;\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    \u003cListView fx:id\u003d\"attendingList\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 4,
      "ivyyangyq": 15
    }
  },
  {
    "path": "src/main/resources/view/ActivityListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cLabel fx:id\u003d\"alocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 35
    }
  },
  {
    "path": "src/main/resources/view/ActivityListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cVBox styleClass\u003d\"list-label-activity\"\u003e\u003cLabel style\u003d\"-fx-text-fill: WHITE;\"\u003eACTIVITY LIST\u003c/Label\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    \u003cListView fx:id\u003d\"activityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "ivyyangyq": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "#filterField, #personListPanel, #personWebpage, #activityListPanel {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "#tags #status {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joel0111"
        },
        "content": "#tags .darkestblue {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-background-color: #113F67;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "joel0111"
        },
        "content": "#tags .darkblue {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-background-color: #38598b;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joel0111"
        },
        "content": " #tags .blue {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-background-color: #113F67;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "joel0111"
        },
        "content": " #tags .lightblue {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-background-color: #87c0cd;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "joel0111"
        },
        "content": " #tags .lightestblue {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-background-color: #b7fbff;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "joel0111"
        },
        "content": " #tags .black {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "joel0111"
        },
        "content": " #tags .white {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    -fx-background-color: #f3f9fb;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "#status {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".topAnchorPaneContainer {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".labelMode {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-background-color: #111111;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-max-width: 150;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-min-width: 150;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-padding: 0 0 0 20;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".labelMode-Member {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-background-color: #00965E;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".labelMode-Activity {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-background-color: #418FDE;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".list-label-member {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-background-color: #00965E;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-padding: 5 5 5 12;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ".list-label-activity {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-background-color: #418FDE;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    -fx-padding: 5 5 5 12;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".activity-details-title {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-padding:10;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ".activity-details-text {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    -fx-padding:10;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "joel0111"
        },
        "content": ".member-details-title {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      -fx-font-size: 28px;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      -fx-font-style: italic;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      -fx-fill: white;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      -fx-padding:10;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "joel0111"
        },
        "content": " .member-details-text {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      -fx-font-size: 14px;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      -fx-fill: white;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      -fx-padding:10;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 31,
      "ivyyangyq": 25,
      "-": 350,
      "joel0111": 47
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "         title\u003d\"Club Manager\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "          \u003cAnchorPane styleClass\u003d\"topAnchorPaneContainer\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cLabel fx:id\u003d\"modeLabel\" text\u003d\"\" AnchorPane.rightAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"0\" AnchorPane.bottomAnchor\u003d\"0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                   styleClass\u003d\"labelMode\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "          \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"230\" maxWidth\u003d\"320\" prefWidth\u003d\"320\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            \u003cStackPane fx:id\u003d\"leftListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" minWidth\u003d\"300\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList2\" minWidth\u003d\"230\" maxWidth\u003d\"320\" prefWidth\u003d\"320\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            \u003cStackPane fx:id\u003d\"rightListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 12,
      "ivyyangyq": 7,
      "-": 62
    }
  },
  {
    "path": "src/main/resources/view/MemberDetailPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \u003cVBox alignment\u003d\"TOP_LEFT\" spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            \u003cInsets top\u003d\"1\" right\u003d\"16\" bottom\u003d\"16\" left\u003d\"16\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"name\" styleClass\u003d\"member-details-title\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"matricNumber\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"phone\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"email\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"address\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"gender\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"yearOfStudy\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"major\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"statistics\" styleClass\u003d\"member-details-title\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"attendedActivitiesCounter\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        \u003cText fx:id\u003d\"participationRate\" styleClass\u003d\"member-details-text\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "joel0111": 25
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      \u003cLabel fx:id\u003d\"matricNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matricNumber\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      \u003cLabel fx:id\u003d\"yearOfStudy\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$yearOfStudy\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "      \u003cLabel fx:id\u003d\"major\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$major\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "joel0111": 3
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "  \u003cVBox styleClass\u003d\"list-label-member\"\u003e\u003cLabel style\u003d\"-fx-text-fill: WHITE;\"\u003eMEMBER LIST\u003c/Label\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonNotAttendingListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    \u003cVBox styleClass\u003d\"list-label-member\"\u003e\u003cLabel style\u003d\"-fx-text-fill: WHITE;\"\u003eAVAILABLE MEMBERS TO ADD\u003c/Label\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    \u003cListView fx:id\u003d\"personNotAttending\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "ivyyangyq": 8
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\": \"A6565123B\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"male\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"year 1\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"computing\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"swimming\", \"running\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"male\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"year 1\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"computing\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"swimming\", \"running\" ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  \"activities\": []"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "-": 10,
      "joel0111": 11
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\": \"A1234569C\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"male\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"year 1\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"computing\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"swimming\", \"running\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  \"activities\": []"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "-": 6,
      "joel0111": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0123456J\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"4\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Business Analytics\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Running\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0123456J\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"4\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Business Analytics\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Running\" ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  \"activities\": []"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "-": 10,
      "joel0111": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\": \"A1542369X\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"Year 4\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Business Analytics\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"running\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  \"activities\": []"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "-": 6,
      "joel0111": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": "  \"comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0123123B\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"4\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Business Analytics\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Running\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0222222B\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"email\" : \"benson@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"2\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Information Systems\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Swimming\", \"Running\" ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0333333N\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"email\" : \"carl@example.com\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Computer Engineering\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Swimming\", \"Running\" ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0444444A\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"email\" : \"daniel@example.com\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"4\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Computer Science\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Hockey\" ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0555555R\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"phone\" : \"94822241\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"email\" : \"elle@example.com\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"1\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Life Science\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Hockey\" ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0777777U\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"phone\" : \"94812427\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"email\" : \"fiona@example.com\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"5\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Medicine\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Floorball\" ]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"matricNumber\" : \"A0888888H\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"phone\" : \"94182442\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"email\" : \"george@example.com\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"yearOfStudy\" : \"3\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"major\" : \"Biomedical Engineering\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    \"tagged\" : [ \"Hockey\" ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "  \"activities\" : []"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "-": 28,
      "joel0111": 45
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String MATRICNUMBER_FIELD_ID \u003d \"#matricNumber\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String YEAROFSTUDY_FIELD_ID \u003d \"#yearOfStudy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String MAJOR_FIELD_ID \u003d \"#major\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final Label matricNumberLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final Label yearOfStudyLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private final Label majorLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        matricNumberLabel \u003d getChildNode(MATRICNUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        yearOfStudyLabel \u003d getChildNode(YEAROFSTUDY_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        majorLabel \u003d getChildNode(MAJOR_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public String getMatricNumber() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return matricNumberLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public String getYearOfStudy() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return \"Year \" + yearOfStudyLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public String getMajor() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return majorLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 getMatricNumber().equals(person.getMatricNumber().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                //\u0026\u0026 getYearOfStudy().equals(\"Year \" + person.getYearOfStudy().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                \u0026\u0026 getMajor().equals(person.getMajor().value)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "joel0111": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAROFSTUDY_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberAddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String memberDeleteCommand \u003d \"memberDelete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandException(memberDeleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertHistoryCorrect(memberDeleteCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        String listCommand \u003d MemberListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandSuccess(listCommand, MemberListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String addCommand \u003d MemberAddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRICNUMBER_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GENDER_DESC_AMY + YEAROFSTUDY_DESC_AMY + MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (CommandException | InvalidCommandModeException | ParseException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (ParseException | InvalidCommandModeException | CommandException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 3,
      "melkwx": 4,
      "-": 178,
      "joel0111": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityAddCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityAddMemberCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalAddressBookWithActivities;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * {@code ActivityAddMemberCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityAddMemberCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithActivities(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity selectedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityAddMemberCommand activityAddMemberCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityAddMemberCommand(INDEX_FIRST_ACTIVITY, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                ActivityAddMemberCommand.MESSAGE_ACTIVITY_ADD_MEMBER_SUCCESS, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity copyActivity \u003d Activity.addMemberToActivity(selectedActivity, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.setActivity(selectedActivity, copyActivity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(activityAddMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityAddMemberCommand activityAddMemberCommand \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityAddMemberCommand(outOfBoundIndex, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(activityAddMemberCommand, model, commandHistory,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity selectedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityAddMemberCommand activityAddMemberCommand \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityAddMemberCommand(INDEX_FIRST_ACTIVITY, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                ActivityAddMemberCommand.MESSAGE_ACTIVITY_ADD_MEMBER_SUCCESS, 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity copyActivity \u003d Activity.addMemberToActivity(selectedActivity, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.setActivity(selectedActivity, copyActivity);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(activityAddMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getActivityList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityAddMemberCommand activityAddMemberCommand \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityAddMemberCommand(outOfBoundIndex, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(activityAddMemberCommand, model, commandHistory,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        MatricNumber matricNumber \u003d validPerson.getMatricNumber();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityAddMemberCommand activityAddToFirstCommand \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityAddMemberCommand(INDEX_FIRST_ACTIVITY, matricNumber);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityAddMemberCommand activityAddToSecondCommand \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityAddMemberCommand(INDEX_SECOND_ACTIVITY, matricNumber);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(activityAddToFirstCommand.equals(activityAddToFirstCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityAddMemberCommand activityAddToFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityAddMemberCommand(INDEX_FIRST_ACTIVITY, matricNumber);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(activityAddToFirstCommand.equals(activityAddToFirstCommandCopy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(activityAddToFirstCommand.equals(1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(activityAddToFirstCommand.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(activityAddToFirstCommand.equals(activityAddToSecondCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalAddressBookWithActivities;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ActivityDeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ActivityDeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithActivities(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ActivityDeleteCommand activityDeleteCommand \u003d new ActivityDeleteCommand(INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(ActivityDeleteCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(activityDeleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //@@author minernchan"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteCommand activityDeleteCommand \u003d new ActivityDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(activityDeleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ActivityDeleteCommand activityDeleteCommand \u003d new ActivityDeleteCommand(INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(ActivityDeleteCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoActivity(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(activityDeleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //@@author minernchan"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getActivityList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteCommand activityDeleteCommand \u003d new ActivityDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(activityDeleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteCommand activityDeleteCommand \u003d new ActivityDeleteCommand(INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // delete -\u003e first activity deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        activityDeleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered activity list to show all activities"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteCommand activityDeleteCommand \u003d new ActivityDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(activityDeleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * 1. Deletes an {@code Activity} from a filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted activity in the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the activity object regardless of indexing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameActivityDeleted() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ActivityDeleteCommand activityDeleteCommand \u003d new ActivityDeleteCommand(INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        showActivityAtIndex(model, INDEX_SECOND_ACTIVITY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second activity in unfiltered activity list / first activity in filtered activity list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        activityDeleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //@@author minernchan"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteCommand deleteFirstCommand \u003d new ActivityDeleteCommand(INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteCommand deleteSecondCommand \u003d new ActivityDeleteCommand(INDEX_SECOND_ACTIVITY);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteCommand deleteFirstCommandCopy \u003d new ActivityDeleteCommand(INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no activity."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private void showNoActivity(Model model) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.updateFilteredActivityList(p -\u003e false);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(model.getFilteredActivityList().isEmpty());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 100,
      "ivyyangyq": 5,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityDeleteMemberCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalAddressBookWithActivities;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * {@code ActivityDeleteMemberCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityDeleteMemberCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithActivities(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         model.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         Activity selectedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         Activity copyActivity \u003d Activity.addMemberToActivity(selectedActivity, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         expectedModel.setActivity(selectedActivity, copyActivity);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         ActivityDeleteMemberCommand activityDeleteMemberCommand \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         new ActivityDeleteMemberCommand(INDEX_FIRST_ACTIVITY, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         ActivityDeleteMemberCommand.MESSAGE_ACTIVITY_DELETE_MEMBER_SUCCESS, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         Activity deleteMemberActivity \u003d Activity.removeMemberFromActivity(copyActivity, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         expectedModel.setActivity(copyActivity, deleteMemberActivity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "         assertCommandSuccess(activityDeleteMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteMemberCommand activityDeleteMemberCommand \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityDeleteMemberCommand(outOfBoundIndex, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(activityDeleteMemberCommand, model, commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity selectedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity copyActivity \u003d Activity.addMemberToActivity(selectedActivity, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.setActivity(selectedActivity, copyActivity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteMemberCommand activityDeleteMemberCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityDeleteMemberCommand(INDEX_FIRST_ACTIVITY, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                ActivityDeleteMemberCommand.MESSAGE_ACTIVITY_DELETE_MEMBER_SUCCESS, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity deleteMemberActivity \u003d Activity.removeMemberFromActivity(copyActivity, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.setActivity(copyActivity, deleteMemberActivity);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(activityDeleteMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getActivityList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteMemberCommand activityDeleteMemberCommand \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityDeleteMemberCommand(outOfBoundIndex, validPerson.getMatricNumber());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(activityDeleteMemberCommand, model, commandHistory,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        MatricNumber matricNumber \u003d validPerson.getMatricNumber();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteMemberCommand activityDeleteFromFirstCommand \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityDeleteMemberCommand(INDEX_FIRST_ACTIVITY, matricNumber);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteMemberCommand activityDeleteFromSecondCommand \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityDeleteMemberCommand(INDEX_SECOND_ACTIVITY, matricNumber);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(activityDeleteFromFirstCommand.equals(activityDeleteFromFirstCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityDeleteMemberCommand activityDeleteFromFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityDeleteMemberCommand(INDEX_FIRST_ACTIVITY, matricNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(activityDeleteFromFirstCommand.equals(activityDeleteFromFirstCommandCopy));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(activityDeleteFromFirstCommand.equals(1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(activityDeleteFromFirstCommand.equals(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(activityDeleteFromFirstCommand.equals(activityDeleteFromSecondCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityEditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.A_DESC_HTML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.A_DESC_OUTING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DATETIME_HTML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_LOCATION_HTML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HTML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalAddressBookWithActivities;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * and unit tests for ActivityEditCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityEditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithActivities(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity editedActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand.EditActivityDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new EditActivityDescriptorBuilder(editedActivity).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(INDEX_FIRST_ACTIVITY, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String expectedMessage \u003d String.format(ActivityEditCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.setActivity(model.getFilteredActivityList().get(0), editedActivity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index indexLastActivity \u003d Index.fromOneBased(model.getFilteredActivityList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity lastActivity \u003d model.getFilteredActivityList().get(indexLastActivity.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityBuilder activityInList \u003d new ActivityBuilder(lastActivity);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity editedActivity \u003d activityInList.withActivityName(VALID_ACTIVITY_NAME_HTML)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityDateTime(VALID_ACTIVITY_DATETIME_HTML)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityLocation(VALID_ACTIVITY_LOCATION_HTML).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityName(VALID_ACTIVITY_NAME_HTML)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityDateTime(VALID_ACTIVITY_DATETIME_HTML)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityLocation(VALID_ACTIVITY_LOCATION_HTML).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(indexLastActivity, descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String expectedMessage \u003d String.format(ActivityEditCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.setActivity(lastActivity, editedActivity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(INDEX_FIRST_ACTIVITY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityEditCommand.EditActivityDescriptor());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity editedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String expectedMessage \u003d String.format(ActivityEditCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity activityInFilteredList \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity editedActivity \u003d new ActivityBuilder(activityInFilteredList)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityName(VALID_ACTIVITY_NAME_HTML).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(INDEX_FIRST_ACTIVITY,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new EditActivityDescriptorBuilder().withActivityName(VALID_ACTIVITY_NAME_HTML).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        String expectedMessage \u003d String.format(ActivityEditCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.setActivity(model.getFilteredActivityList().get(0), editedActivity);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_duplicateActivityUnfilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity firstActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand.EditActivityDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new EditActivityDescriptorBuilder(firstActivity).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(INDEX_SECOND_ACTIVITY, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, ActivityEditCommand.MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_duplicateActivityFilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // edit activity in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity activityInList \u003d model.getAddressBook().getActivityList().get(INDEX_SECOND_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(INDEX_FIRST_ACTIVITY,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new EditActivityDescriptorBuilder(activityInList).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, ActivityEditCommand.MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidActivityIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityName(VALID_ACTIVITY_NAME_HTML).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void execute_invalidActivityIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getActivityList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand editCommand \u003d new ActivityEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new EditActivityDescriptorBuilder().withActivityName(VALID_ACTIVITY_NAME_HTML).build());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        final ActivityEditCommand standardCommand \u003d new ActivityEditCommand(INDEX_FIRST_ACTIVITY, A_DESC_HTML);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand.EditActivityDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                new ActivityEditCommand.EditActivityDescriptor(A_DESC_HTML);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        ActivityEditCommand commandWithSameValues \u003d new ActivityEditCommand(INDEX_FIRST_ACTIVITY, copyDescriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(standardCommand.equals(new ActivityEditCommand(INDEX_SECOND_ACTIVITY, A_DESC_HTML)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertFalse(standardCommand.equals(new ActivityEditCommand(INDEX_FIRST_ACTIVITY, A_DESC_OUTING)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalAddressBookWithActivities;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ActivityListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBookWithActivities(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertCommandSuccess(new ActivityListCommand(), model, commandHistory, ActivityListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertCommandSuccess(new ActivityListCommand(), model, commandHistory, ActivityListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.logic.commands.ClearCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 5,
      "ivyyangyq": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        // different modeHasChanged value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                true, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 11,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICNUMBER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAROFSTUDY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidCommandModeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.ActivityNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_MATRICNUMBER_AMY \u003d \"A0123456J\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_MATRICNUMBER_BOB \u003d \"A0654321J\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_MATRICNUMBER_CINDY \u003d \"A0654323E\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"67891234\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"98765432\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"Female\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"Male\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_YEAROFSTUDY_AMY \u003d \"2\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_YEAROFSTUDY_BOB \u003d \"1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_MAJOR_AMY \u003d \"Engineering\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_MAJOR_BOB \u003d \"Science\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_TAG_RUNNING \u003d \"Running\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String VALID_TAG_SWIMMING \u003d \"Swimming\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MATRICNUMBER_DESC_AMY \u003d \" \" + PREFIX_MATRICNUMBER + VALID_MATRICNUMBER_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MATRICNUMBER_DESC_BOB \u003d \" \" + PREFIX_MATRICNUMBER + VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String MATRICNUMBER_DESC_CINDY \u003d \" \" + PREFIX_MATRICNUMBER + VALID_MATRICNUMBER_CINDY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MAJOR_DESC_AMY \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String MAJOR_DESC_BOB \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String YEAROFSTUDY_DESC_AMY \u003d \" \" + PREFIX_YEAROFSTUDY + VALID_YEAROFSTUDY_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String YEAROFSTUDY_DESC_BOB \u003d \" \" + PREFIX_YEAROFSTUDY + VALID_YEAROFSTUDY_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String TAG_DESC_SWIMMING \u003d \" \" + PREFIX_TAG + VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String TAG_DESC_RUNNING \u003d \" \" + PREFIX_TAG + VALID_TAG_RUNNING;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String INVALID_MATRICNUMBER_DESC \u003d \" \" + PREFIX_MATRICNUMBER + \"A1 D\"; // only one word allowed;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"mafema\"; // only male and female allowed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String INVALID_YEAROFSTUDY_DESC \u003d \" \" + PREFIX_YEAROFSTUDY + \"2 year\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String INVALID_MAJOR_DESC \u003d \" \" + PREFIX_MAJOR + \"2134\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final MemberEditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final MemberEditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_HTML \u003d \"HTML WorkShop\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_OUTING \u003d \"Sentosa Outing \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String VALID_ACTIVITY_DATETIME_HTML \u003d \"02/02/2019 1200\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String VALID_ACTIVITY_DATETIME_OUTING \u003d \"06/06/2019 1000\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String VALID_ACTIVITY_LOCATION_HTML \u003d \"Icube Auditorium\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String VALID_ACTIVITY_LOCATION_OUTING \u003d \"KR MRT\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String VALID_ACTIVITY_DESCRIPTION_OUTING \u003d \"Meet at KR MRT. Remember to apply sunblock\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String DEFAULT_ACTIVITY_DESCRIPTION \u003d \"More details to be added.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_HTML \u003d \" \" + PREFIX_ACTIVITYNAME + VALID_ACTIVITY_NAME_HTML;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_OUTING \u003d \" \" + PREFIX_ACTIVITYNAME + VALID_ACTIVITY_NAME_OUTING;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_DATETIME_DESC_HTML \u003d \" \" + PREFIX_DATETIME + VALID_ACTIVITY_DATETIME_HTML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_DATETIME_DESC_OUTING \u003d \" \" + PREFIX_DATETIME + VALID_ACTIVITY_DATETIME_OUTING;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_LOCATION_DESC_HTML \u003d \" \" + PREFIX_LOCATION + VALID_ACTIVITY_LOCATION_HTML;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_LOCATION_DESC_OUTING \u003d \" \" + PREFIX_LOCATION + VALID_ACTIVITY_LOCATION_OUTING;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_DESCRIPTION_DESC_HTML \u003d \" \" + PREFIX_ADESCRIPTION"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + DEFAULT_ACTIVITY_DESCRIPTION;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String ACTIVITY_DESCRIPTION_DESC_OUTING \u003d \" \" + PREFIX_ADESCRIPTION"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            + VALID_ACTIVITY_DESCRIPTION_OUTING;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String INVALID_ACTIVITY_NAME_DESC \u003d \" \" + PREFIX_ACTIVITYNAME + \"HTML@\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final String INVALID_ACTIVITY_DATETIME_DESC \u003d \" \" + PREFIX_DATETIME + \"20022019\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final ActivityEditCommand.EditActivityDescriptor A_DESC_HTML;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final ActivityEditCommand.EditActivityDescriptor A_DESC_OUTING;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withGender(VALID_GENDER_AMY).withYearOfStudy(VALID_YEAROFSTUDY_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withMajor(VALID_MAJOR_AMY).withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withYearOfStudy(VALID_YEAROFSTUDY_BOB).withMajor(VALID_MAJOR_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withTags(VALID_TAG_RUNNING, VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        A_DESC_HTML \u003d new EditActivityDescriptorBuilder().withActivityName(VALID_ACTIVITY_NAME_HTML)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityDateTime(VALID_ACTIVITY_DATETIME_HTML)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityLocation(VALID_ACTIVITY_LOCATION_HTML)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityDescription(DEFAULT_ACTIVITY_DESCRIPTION).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        A_DESC_OUTING \u003d new EditActivityDescriptorBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityName(VALID_ACTIVITY_NAME_OUTING)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityDateTime(VALID_ACTIVITY_DATETIME_OUTING)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityLocation(VALID_ACTIVITY_LOCATION_OUTING)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                .withActivityDescription(VALID_ACTIVITY_DESCRIPTION_OUTING).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (CommandException | InvalidCommandModeException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        } catch (CommandException | InvalidCommandModeException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //@@author minernchan"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the activity at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static void showActivityAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredActivityList().size());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity activity \u003d model.getFilteredActivityList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        final String[] splitName \u003d activity.getName().fullActivityName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.updateFilteredActivityList(new ActivityNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertEquals(1, model.getFilteredActivityList().size());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Deletes the first activity in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static void deleteFirstActivity(Model model) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        Activity firstActivity \u003d model.getFilteredActivityList().get(0);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.deleteActivity(firstActivity);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 38,
      "A0143487X-Kevin": 4,
      "ivyyangyq": 4,
      "melkwx": 25,
      "-": 141,
      "joel0111": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberAddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class MemberAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandSuccess(new MemberAddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                String.format(MemberAddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(new MemberAddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                MemberAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "melkwx": 5,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class MemberAddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        new MemberAddCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        MemberAddCommand addCommand \u003d new MemberAddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        thrown.expectMessage(MemberAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        MemberAddCommand addAliceCommand \u003d new MemberAddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        MemberAddCommand addBobCommand \u003d new MemberAddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        MemberAddCommand addAliceCommandCopy \u003d new MemberAddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public boolean addressBookModeIsActivity () {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public boolean addressBookModeIsMember () {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public void setAddressBookMode(AppMode.Modes mode) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public AppMode.Modes getAddressBookMode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public void resetLists() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public boolean hasMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public Person getPersonWithMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        public boolean hasActivityClashInLocation(Activity activity) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteActivity(Activity activity) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        public ReadOnlyProperty\u003cActivity\u003e selectedActivityProperty() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        public Activity getSelectedActivity() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        public void setSelectedActivity(Activity activity) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        public void updateActivityList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "minernchan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        public ObservableList\u003cPerson\u003e getAttendingOfSelectedActivity() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonNotInSelectedActivity() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public ObservableList\u003cActivity\u003e getActivitiesOfPerson() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public void sortAddressBook(String input) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public Person generateExportedPerson(Person person) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public Activity generateExportedActivity(Activity activity) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        public void removeMemberFromAllAttendance(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public int getParticipationRate(Person person) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        public int getAttendedActivitiesCounter(Person person) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 4,
      "A0143487X-Kevin": 38,
      "ivyyangyq": 33,
      "melkwx": 12,
      "-": 264,
      "joel0111": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * {@code MemberDeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberDeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand memberDeleteCommand \u003d new MemberDeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MemberDeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandSuccess(memberDeleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand memberDeleteCommand \u003d new MemberDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(memberDeleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand memberDeleteCommand \u003d new MemberDeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MemberDeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandSuccess(memberDeleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand memberDeleteCommand \u003d new MemberDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(memberDeleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand memberDeleteCommand \u003d new MemberDeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        memberDeleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand memberDeleteCommand \u003d new MemberDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(memberDeleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand memberDeleteCommand \u003d new MemberDeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        memberDeleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand deleteFirstCommand \u003d new MemberDeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand deleteSecondCommand \u003d new MemberDeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand deleteFirstCommandCopy \u003d new MemberDeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "-": 154,
      "joel0111": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberEditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * and unit tests for MemberEditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberEditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand editCommand \u003d new MemberEditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MemberEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand editCommand \u003d new MemberEditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MemberEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand editCommand \u003d new MemberEditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MemberEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand editCommand \u003d new MemberEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand editCommand \u003d new MemberEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand editCommand \u003d new MemberEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        final MemberEditCommand standardCommand \u003d new MemberEditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand commandWithSameValues \u003d new MemberEditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(standardCommand.equals(new MemberEditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(standardCommand.equals(new MemberEditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "-": 144,
      "joel0111": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberEditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_RUNNING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberEditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_RUNNING).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "joel0111": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberFindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.parser.FindCriteriaContainsKeywordPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.model.person.MatricNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code MemberFindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberFindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        FindCriteriaContainsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                new FindCriteriaContainsKeywordPredicate(Collections.singletonList(\"name first\").toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        FindCriteriaContainsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                new FindCriteriaContainsKeywordPredicate(Collections.singletonList(\"name second\").toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MemberFindCommand findFirstCommand \u003d new MemberFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MemberFindCommand findSecondCommand \u003d new MemberFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MemberFindCommand findFirstCommandCopy \u003d new MemberFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertFalse(findFirstCommand.toString().equals(findSecondCommand.toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        FindCriteriaContainsKeywordPredicate predicate \u003d preparePredicate(\"name \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MemberFindCommand command \u003d new MemberFindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (predicate.toString().equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            expectedModel.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(predicate"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                    .getFindKeywords())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        } else if (predicate.toString().equalsIgnoreCase(\"matricnum\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            expectedModel.updateFilteredPersonList(new MatricNumberContainsKeywordsPredicate(Arrays.asList(predicate"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                    .getFindKeywords())));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertEquals(Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        FindCriteriaContainsKeywordPredicate predicate \u003d preparePredicate(\"name Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MemberFindCommand command \u003d new MemberFindCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        if (predicate.toString().equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            expectedModel.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(predicate"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                    .getFindKeywords())));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        } else if (predicate.toString().equalsIgnoreCase(\"matricnum\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            expectedModel.updateFilteredPersonList(new MatricNumberContainsKeywordsPredicate(Arrays.asList(predicate"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                    .getFindKeywords())));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private FindCriteriaContainsKeywordPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return new FindCriteriaContainsKeywordPredicate(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 7,
      "melkwx": 33,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class MemberListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandSuccess(new MemberListCommand(), model, commandHistory, MemberListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandSuccess(new MemberListCommand(), model, commandHistory, MemberListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 2,
      "melkwx": 5,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberSelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code MemberSelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberSelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberSelectCommand selectFirstCommand \u003d new MemberSelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberSelectCommand selectSecondCommand \u003d new MemberSelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberSelectCommand selectFirstCommandCopy \u003d new MemberSelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Executes a {@code MemberSelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberSelectCommand selectCommand \u003d new MemberSelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MemberSelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Executes a {@code MemberSelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberSelectCommand selectCommand \u003d new MemberSelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 3,
      "-": 95,
      "joel0111": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MemberSortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberSortCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBookWithPerson(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void execute_list_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandSuccess(new MemberListCommand(), model, commandHistory, MemberListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandSuccess(new MemberListCommand(), model, commandHistory, MemberListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ModeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void execute_modeNoArgs_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String modeText \u003d model.getAddressBookMode().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(\"Mode %s\", modeText));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ModeCommand modeCommand \u003d new ModeCommand(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertCommandSuccess(modeCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void execute_modeMemberToActivity_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(\"Mode changed to %s\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \"ACTIVITY\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ModeCommand modeCommand \u003d new ModeCommand(AppMode.Modes.ACTIVITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertCommandSuccess(modeCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void execute_modeActivityToMember_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        model.setAddressBookMode(AppMode.Modes.ACTIVITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(\"Mode changed to %s\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                \"MEMBER\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ModeCommand modeCommand \u003d new ModeCommand(AppMode.Modes.MEMBER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertCommandSuccess(modeCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void execute_modeMemberToMember_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String modeText \u003d model.getAddressBookMode().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(\"Mode is already: %s\", modeText));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ModeCommand modeCommand \u003d new ModeCommand(AppMode.Modes.MEMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertCommandSuccess(modeCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void execute_modeActivityToActivity_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        model.setAddressBookMode(AppMode.Modes.ACTIVITY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String modeText \u003d model.getAddressBookMode().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(\"Mode is already: %s\", modeText));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        ModeCommand modeCommand \u003d new ModeCommand(AppMode.Modes.ACTIVITY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertCommandSuccess(modeCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/Activity/ActivityAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_DATETIME_DESC_HTML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_DATETIME_DESC_OUTING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_DESCRIPTION_DESC_HTML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_DESCRIPTION_DESC_OUTING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_LOCATION_DESC_HTML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_LOCATION_DESC_OUTING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_HTML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_OUTING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ACTIVITY_DATETIME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DATETIME_HTML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DATETIME_OUTING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DESCRIPTION_OUTING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_LOCATION_HTML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_LOCATION_OUTING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HTML;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_OUTING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.HTML;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityAddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityAddCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private ActivityAddCommandParser parser \u003d new ActivityAddCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity expectedActivity \u003d new ActivityBuilder(HTML).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ACTIVITY_NAME_DESC_HTML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + ACTIVITY_DATETIME_DESC_HTML + ACTIVITY_LOCATION_DESC_HTML + ACTIVITY_DESCRIPTION_DESC_HTML,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ActivityAddCommand(expectedActivity));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parse_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity expectedActivity \u003d new ActivityBuilder(HTML).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ACTIVITY_NAME_DESC_HTML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        + ACTIVITY_DATETIME_DESC_HTML + ACTIVITY_LOCATION_DESC_HTML,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new ActivityAddCommand(expectedActivity));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //missing activity_name prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseFailure(parser, VALID_ACTIVITY_NAME_HTML + ACTIVITY_DATETIME_DESC_HTML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + ACTIVITY_LOCATION_DESC_HTML, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //missing activity_date_time prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_OUTING + VALID_ACTIVITY_DATETIME_OUTING"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + VALID_ACTIVITY_LOCATION_OUTING + VALID_ACTIVITY_DESCRIPTION_OUTING, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //missing activity_location prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_OUTING + ACTIVITY_DATETIME_DESC_OUTING"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + VALID_ACTIVITY_LOCATION_OUTING + VALID_ACTIVITY_DESCRIPTION_OUTING, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //all prefixes missing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseFailure(parser, VALID_ACTIVITY_NAME_OUTING + VALID_ACTIVITY_DATETIME_HTML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + VALID_ACTIVITY_LOCATION_HTML + VALID_ACTIVITY_DESCRIPTION_OUTING, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parse_redundantFields_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                ActivityAddCommand.MESSAGE_DUPLICATED_PREFIXES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //duplicated name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_OUTING + ACTIVITY_NAME_DESC_HTML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + ACTIVITY_DATETIME_DESC_OUTING + ACTIVITY_LOCATION_DESC_OUTING + ACTIVITY_DESCRIPTION_DESC_HTML,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //invalid activityName"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseFailure(parser, INVALID_ACTIVITY_NAME_DESC + ACTIVITY_DATETIME_DESC_OUTING"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + ACTIVITY_LOCATION_DESC_OUTING + ACTIVITY_DESCRIPTION_DESC_OUTING, ActivityName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //invalid activity Datetime"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_HTML + INVALID_ACTIVITY_DATETIME_DESC"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                + ACTIVITY_LOCATION_DESC_HTML, ActivityDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/Activity/ActivityDeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ActivityDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the ActivityDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the ActivityDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ActivityDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    //@@author minernchan"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private ActivityDeleteCommandParser parser \u003d new ActivityDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ActivityDeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "                ActivityDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 14,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityDeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//import seedu.address.logic.commands.ActivityFilterCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityFindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivitySelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberAddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberFindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//import seedu.address.model.activity.ActivityDateTimeAfterPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.ActivityUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        MemberAddCommand command \u003d (MemberAddCommand) parser.parseCommand(PersonUtil.getMemberAddCommand(person));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertEquals(new MemberAddCommand(person), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberDeleteCommand command \u003d (MemberDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(new MemberDeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand command \u003d (MemberEditCommand) parser.parseCommand(MemberEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(new MemberEditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MemberFindCommand command \u003d (MemberFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                MemberFindCommand.COMMAND_WORD + \" name \" + keywords.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertEquals(new MemberFindCommand(new FindCriteriaContainsKeywordPredicate((\"name \" + keywords.toString()))),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseCommand_activityAdd() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity activity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityAddCommand command \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                (ActivityAddCommand) parser.parseCommand(ActivityUtil.getActivityAddCommand(activity));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(new ActivityAddCommand(activity), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseCommand_activityFind() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityFindCommand command \u003d (ActivityFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                ActivityFindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                        \" \")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        HashMap\u003cPrefix, List\u003cString\u003e\u003e predicate \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        predicate.put(PREFIX_ACTIVITYNAME, keywords);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(new ActivityFindCommand(new ActivityContainsKeywordsPredicate(predicate)), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseCommand_activityDelete() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDeleteCommand command \u003d (ActivityDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                ActivityDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ACTIVITY.getOneBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(new ActivityDeleteCommand(INDEX_FIRST_ACTIVITY), command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseCommand_activityList() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(parser.parseCommand(ActivityListCommand.COMMAND_WORD) instanceof ActivityListCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(parser.parseCommand(ActivityListCommand.COMMAND_WORD + \" 3\") instanceof ActivityListCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseCommand_activitySelect() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivitySelectCommand command \u003d (ActivitySelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                ActivitySelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ACTIVITY.getOneBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(new ActivitySelectCommand(INDEX_FIRST_ACTIVITY), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertTrue(parser.parseCommand(MemberListCommand.COMMAND_WORD) instanceof MemberListCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertTrue(parser.parseCommand(MemberListCommand.COMMAND_WORD + \" 3\") instanceof MemberListCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberSelectCommand command \u003d (MemberSelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberSelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(new MemberSelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 2,
      "ivyyangyq": 53,
      "melkwx": 9,
      "-": 120,
      "joel0111": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_RUNNING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SWIMMING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_RUNNING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAROFSTUDY_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAROFSTUDY_DESC_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAROFSTUDY_DESC_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberAddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class MemberAddCommandParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private MemberAddCommandParser parser \u003d new MemberAddCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_RUNNING).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + TAG_DESC_RUNNING,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new MemberAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_RUNNING, new MemberAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_RUNNING, new MemberAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_RUNNING, new MemberAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + MAJOR_DESC_BOB + TAG_DESC_RUNNING, new MemberAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_RUNNING, VALID_TAG_SWIMMING)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_SWIMMING + TAG_DESC_RUNNING, new MemberAddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + MATRICNUMBER_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + ADDRESS_DESC_AMY + GENDER_DESC_AMY + YEAROFSTUDY_DESC_AMY + MAJOR_DESC_AMY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                new MemberAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + VALID_ADDRESS_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_MATRICNUMBER_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + VALID_ADDRESS_BOB + VALID_GENDER_BOB + VALID_YEAROFSTUDY_BOB + VALID_MAJOR_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_SWIMMING + TAG_DESC_RUNNING, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_SWIMMING + TAG_DESC_RUNNING, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_SWIMMING + TAG_DESC_RUNNING, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + INVALID_ADDRESS_DESC + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_SWIMMING + TAG_DESC_RUNNING, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_RUNNING, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICNUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + INVALID_ADDRESS_DESC + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + TAG_DESC_SWIMMING + TAG_DESC_RUNNING,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 6,
      "-": 99,
      "joel0111": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberDeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * outside of the MemberDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": " * same path through the MemberDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private MemberDeleteCommandParser parser \u003d new MemberDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MemberDeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "joel0111": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberEditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_RUNNING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SWIMMING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_RUNNING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberEditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private MemberEditCommandParser parser \u003d new MemberEditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"1\", MemberEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_RUNNING + TAG_DESC_SWIMMING + TAG_EMPTY,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_RUNNING + TAG_EMPTY + TAG_DESC_SWIMMING,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_RUNNING + TAG_DESC_SWIMMING,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_SWIMMING"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_RUNNING;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withTags(VALID_TAG_SWIMMING, VALID_TAG_RUNNING).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_RUNNING;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_RUNNING).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_RUNNING + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_RUNNING"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_SWIMMING;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_RUNNING,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberEditCommand expectedCommand \u003d new MemberEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 176,
      "joel0111": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberExportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberExportCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private MemberExportCommandParser parser \u003d new MemberExportCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MemberExportCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                MemberExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 6,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberFilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberFilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberFilterCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private MemberFilterCommandParser parser \u003d new MemberFilterCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String[] input \u003d new String[2];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        input[0] \u003d \"yearofstudy\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        input[1] \u003d \"2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberFilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new MemberFilterCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, \"yearOfStudy 2\", expectedFilterCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"year 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"field economics\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"sex male\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberFindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberFindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberFindCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private MemberFindCommandParser parser \u003d new MemberFindCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                MemberFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melkwx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        MemberFindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                new MemberFindCommand(new FindCriteriaContainsKeywordPredicate((\"name Alice Bob\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseSuccess(parser, \"name Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertParseSuccess(parser, \"name \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 6,
      "ivyyangyq": 3,
      "melkwx": 1,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberSelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberSelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private MemberSelectCommandParser parser \u003d new MemberSelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MemberSelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberSelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "joel0111": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MemberSortCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberSortCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private MemberSortCommandParser parser \u003d new MemberSortCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberSortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        MemberSortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new MemberSortCommand(\"yearOfStudy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, \"yearOfStudy\", expectedSortCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedSortCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new MemberSortCommand(\"major\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, \"major\", expectedSortCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedSortCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new MemberSortCommand(\"name\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, \"name\", expectedSortCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedSortCommand \u003d new MemberSortCommand(\"gender\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertParseSuccess(parser, \"gender\", expectedSortCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ModeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * outside of the  ModeCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * same path through the  ModeCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class ModeCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    private ModeCommandParser parser \u003d new ModeCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void parse_memeber_returnsModeCommandMember() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertParseSuccess(parser, \"MEMBER\", new ModeCommand(AppMode.Modes.MEMBER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void parse_activity_returnsModeCommandActivity() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertParseSuccess(parser, \"ACTIVITY\", new ModeCommand(AppMode.Modes.ACTIVITY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void parse_null_returnsModeCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertParseSuccess(parser, \"\", new ModeCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "                 ModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "//import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String INVALID_ACTIVITYNAME \u003d \"L@Tex Workshop\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String INVALID_ACTIVITYDATETIME \u003d \"20.20.03 2030\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String VALID_PHONE \u003d \"61234567\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"Soccer\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"Running\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String VALID_ACTIVITY_NAME \u003d \"CSS Workshop\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final String VALID_ACTIVITY_DATETIME \u003d \"03/03/2019 2000\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseActivityName((String) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityName(INVALID_ACTIVITYNAME));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityName expectedName \u003d new ActivityName(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(VALID_ACTIVITY_NAME));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_ACTIVITY_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityName expectedName \u003d new ActivityName(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(nameWithWhitespace));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseActivityDateTime((String) null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityDateTime(INVALID_ACTIVITYDATETIME));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityDateTime_validValueWithoutWhitespace_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDateTime expectedDateTime \u003d new ActivityDateTime(VALID_ACTIVITY_DATETIME);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedDateTime, ParserUtil.parseActivityDateTime(VALID_ACTIVITY_DATETIME));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void parseActivityDateTime_validValueWithWhitespace_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String timeWithWhiteSpace \u003d WHITESPACE + VALID_ACTIVITY_DATETIME + WHITESPACE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDateTime expectedDateTime \u003d new ActivityDateTime(VALID_ACTIVITY_DATETIME);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedDateTime, ParserUtil.parseActivityDateTime(timeWithWhiteSpace));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 55,
      "-": 205,
      "joel0111": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SWIMMING)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SWIMMING)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return activities;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        public AppMode.Modes getCurrMode () {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 5,
      "ivyyangyq": 1,
      "-": 144,
      "joel0111": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityDateTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ActivityDateTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityDateTime t1 \u003d new ActivityDateTime(\"12/02/2018 1200\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityDateTime t2 \u003d new ActivityDateTime(\"12/02/2018 1300\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityDateTime t3 \u003d new ActivityDateTime(\"14/02/2018 1200\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityDateTime t4 \u003d new ActivityDateTime(\"12/03/2018 1200\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityDateTime t5 \u003d new ActivityDateTime(\"12/03/2020 1200\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ActivityDateTime(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String invalidDateTime \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ActivityDateTime(invalidDateTime));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isValidActivityDateTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //null datetime"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ActivityDateTime.isValidActivityDateTime(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //blank datetime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"\")); //empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"\")); //single space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //missing parts"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"21/12/2012\")); //missing time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"1230\")); //missing date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"21/12/20121230\")); //missing blank"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //invalid parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"xx/12/2012 1230\")); //date not in numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"21.12.2012 1230\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //date separation not using forward slash"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"21/12/2012 -130\")); //time not in numbers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"21/12/2012.1230\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //separation of date and time not using space"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"12/31/2012 1230\")); //date input invalid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"29/02/2018 1230\")); //invalid date input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"21/12/2012 2430\")); //hour input out of range"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDateTime.isValidActivityDateTime(\"21/12/2012 1260\")); //minute input out of range"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //valid date time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityDateTime.isValidActivityDateTime(\"29/02/2012 1230\")); //valid leap year date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityDateTime.isValidActivityDateTime(\"21/02/2012 0000\")); //valid 0am"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityDateTime.isValidActivityDateTime(\"21/12/2012 2359\")); //valid time 2359"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isPast() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(t1.isPast());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(t5.isPast());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(t1.isBefore(t3.calendarDateTime));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(t4.isAfter(t2.calendarDateTime));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //same time"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(0, t1.compareTo(t1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //before"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(-1, t1.compareTo(t2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(-1, t1.compareTo(t3));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(-1, t1.compareTo(t4));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //after"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(1, t2.compareTo(t1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(1, t3.compareTo(t1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(1, t4.compareTo(t1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 91,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityDescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityDescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ActivityDescription(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ActivityDescription(invalidDescription));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_valid_noInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDescription defaultDescription \u003d new ActivityDescription(\"More details to be added.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ActivityDescription emptyConstructor \u003d new ActivityDescription();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(defaultDescription, emptyConstructor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //null description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ActivityDescription.isValidDescription(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //empty string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDescription.isValidDescription(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //single blank space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityDescription.isValidDescription(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //valid description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String validDescription \u003d \"HTML workshop with guest speaker from Google.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityDescription.isValidDescription(validDescription));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityLocationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityLocationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ActivityLocation(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ActivityLocation(invalidLocation));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //null location"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ActivityLocation.isValidLocation(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityLocation.isValidLocation(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //single blank space"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityLocation.isValidLocation(\" \"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //valid location"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String validLocation \u003d \"Tutorial room @LT19\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityLocation.isValidLocation(validLocation));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ActivityNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ActivityName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        String invalidActivityName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ActivityName(invalidActivityName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isValidActivityName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // null activity name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ActivityName.isValidActivityName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityName.isValidActivityName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityName.isValidActivityName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityName.isValidActivityName(\"@\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(ActivityName.isValidActivityName(\"HTML@\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        //valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityName.isValidActivityName(\"club cohesion\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityName.isValidActivityName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityName.isValidActivityName(\"2nd general meeting\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(ActivityName.isValidActivityName(\"Club Cohesion\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 35,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityStatusTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityStatusTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityDateTime t1 \u003d new ActivityDateTime(\"23/03/2019 1200\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityDateTime t2 \u003d new ActivityDateTime(\"12/03/2020 1200\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityStatus s1 \u003d new ActivityStatus(t1.isPast());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private static final ActivityStatus s2 \u003d new ActivityStatus(t2.isPast());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isCompleted() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(s1.isCompleted());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(s2.isCompleted());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEFAULT_ACTIVITY_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DATETIME_HTML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_LOCATION_HTML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HTML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.AI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.HTML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ActivityTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void isSameActivity() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(AI.isSameActivity(AI));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.isSameActivity(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity editedAi \u003d new ActivityBuilder(AI).withActivityName(VALID_ACTIVITY_NAME_HTML).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.isSameActivity(editedAi));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different datetime -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        editedAi \u003d new ActivityBuilder(AI).withActivityDateTime(VALID_ACTIVITY_DATETIME_HTML).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.isSameActivity(editedAi));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // same name, datetime, different other attributes -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        editedAi \u003d new ActivityBuilder(AI).withActivityLocation(VALID_ACTIVITY_LOCATION_HTML)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                .withActivityDescription(DEFAULT_ACTIVITY_DESCRIPTION).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(AI.isSameActivity(editedAi));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity aiCopy \u003d new ActivityBuilder(AI).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(AI.equals(aiCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(AI.equals(AI));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.equals(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.equals(HTML));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity editedAi \u003d new ActivityBuilder(AI).withActivityName(VALID_ACTIVITY_NAME_HTML).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.equals(editedAi));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different datetime -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        editedAi \u003d new ActivityBuilder(AI).withActivityDateTime(VALID_ACTIVITY_DATETIME_HTML).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.equals(editedAi));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        editedAi \u003d new ActivityBuilder(AI).withActivityLocation(VALID_ACTIVITY_LOCATION_HTML).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.equals(editedAi));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        editedAi \u003d new ActivityBuilder(AI).withActivityDescription(DEFAULT_ACTIVITY_DESCRIPTION).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(AI.equals(editedAi));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 71,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/UniqueActivityListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEFAULT_ACTIVITY_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_LOCATION_HTML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.BEGINNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.ECOMMERCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class UniqueActivityListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void contains_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertFalse(uniqueActivityList.contains(BEGINNER));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(uniqueActivityList.contains(BEGINNER));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void contains_activityWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity editedBeginner \u003d new ActivityBuilder(BEGINNER).withActivityLocation(VALID_ACTIVITY_LOCATION_HTML)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                .withActivityDescription(DEFAULT_ACTIVITY_DESCRIPTION).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertTrue(uniqueActivityList.contains(editedBeginner));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void add_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void add_duplicateActivity_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(DuplicateActivityException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivity_nullTargetActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivity(null, BEGINNER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivity_nullEditedActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivity(BEGINNER, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivity_targetActivityNotInList_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(ActivityNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivity(BEGINNER, BEGINNER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivity_editedActivityIsSameActivity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivity(BEGINNER, BEGINNER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        expectedUniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivity_editedActivityHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        Activity editedBeginner \u003d new ActivityBuilder(BEGINNER).withActivityLocation(VALID_ACTIVITY_LOCATION_HTML)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "                .withActivityDescription(DEFAULT_ACTIVITY_DESCRIPTION).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivity(BEGINNER, editedBeginner);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        expectedUniqueActivityList.add(editedBeginner);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivity_editedActivityHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivity(BEGINNER, ECOMMERCE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        expectedUniqueActivityList.add(ECOMMERCE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivity_editedActivityHasNonUniqueIdentity_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(ECOMMERCE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(DuplicateActivityException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivity(BEGINNER, ECOMMERCE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void remove_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.remove(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void remove_activityDoesNotExist_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(ActivityNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.remove(BEGINNER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void remove_existingActivity_removesActivity() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.remove(BEGINNER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities_nullUniqueActivityList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivities((UniqueActivityList) null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities_uniqueActivityList_replacesOwnListWithProvidedUniqueActivityList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        expectedUniqueActivityList.add(ECOMMERCE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivities(expectedUniqueActivityList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivities((List\u003cActivity\u003e) null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.add(BEGINNER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cActivity\u003e activityList \u003d Collections.singletonList(ECOMMERCE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivities(activityList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        expectedUniqueActivityList.add(ECOMMERCE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void setActivities_listWithDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        List\u003cActivity\u003e listWithDuplicateActivities \u003d Arrays.asList(BEGINNER, BEGINNER);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(DuplicateActivityException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.setActivities(listWithDuplicateActivities);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        uniqueActivityList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String invalidGender \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // null Gender"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // invalid Gender"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Gender.isValidGender(\"male\")); // m is not uppercase"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Gender.isValidGender(\"female\")); // f is not uppercase"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Gender.isValidGender(\"12345678\")); // all digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // valid Gender"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Male\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MajorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MajorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Major(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_invalidMajor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String invalidMajor \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Major(invalidMajor));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void isValidMajor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // null Major"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Major.isValidMajor(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // invalid Major"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Major.isValidMajor(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Major.isValidMajor(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Major.isValidMajor(\"Economics1\")); // contains digit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(Major.isValidMajor(\"12345678\")); // all digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // valid Major"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertTrue(Major.isValidMajor(\"Economics\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatricNumberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MatricNumberTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MatricNumber(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_invalidMatricNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String invalidMatricNumber \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MatricNumber(invalidMatricNumber));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void isValidMatricNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // null MatricNumber"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MatricNumber.isValidMatricNumber(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // invalid MatricNumber"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"A01234567L\")); // more than 7 digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"B0123456J\")); // does not start with A"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"A0123456H\")); // invalid checksum"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"12345678\")); // all digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // valid MatricNumber"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertTrue(MatricNumber.isValidMatricNumber(\"A0123456J\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"61234578\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "joel0111": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "joel0111": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "joel0111": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SWIMMING)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SWIMMING)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 182,
      "joel0111": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/YearOfStudyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel0111"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class YearOfStudyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new YearOfStudy(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void constructor_invalidyearOfStudy_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String invalidYearOfStudy \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new YearOfStudy(invalidYearOfStudy));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void isValidYearOfStudy() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // null yearOfStudy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e YearOfStudy.isValidYearOfStudy(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // invalid yearOfStudy"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(YearOfStudy.isValidYearOfStudy(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(YearOfStudy.isValidYearOfStudy(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(YearOfStudy.isValidYearOfStudy(\"0\")); // less than 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(YearOfStudy.isValidYearOfStudy(\"year\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(YearOfStudy.isValidYearOfStudy(\"7\")); // more than 6"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertFalse(YearOfStudy.isValidYearOfStudy(\"y1\")); // alphanumeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        // valid yearOfStudy"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertTrue(YearOfStudy.isValidYearOfStudy(\"2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel0111": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String INVALID_MATRICNUMBER \u003d \"A0123456W @#$%\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"malefe\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String INVALID_YEAROFSTUDY \u003d \"1 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String INVALID_MAJOR \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#swim\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String VALID_MATRICNUMBER \u003d BENSON.getMatricNumber().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String VALID_YEAROFSTUDY \u003d BENSON.getYearOfStudy().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String VALID_MAJOR \u003d BENSON.getMajor().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                VALID_ADDRESS, VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                VALID_ADDRESS, VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, null,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                VALID_ADDRESS, VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                null, VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        INVALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                VALID_ADDRESS, null, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void toModelType_invalidYearOfStudy_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        VALID_GENDER, INVALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d YearOfStudy.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void toModelType_nullYearOfStudy_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                VALID_ADDRESS, VALID_GENDER, null, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, YearOfStudy.class.getSimpleName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void toModelType_invalidMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d MatricNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public void toModelType_nullMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                VALID_ADDRESS, VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, VALID_TAGS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatricNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICNUMBER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                VALID_ADDRESS, VALID_GENDER, VALID_YEAROFSTUDY, VALID_MAJOR, invalidTags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "joel0111": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// to be used when activity storage is updated."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBookWithPerson();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 4,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBookWithPerson();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1,
      "-": 51,
      "joel0111": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookWithPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "// need to be updated to typical address book after storage for activity is updated"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBookWithPerson();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 3,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ActivityBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.ActivityDescription;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.ActivityLocation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "//@@author minernchan"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * A utility class to help with building Activity objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class ActivityBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Laser Tag Outing\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"15/04/2019 1200\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Bukit Gombak\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"2 hour laser tag session at Bukit Gombak Home Team NS, $12/pax\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private ActivityName name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private ActivityDateTime dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private ActivityLocation location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private ActivityDescription description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        name \u003d new ActivityName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        dateTime \u003d new ActivityDateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        location \u003d new ActivityLocation(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        description \u003d new ActivityDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Initializes the ActivityBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityBuilder(Activity activityToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        name \u003d activityToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        dateTime \u003d activityToCopy.getDateTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        location \u003d activityToCopy.getLocation();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        description \u003d activityToCopy.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityName} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityBuilder withActivityName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.name \u003d new ActivityName(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityDateTime} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityBuilder withActivityDateTime(String dateTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.dateTime \u003d new ActivityDateTime(dateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityLocation} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityBuilder withActivityLocation(String location) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.location \u003d new ActivityLocation(location);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityDescription} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityBuilder withActivityDescription(String description) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.description \u003d new ActivityDescription(description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityDescription} of the {@code Activity} that we are building to the default value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityBuilder withActivityDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.description \u003d new ActivityDescription();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public Activity build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return new Activity(name, dateTime, location, description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 76,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ActivityUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYNAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.logic.commands.ActivityAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * A utility class for Activity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns an add command string for adding the {@code Activity}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static String getActivityAddCommand(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return ActivityAddCommand.COMMAND_WORD + \" \" + getActivityDetails(activity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns the part of command string for the given {@code activity}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static String getActivityDetails(Activity activity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        sb.append(PREFIX_ACTIVITYNAME + activity.getName().fullActivityName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        sb.append(PREFIX_DATETIME + activity.getDateTime().fullDateTime + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        sb.append(PREFIX_LOCATION + activity.getLocation().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        sb.append(PREFIX_ADESCRIPTION + activity.getDescription().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditActivityDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minernchan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.logic.commands.ActivityEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityLocation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.activity.ActivityName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minernchan"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minernchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minernchan"
        },
        "content": " * A utility class to help with building EditActivityDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minernchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minernchan"
        },
        "content": "public class EditActivityDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    private ActivityEditCommand.EditActivityDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor \u003d new ActivityEditCommand.EditActivityDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder(ActivityEditCommand.EditActivityDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        this.descriptor \u003d new ActivityEditCommand.EditActivityDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Returns an {@code EditActivityDescriptor} with fields containing {@code activity}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder(Activity activity) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor \u003d new ActivityEditCommand.EditActivityDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityName(activity.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityDateTime(activity.getDateTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityLocation(activity.getLocation());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityDescription(activity.getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setAttendance(activity.getAttendance());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityName} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder withActivityName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityName(new ActivityName(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityDateTime} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder withActivityDateTime(String dateTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityDateTime(new ActivityDateTime(dateTime));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityLocation} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder withActivityLocation(String location) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityLocation(new ActivityLocation(location));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code ActivityDescription} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder withActivityDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setActivityDescription(new ActivityDescription(description));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     * Sets the {@code Attendance} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minernchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public EditActivityDescriptorBuilder withAttendance(List\u003cMatricNumber\u003e attendance) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        descriptor.setAttendance(attendance);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minernchan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    public ActivityEditCommand.EditActivityDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minernchan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minernchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minernchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minernchan": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.setYearOfStudy(person.getYearOfStudy());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.setMajor(person.getMajor());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sets the {@code Major} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public EditPersonDescriptorBuilder withMajor(String major) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.setMajor(new Major(major));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sets the {@code MatricNumber} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public EditPersonDescriptorBuilder withYearOfStudy(String yearOfStudy) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.setYearOfStudy(new YearOfStudy(yearOfStudy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "joel0111": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"John Lim\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String DEFAULT_MATRICNUMBER \u003d \"A0132213B\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"82333291\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"john@gmail.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Male\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String DEFAULT_YEAROFSTUDY \u003d \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final String DEFAULT_MAJOR \u003d \"Statistics\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private YearOfStudy yearOfStudy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        matricNumber \u003d new MatricNumber(DEFAULT_MATRICNUMBER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        yearOfStudy \u003d new YearOfStudy(DEFAULT_YEAROFSTUDY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        major \u003d new Major(DEFAULT_MAJOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        matricNumber \u003d personToCopy.getMatricNumber();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        yearOfStudy \u003d personToCopy.getYearOfStudy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        major \u003d personToCopy.getMajor();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sets the {@code MatricNumber} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public PersonBuilder withMatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.matricNumber \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public PersonBuilder withYearOfStudy(String yearOfStudy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.yearOfStudy \u003d new YearOfStudy(yearOfStudy);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Sets the {@code Major} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public PersonBuilder withMajor(String major) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        this.major \u003d new Major(major);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        return new Person(name, matricNumber, phone, email, address, gender, yearOfStudy, major, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 89,
      "joel0111": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICNUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAROFSTUDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static String getMemberAddCommand(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        return MemberAddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        sb.append(PREFIX_MATRICNUMBER + person.getMatricNumber().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        sb.append(PREFIX_YEAROFSTUDY + person.getYearOfStudy().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        sb.append(PREFIX_MAJOR + person.getMajor().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.getYearOfStudy().ifPresent(yearOfStudy -\u003e sb.append(PREFIX_YEAROFSTUDY).append(yearOfStudy.value)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        descriptor.getMajor().ifPresent(major -\u003e sb.append(PREFIX_MAJOR).append(major.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 3,
      "-": 58,
      "joel0111": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalActivities.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DATETIME_HTML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DATETIME_OUTING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_DESCRIPTION_OUTING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_LOCATION_HTML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_LOCATION_OUTING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HTML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_OUTING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.AppMode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * A utility class containing a list of {@code Activity} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class TypicalActivities {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity AI \u003d new ActivityBuilder().withActivityName(\"AI Announcement\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"05/05/2019 1600\").withActivityLocation(\"LT 19\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(\"Guest speakers invited to share recent development\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity BEGINNER \u003d new ActivityBuilder().withActivityName(\"Beginner Briefing\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"06/05/2019 1200\").withActivityLocation(\"Biz Library\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(\"Briefing beginners about club details\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity COHESION \u003d new ActivityBuilder().withActivityName(\"Coffee Cohesion\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"07/05/2019 0905\").withActivityLocation(\"Starbucks Cafe\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(\"One venti coffee on the house.\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity DINNER \u003d new ActivityBuilder().withActivityName(\"Dinner and Dance\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"03/03/2018 1920\").withActivityLocation(\"Utown Dance Room\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(\"Spring dance for members.\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity ECOMMERCE \u003d new ActivityBuilder().withActivityName(\"Ecommerce Exploration\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"05/03/2018 1530\").withActivityLocation(\"SoC Hangout\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(\"How to build a leading Ecommerce platform like Taobao\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity FUN \u003d new ActivityBuilder().withActivityName(\"Fun Fact Factory\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"09/03/2018 1859\").withActivityLocation(\"Com1 Tutorial Room 0210\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(\"Share less known facts with friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity GETAWAY \u003d new ActivityBuilder().withActivityName(\"Gallery Getaway\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"08/05/2019 0820\").withActivityLocation(\"National Gallery\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity HAPPY \u003d new ActivityBuilder().withActivityName(\"Happy Hour\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(\"06/06/2018 2320\").withActivityLocation(\"Clarke Quay\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(\"Adults only\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    // Manually added - Activity\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity HTML \u003d new ActivityBuilder().withActivityName(VALID_ACTIVITY_NAME_HTML)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(VALID_ACTIVITY_DATETIME_HTML).withActivityLocation(VALID_ACTIVITY_LOCATION_HTML)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static final Activity OUTING \u003d new ActivityBuilder().withActivityName(VALID_ACTIVITY_NAME_OUTING)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDateTime(VALID_ACTIVITY_DATETIME_OUTING).withActivityLocation(VALID_ACTIVITY_LOCATION_OUTING)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            .withActivityDescription(VALID_ACTIVITY_DESCRIPTION_OUTING).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private TypicalActivities() {} // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical activities."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static AddressBook getTypicalAddressBookWithActivities() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        ab.setAppMode(AppMode.Modes.ACTIVITY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Activity activity : getTypicalActivities()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            ab.addActivity(activity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static List\u003cActivity\u003e getTypicalActivities() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AI, BEGINNER, COHESION, DINNER, ECOMMERCE, FUN));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalActivities;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " * A utility class containing a list of {@code Person} objects and a list of {@code Activity} to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    private TypicalAddressBook() {} // prevents instantiation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        for (Activity activity: getTypicalActivities()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "            ab.addActivity(activity);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICNUMBER_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_RUNNING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAROFSTUDY_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAROFSTUDY_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0123123B\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Female\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Business Analytics\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Running\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0222222B\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"benson@example.com\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Male\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"2\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Information Systems\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Swimming\", \"Running\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0333333N\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"carl@example.com\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Male\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"1\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Computer Engineering\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Swimming\", \"Running\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0444444A\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"daniel@example.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Male\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"4\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Computer Science\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Hockey\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0555555R\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"94822241\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"elle@example.com\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Female\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"1\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Life Science\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Hockey\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0777777U\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"94812427\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"fiona@example.com\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Female\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"5\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Medicine\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Floorball\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0888888H\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"94182442\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"george@example.com\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Male\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"3\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Biomedical Engineering\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Hockey\").build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0999999W\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"84824241\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"hoon@example.com\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"little india\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Female\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"1\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Economics\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Soccer\").build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(\"A0321654J\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withPhone(\"84821311\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withEmail(\"ida@example.com\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withGender(\"Female\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(\"4\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(\"Business\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(\"Basketball\").build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(VALID_MATRICNUMBER_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withYearOfStudy(VALID_YEAROFSTUDY_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMajor(VALID_MAJOR_AMY).withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withMatricNumber(VALID_MATRICNUMBER_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withYearOfStudy(VALID_YEAROFSTUDY_BOB).withMajor(VALID_MAJOR_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            .withTags(VALID_TAG_RUNNING, VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"name Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    public static AddressBook getTypicalAddressBookWithPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 2,
      "-": 49,
      "joel0111": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melkwx"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d MemberListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String thirdCommand \u003d \"memberList\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String thirdCommand \u003d \"memberList\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 2,
      "-": 155,
      "joel0111": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.model.person.YearOfStudy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person secondPerson \u003d TYPICAL_PERSONS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            Name name \u003d new Name(\"John\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            MatricNumber matricNumber \u003d new MatricNumber(\"A0111111M\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            Phone phone \u003d new Phone(\"61234567\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            Gender gender \u003d new Gender(\"Male\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            YearOfStudy yearOfStudy \u003d new YearOfStudy(\"1\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            Major major \u003d new Major((\"Computer Science\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            Person person \u003d new Person(name, matricNumber, phone, email, address, gender, yearOfStudy, major,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                    Collections.emptySet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "joel0111": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(expectedCard.getMatricNumber(), actualCard.getMatricNumber());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(expectedCard.getYearOfStudy(), actualCard.getYearOfStudy());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(expectedCard.getMajor(), actualCard.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(expectedPerson.getMatricNumber().value, actualCard.getMatricNumber());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(expectedPerson.getMajor().value, actualCard.getMajor());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        //assertEquals(expectedPerson.getYearOfStudy().toString(), actualCard.getYearOfStudy());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        //assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        switch (tagName.toLowerCase()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"running\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"darkblue\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"swimming\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"lightblue\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"hockey\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"soccer\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"white\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"basketball\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"darkblue\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"tennis\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"floorball\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"white\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"football\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"lightblue\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        case \"archery\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            return \"darkblue\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "joel0111": 63
    }
  },
  {
    "path": "src/test/java/systemtests/ActivityAddCommanSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "public class ActivityAddCommanSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 4
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberFindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        return TypicalPersons.getTypicalAddressBookWithPerson();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        executeCommand(MemberListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        executeCommand(MemberFindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        executeCommand(MemberSelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melkwx"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                    \"%20\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 3,
      "ivyyangyq": 1,
      "melkwx": 6,
      "-": 264,
      "joel0111": 2
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        //getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        //assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        executeCommand(MemberSelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        executeCommand(MemberDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 89,
      "joel0111": 6
    }
  },
  {
    "path": "src/test/java/systemtests/MemberAddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICNUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_RUNNING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SWIMMING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAROFSTUDY_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAROFSTUDY_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melkwx"
        },
        "content": "import seedu.address.logic.commands.MemberAddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melkwx"
        },
        "content": "public class MemberAddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String command \u003d \"   \" + MemberAddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + MATRICNUMBER_DESC_AMY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + PHONE_DESC_AMY + \"  \" + EMAIL_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_AMY + \"  \" + GENDER_DESC_AMY + YEAROFSTUDY_DESC_AMY + MAJOR_DESC_AMY"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_SWIMMING + \"  \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberAddCommand.COMMAND_WORD + TAG_DESC_RUNNING + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + TAG_DESC_SWIMMING + EMAIL_DESC_BOB + MATRICNUMBER_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d PersonUtil.getMemberAddCommand(HOON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, MemberAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d PersonUtil.getMemberAddCommand(toAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, MemberAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d PersonUtil.getMemberAddCommand(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, MemberAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d PersonUtil.getMemberAddCommand(toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, MemberAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d PersonUtil.getMemberAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, MemberAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberAddCommand.COMMAND_WORD + MATRICNUMBER_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_AMY + GENDER_DESC_AMY + YEAROFSTUDY_DESC_AMY + MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberAddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRICNUMBER_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_AMY + GENDER_DESC_AMY + YEAROFSTUDY_DESC_AMY + MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberAddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRICNUMBER_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + ADDRESS_DESC_AMY + GENDER_DESC_AMY + YEAROFSTUDY_DESC_AMY + MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberAddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRICNUMBER_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + EMAIL_DESC_AMY + GENDER_DESC_AMY + YEAROFSTUDY_DESC_AMY + MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * Executes the {@code MemberAddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        assertCommandSuccess(PersonUtil.getMemberAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * @see MemberAddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        String expectedResultMessage \u003d String.format(MemberAddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melkwx"
        },
        "content": "     * @see MemberAddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melkwx": 21,
      "-": 172,
      "joel0111": 25
    }
  },
  {
    "path": "src/test/java/systemtests/MemberDeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.MemberDeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberDeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel0111"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MemberDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String command \u003d \"     \" + MemberDeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + \"      \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberDeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberDeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberDeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberDeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberDeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberDeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberDeleteCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code MemberDeleteCommand} using {@code toDelete}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberDeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                expectedResultMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 178,
      "joel0111": 19
    }
  },
  {
    "path": "src/test/java/systemtests/MemberEditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_RUNNING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SWIMMING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SWIMMING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAROFSTUDY_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberEditCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberEditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String command \u003d \" \" + MemberEditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                 + PHONE_DESC_BOB + \"  \" + MAJOR_DESC_BOB + \"  \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB + MAJOR_DESC_BOB + TAG_DESC_SWIMMING"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withMatricNumber(\"A0123123B\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                .withTags(VALID_TAG_SWIMMING).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + GENDER_DESC_BOB + YEAROFSTUDY_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                + MAJOR_DESC_BOB + TAG_DESC_RUNNING + TAG_DESC_SWIMMING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivyyangyq"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melkwx"
        },
        "content": "                .withMatricNumber(\"A0222222B\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MemberEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MemberEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MemberEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MemberEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                        + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @see MemberEditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code MemberEditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @see MemberEditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(MemberEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joel0111"
        },
        "content": "     * @see MemberEditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivyyangyq": 1,
      "melkwx": 8,
      "-": 201,
      "joel0111": 37
    }
  },
  {
    "path": "src/test/java/systemtests/MemberFindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "import seedu.address.logic.commands.MemberFindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "public class MemberFindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        String command \u003d \"   \" + MemberFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        executeCommand(MemberDeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 1 person found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" name Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A0143487X-Kevin"
        },
        "content": "        command \u003d MemberFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melkwx"
        },
        "content": "        command \u003d \"MembERFiNd name Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A0143487X-Kevin": 6,
      "melkwx": 17,
      "-": 170,
      "joel0111": 2
    }
  },
  {
    "path": "src/test/java/systemtests/MemberSelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import static seedu.address.logic.commands.MemberSelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel0111"
        },
        "content": "import seedu.address.logic.commands.MemberSelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel0111"
        },
        "content": "public class MemberSelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        String command \u003d \"   \" + MemberSelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberSelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberSelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberSelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        command \u003d MemberSelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberSelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberSelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberSelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberSelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberSelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberSelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberSelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberSelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel0111"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberSelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel0111"
        },
        "content": "        assertCommandFailure(MemberSelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 136,
      "joel0111": 20
    }
  }
]
