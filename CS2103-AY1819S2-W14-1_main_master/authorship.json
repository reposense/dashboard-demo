[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d BrainTrain"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W14-1/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "https://ci.appveyor.com/project/eugenefdw/main[image:https://ci.appveyor.com/api/projects/status/vl6bo937loonr7x3?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W14-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W14-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/d236c7af6a71427ebeae2571add1f3f4[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/cs2103-w14-1/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S2-w14-1/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is a *spaced-repetition flashcard application* which makes *memorizing easy and effective*. With BrainTrain\u0027s link:https://www.theguardian.com/education/2016/jan/23/spaced-repetition-a-hack-to-make-your-brain-store-information[Spaced Repetition System (SRS)] optimizing your flashcard revision intervals, you will be able to *learn more in less time*."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Who is it for:*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- Anyone who needs to memorise anything (e.g. Japanese vocabulary, the periodic table, the human anatomy). BrainTrain\u0027s card system is *content-agnostic* and *flexible*. It accommodates all forms of learning you may require."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- Anyone who needs to create flashcards for educational purposes. BrainTrain\u0027s cards are grouped as lessons which can be *easily imported and exported*. These lessons are also saved in `.csv` files which you *can edit in your favourite spreadsheet application* (e.g. Excel)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Main features of BrainTrain:*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- You can manage flashcard lessons in BrainTrain\u0027s management mode or alternatively do so in your preferred spreadsheet application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- You can attempt flashcard lessons in BrainTrain\u0027s quiz mode which will track and manage your user-specific spaced-repetition data automatically."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*To start using BrainTrain:* +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Follow the instructions in the \u003c\u003cUserGuide#Quick-start, User guide: Quick start\u003e\u003e section."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Site map"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cUserGuide#, User guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer guide\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cAboutUs#, About us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cContactUs#, Contact us\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* BrainTrain is built upon the _AddressBook-Level4_ project created by the link:https://github.com/se-edu/[SE-EDU initiative]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Parts of this application were inspired by _Marco Jakob_\u0027s http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* BrainTrain icon is made by https://www.freepik.com/[Freepik] from https://www.flaticon.com/[Flaticon]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://opencsv.sourceforge.net/[OpenCSV]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 4,
      "halcyoneee": 2,
      "-": 20,
      "DigiPie": 19
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    compile \u0027com.opencsv:opencsv:4.5\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    archiveName \u003d \u0027braintrain.jar\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \u0027site-name\u0027: \u0027BrainTrain\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-W14-1/main\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 4,
      "-": 234,
      "DigiPie": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain was developed by https://cs2103-ay1819s2-w14-1.github.io/main/AboutUs.html[Team BrainTrain]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "We are a team based in the link:http://www.comp.nus.edu.sg[School of Computing], link:http://www.nus.edu.sg[National University of Singapore]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d Eugene Foo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::eugenefdw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty}[http://github.com/eugenefdw[github]] [\u003c\u003ceugenefdw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Responsibilities: Data storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Lee Tze Ting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::halcyoneee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty}[http://github.com/halcyoneee[github]] [\u003c\u003chalcyoneee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Responsibilities: Quiz mode and integration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d\u003d Jerald Tan"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "image::jeraldtsy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "{empty}[http://github.com/jeraldtsy[github]] [\u003c\u003cjeraldtsy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Responsibilities: User model and import and export files"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Evan Tay"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::digipie.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty}[http://www.evantay.com[homepage]] [http://github.com/DigiPie[github]] [\u003c\u003cdigipie#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Role: Documentation Lead +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Responsibilities: Card Management System and Project Documentation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Chang Lei"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "image::lallanachang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty}[https://github.com/lallanachang[github]] [\u003c\u003clallanachang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Responsibilities: Spaced-Repetition System (SRS)"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 4,
      "eugenefdw": 6,
      "halcyoneee": 4,
      "lallanachang": 3,
      "-": 31,
      "DigiPie": 8
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W14-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* *Email us* : You can also reach us at `eugenef@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d BrainTrain - Developer guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-1/main/tree/master"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "By: `Team BrainTrain`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d Introduction +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "This is the Developer Guide for BrainTrain. This assumes you\u0027re already familiar with the User Guide, and are interested in contributing to this project. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Other skills useful for contributing to BrainTrain are as follows: +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". Good Java knowledge"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". Familiarity with Object-Oriented Programming (OOP)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". Familiarity with Github"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". Experience with Command Line Interface based applications"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Whether you have any, none or all of the skills above, you will first need to set up a few things before being able to start work on the project."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d How does BrainTrain work +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This is a brief explanation of how BrainTrain works:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". You can attempt cards in quiz mode, these cards whereby a *question* is displayed to you, and you type in the *answer*."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". You can group multiple cards in a single package called a *lesson*. You can have multiple lessons."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". You can manage lessons in management mode or alternatively do so in your preferred spreadsheet application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Setting up +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Prerequisites +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Windows developers should use JDK `9`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Fork this repo"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Clone the fork to your computer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Open a console and run the command `gradlew processResources` (for Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Having both Travis and AppVeyor ensures your app works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Architecture diagram"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The *_architecture diagram_* given above illustrates the high-level design of the BrainTrain app. It shows the key components of the app, and how they interact with one another."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Brief overview of key components"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`] which is responsible for:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Initializing the components in the correct sequence and connecting them at app launch."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Shutting down the components and invoking necessary clean-up methods at app closure."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e is a collection of classes which provides useful utility methods used by multiple other components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** `LogsCenter` : Used by numerous classes to write log messages to the app\u0027s log file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Handles the user interface."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Handles the command executions."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cDesign-ManagementModel,*`ManagementModel`*\u003e\u003e: Handles the in-memory data of management mode."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cDesign-QuizModel,*`QuizModel`*\u003e\u003e: Handles the in-memory data of quiz mode."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads and writes data to the hard disk."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e, \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e, \u003c\u003cDesign-ManagementModel,*`ManagementModel`*\u003e\u003e, \u003c\u003cDesign-QuizModel,*`QuizModel`*\u003e\u003e and \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e components have the following structure:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Has an API in the form of an Java interface named after the component."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Has its functionality exposed through a Java class named `{Component Name}Manager`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "For example, the `Logic` component (refer to figure 2 below) has it\u0027s API defined in the `Logic.java` interface, and exposes its functionality through the `LogicManager.java` class."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Structure of the `Logic` component"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[componentInteractions]]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d How do the key components interact"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In this section, an example of how the key components interact when the user issues the command `deleteLesson 1` is shown."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Sequence diagram of the `deleteLesson 1` command"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::sd_delete_lesson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Sequence diagrams such as the one above will be provided throughout the developer guide when it is important to highlight how the key components interact. Subsequent sections provide more details on each key component."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Structure of the `UI` Component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `UI` consists of a `MainWindow` which is made up of the following parts: `CommandBox`, `ResultDisplay`,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "`MainPanel`, `LessonListPanel`, `QuizResultPanel`, etc. All these parts, including the `MainWindow`,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "inherit from the `UiPart` abstract class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `UI` component uses the *JavaFx* `UI` framework. The layouts for these `UI` parts are defined in corresponding `.fxml` files in the `src/main/resources/view` folder. For example, the layout for  link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in the link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* passes user input to the `Logic` component for command execution."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* listens for changes to `Logic` and updates if data is changed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Logic component +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Structure of the `Logic` component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".  `Logic` uses either `ManagementModeParser` or `QuizModeParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "..  If `ManagementModeParser` is used to parse the user command:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  This results in a `ManagementCommand` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  The command execution can affect the `ManagementModel` (e.g. adding a lesson)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "..  If `QuizModeParser` is used to parse the user command:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  This results in a `QuizCommand` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "...  The command execution can affect the `QuizModel` (e.g. answering a question)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "returned to the `UI`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".  In addition, the `CommandResult` object might also instruct the `UI` to perform certain actions,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " such as displaying the user guide to the user."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[logicInteractions]]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d How do the logic sub-components interact"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In this section, an example of how the `Logic` sub-components interact when the user issues the command `addCard t/Korea t/Seoul h/S` is shown."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".\u0027Sample-Capitals\u0027 lesson opened in card view"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::ui_add_card.png[width\u003d\"512\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Given the above example, the following sequence of interactions will occur within the `Logic` component."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Sequence diagram of the `addCard t/Korea t/Seoul h/S` command"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::sd_add_card.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[Design-ManagementModel]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d ManagementModel component +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Structure of the ManagementModel component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::ManagementModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/modelmanager/ManagementModel.java[`ManagementModel.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `ManagementModel`,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* stores a `LessonList` object which represents a list of `Lesson` objects."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* stores a `UserPref` object which represents the user\u0027s preferences."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* stores the in-memory user SRS data in `User`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* does not depend on any other components."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[Design-QuizModel]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d QuizModel component +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Structure of the QuizModel Component"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::QuizModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/modelmanager/QuizModel.java[`QuizModel.java`]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The `QuizModel`,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* stores a `Quiz` object that represents a list of `QuizCard`."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* stores a `Session` object that represents a list of `SrsCard`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* stores a `ManagementModelManager` object that represents the `ManagementModel` component."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* depends on only the `ManagementModel` component."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Storage component +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* saves lesson data in `.csv` format and read it back."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* saves user preferences in `.json` format and read it back."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* saves the user\u0027s SRS data in `.csv` format and read it back."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Implementation +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// tag::datastorage[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d User storage feature +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The user storage features implements the following functions:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* Parsing user data into the correct format for file saving"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* Parsing file into the correct format for user data"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "NOTE: These functions are automatically performed on opening/closing the application. File I/O is handled in the `CSVUtil` class."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d User format +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ".Data flow diagram for user import and export"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "image::CsvUserStorage.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The user is parsed by `CsvUserStorage`, which is converted between User and List\u003cString[]\u003e format. List\u003cString[]\u003e format is the primary format handled by `CsvUtil` for reading and writing to `.csv` files."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "A few noteworthy mentions of the main components saved into a `.csv` file for UserStorage are listed below."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Hashcode +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "This is the question hashcode. Every question will have a unique hashcode for identification."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d SRSDueDate +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "This is the srsDueDate generated for that question. Questions with a nearer due-date will be generated first in the quiz."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Difficult +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "These are questions that are labelled difficult by the user. Users are able to specifically practise questions that they have labelled difficult in session."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d\u003d\u003d Sequence diagram for user storage"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Below is a sequence diagram of how a file is parsed into BrainTrain"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ".Sequence diagram of how a file is imported when BrainTrain application starts"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "image::CsvUserStorageSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Code snippet +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "The following code snippet shows how the user data is obtained:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "----"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "private Optional\u003cCardSrsData\u003e parseStringIntoCard(String[] cardArray) throws"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            NumberFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        for (int i \u003d 0; i \u003c cardArray.length - 1; i++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            if (cardArray[i].isEmpty()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                logger.warning(\"There are empty values in the file\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            hashCode \u003d Integer.parseInt(cardArray[0]);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            numOfAttempts \u003d Integer.parseInt(cardArray[1]);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            streak \u003d Integer.parseInt(cardArray[2]);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            srs \u003d Instant.parse(cardArray[3]);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            isDifficult \u003d cardArray[4].equals(\"true\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            if (hashCode \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                logger.warning(\"Hashcode cannot be 0 in \" + filePath.toString());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Values are not correct in \" + filePath.toString());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        card \u003d new CardSrsData(hashCode, numOfAttempts, streak, srs, isDifficult);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return Optional.of(card);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "----"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* ** Alternative 1 (Current choice):** Automate importing/exporting when session is open/close"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Pros: Lesser commands to manage."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Cons: Opening and closing may take up a lot of time if file is very big."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* **Alternative 2:** Individual commands for user to toggle with to import and export files when desired"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Pros: More control given to user"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Cons: Accidental overwriting of files may occur. Furthermore, if users are not able to parse in values correctly, the file will not be saved. This is troublesome for users who are not tech-savvy."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// end::datastorage[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// tag::csvstorage[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[lessonStorageFeature]]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Lesson storage feature"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The lesson CSV storage feature implements the following functions:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* Parsing lesson data into a list of string arrays, which is a format OpenCSV accepts for saving to CSV."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Parsing a list of string arrays back into lesson data, as retrieved from OpenCSV."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Actual file I/O is handled in the CsvUtil class, which uses the OpenCSV library to read/write `.csv` files."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Csv lesson format +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".High-level sequence diagram for the `reload` command, an example of lesson loading"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::CsvLessonStorageSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Lessons are parsed by CsvLessonListStorage, being converted between Lesson and List\u003cString[]\u003e formats. The List\u003cString[]\u003e format is the primary format handled by CsvUtil for reading and writing to `.csv` files."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "For lessons, there are three main sections when saved to a `.csv` file."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Name +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "A lesson\u0027s name in BrainTrain is equivalent to its file name. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "A lesson named \"French\" would be saved as \"French.csv\", and vice-versa."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Header +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The header is represented in the file as the first two lines. Each line represents a specific set of data, as outlined below."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The first line represents the type of the corresponding column. Each column can have three types:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". *Tested* +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This marks the column as a core value. By default, the first two instances of *Tested* in the file will be tested in quiz mode. All remaining Tested values are treated as *Not Tested*."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". *Not Tested* +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This marks the column as a core value. However, unlike *Tested*, they will not be tested in quiz mode. You can use the `set` command to change this."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". *Hint* +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This marks the column as a hint value. *Hint* values will appear when the user enters the `\\hint` command in quiz mode. Values here are optional and can be left empty."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "NOTE: Core values require every value in that column to be non-empty. This guarantees that the user will be tested on something, should they change which fields are tested."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "This is a code snippet from the parsing of the header data."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "for (int i \u003d 0; i \u003c headerArray.length; i++) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    if (headerArray[i].isEmpty()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        headerArray[i] \u003d \" \";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "int coreCount \u003d 0;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "int index \u003d 0;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "while (index \u003c headerArray.length) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    String headerChar \u003d headerArray[index].toLowerCase().substring(0, 1);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    if (headerChar.equals(HEADER_CORE_QA)) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (questionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            questionIndex \u003d index;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } else if (answerIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            answerIndex \u003d index;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        coreCount++;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    } else if (headerChar.equals(HEADER_CORE_NOT_QA)) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        coreCount++;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    } else if (!headerChar.equals(HEADER_OPTIONAL)) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return returnValues;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    index++;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "As seen at the beginning of the while loop, header values are actually treated as single case-insensitive characters. This means an experienced user may simply enter those letters as a shortcut. +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The second line represents the name of each column as shown to the user. Any names left blank are automatically replaced with Unnamed. +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Any discrepancies in the number of types and the number of names will result in the lesson not being loaded. +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Card data +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "All remaining data is treated as card data. Any invalid data found in memory or from the file is skipped over. +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Summary +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".Activity diagram for the `reload` command, highlighting failure conditions"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::ReloadActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "As shown in the above diagram, data that is read in from a file goes through various checks before it is loaded into the application. Any invalid data is skipped over, with an entry in the logs explaining the cause of failure."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: choice of file type +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Alternative 1 (current choice):** Save as `.csv`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Pros: User is able to modify lesson data in a more advanced external spreadsheet tool like Excel"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Cons: Lack of data verification within the file, JSON is already implemented in original code"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* **Alternative 2:** Save as JSON"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Pros: All values can be verified through the file"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Cons: Difficult for user to edit manually"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Alternative 1 was chosen as ease of use is a high priority for the project. Most computer users are familiar with the Microsoft Office suite of applications, such as Word and Excel. As Excel allows `.csv` files to be shown in a spreadsheet, it was intended that users use Excel alongside BrainTrain for easy lesson management."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: handling of invalid data +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* **Alternative 1 (current choice):** Skip over specific lesson/card"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Pros: User data is not automatically overwritten"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Cons: User has to manually fix any issues with their data"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* **Alternative 2:** Automatically fix data"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Pros: Ease of use for user"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Cons: Automatic fix may not be as desired by user"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Alternative 1 was chosen as creators are expected to have some skill in data editing. Normal users would ideally only download lessons from a creator, and would not be familiar enough with the lesson data to fix any issues."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// end::csvstorage[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::evan-mgt[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[mgtOverview]]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Management feature +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Management feature provides users with the ability to add, edit and delete lessons in *Lesson View* and *Card View* modes."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Lesson View +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In *Lesson View*, users can:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson` - Adds a lesson to the list of lessons loaded in-memory."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `deleteLesson` - Deletes a lesson from the list of lessons loaded in-memory."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `edit` - Opens a lesson in *Card View* for editing"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `listLessons` - Lists all cards with full details"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Card View +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In *Card View*, users can:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addCard` - Adds a card to the lesson opened in *Card View*."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `deleteCard` - Deletes a card from the lesson opened in *Card View*."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `set` - Sets the 2 test values to be tested in quiz mode for all cards in the lesson"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `listCards` - Lists all cards with full details"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `quit` - Quits *Card View* and returns to *Lesson View*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the subsequent sub-sections, I will discuss the 3 major model classes used to manage lessons and flashcards, `Card.java`, `Lesson.java`, and `LessonList.java`. These classes are also used by the \u003c\u003clessonStorageFeature, Lesson Storage Feature\u003e\u003e and \u003c\u003csessionFeature, Session Feature\u003e\u003e."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[cardClass]]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Card class +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "An instance of link:{repoURL}/src/main/java/seedu/address/model/card/Card.java[`Card.java`] represents a flashcard which contains 2 or more test values and 0 or more hint values. It takes in a list of test values, and optionally a list of hint values."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The following code shows how the card is generated:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Test and hint values are referred to as core and optional values internally. These terms are interchangeable."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  *"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * @param optionals {@link #optionals} a {@code Card} can have."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  */"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " public Card(List\u003cString\u003e cores, List\u003cString\u003e optionals) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     requireAllNonNull(cores, optionals);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.cores.addAll(cores);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.optionals.addAll(optionals);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  *"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " public Card(List\u003cString\u003e cores) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     // Generates a Card without optionals."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "These 2 constructors are called by the `Lesson.java` which generates a list of cards."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Lesson class +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "An instance of link:{repoURL}/src/main/java/seedu/address/model/lesson/Lesson.java[`Lesson.java`] represents a lesson which contains multiple flashcards of the same type and topic. This lesson can be loaded into quiz mode for testing."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The following code shows how cards are generated by the lesson:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Adds a {@link Card} object to the lesson."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@code fields} are separated into two separate sub-lists of cores and optionals based on"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@link #coreHeaders}\u0027s {@code size()}."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * @param fields the {@link Card}\u0027s cores and optionals in this order"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public void addCard(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    requireAllNonNull(fields);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    if (fields.size() \u003d\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addCard(new Card(fields));"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e cores \u003d fields.subList(0, coreHeaders.size());"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int optionalStart \u003d coreHeaders.size();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int optionalEnd \u003d fields.size();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e optionals \u003d fields.subList(optionalStart, optionalEnd);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addCard(new Card(cores, optionals));"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Adds {@link Card} objects to the lesson."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * @param cards a list of {@link Card} objects to be added to the lesson"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public void addCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    for (Card card: cards) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addCard(card);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `addCards(List\u003cCard\u003e cards)` method is called by the `LessonList.java` which generates a list of lessons."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d LessonList class +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "An instance of link:{repoURL}/src/main/java/seedu/address/model/lesson/LessonList.java[`LessonList.java`] represents a list of lessons. It has helper functions to assist with the management of lessons."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The following code shows how the `Main`, `Storage`, `Logic`, and `ManagementModel` key components use the `LessonList.java` class."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Usage by the `Main` and `Storage` key components +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "When the `Main` component loads upon app launch, it triggers the `Storage` component which loads lessons from the hard disk into memory by calling the `LessonList()` constructor, the `addLesson(Lesson lesson)` and other methods."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Creates a new {@link LessonList} which is used to store a list of {@link Lesson} objects."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public LessonList() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Adds a {@link Lesson} object to {@link #lessons}."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * @param lesson {@link Lesson} to be added to {@link #lessons}"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    requireNonNull(lesson);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    lessons.add(lesson);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Usage by the `Logic` and `ManagementModel` key components +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "When the `Logic` component parses an `addCard` command, it triggers the `ManagementModel` component to use the `addCardToOpenedLesson(Card card)` to add a card to the lesson opened for editing in *Card View*."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Adds a {@link Card} to the {@link #openedLesson}."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * @param card {@link Card} to be added to the {@link #openedLesson}"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public void addCardToOpenedLesson(Card card) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    requireAllNonNull(openedLesson, card);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    openedLesson.addCard(card);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[addCard]]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Add card command: `addCard` +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `addCard` command adds a card to the lesson which is being edited in *Card View*. +"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Given a lesson on country capitals which has 2 test values, \u0027Country\u0027 and \u0027Capital\u0027, and 1 hint value, \u0027Hint\u0027."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* If a user wants to add a flashcard to this lesson, he would enter `addCard t/Korea t/Seoul h/S`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "How it will look like to the user after entering the command:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Expected result after the card is added"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::ui_add_card_after.png[width\u003d\"512\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Given the above example, the following sequence of interactions will occur within the `Logic` component."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Sequence diagram of the `addCard t/Korea t/Seoul h/S` command"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::sd_add_card.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[mgtConsiderations]]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Design consideration +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: contextual management commands +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Alternative 1 (current choice):** Only lesson-related commands are allowed in *Lesson View* sub-management mode, and only card-related commands are allowed in *Card View* sub-management mode."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Pros: The user need not specify which lesson he is adding or deleting cards from. It is clear which lesson is currently being edited."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Con: Tedious to implement given that it requries significant refactoring of the base code provided."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Alternative 2:** A single management mode where all lesson and card-related commands can be executed."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Pro: This is significantly easier to implement give that no major refactoring is requred."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Con: This compromises the user experience."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "**Alternative 1** was chosen because it will vastly improve the user experience. For example, if a user were to need to add multiple cards to a specific lesson, alternative 2 would require the user to enter the lesson\u0027s index or name for each `addCard` command (e.g. `addCard n/Sample-Capitals t/Korea t/Seoul` where \u0027Sample-Capitals\u0027 is the lesson\u0027s name). +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "On the other hand, alternative 1 only requires the user to open the lesson for editing in *Card View* once, before calling the `addCard` commands. These `addCard` commands will not require the user to specify which lesson to add the cards to. +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Hence by choosing alternative 1, the user experience was vastly improved given that the user interface is easier to use."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::evan-mgt[]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "// tag::session[]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[sessionFeature]]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Session feature +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Session feature generates cards for users in quiz session based on their requirement."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Session feature implements the following functions and commands:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Combining data from lesson and user storage together."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* SrsCardManager:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Generating a list of cards for quiz based on different modes and SRS (Space-Repetition technique) method."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Updating user data after quiz ends."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* `start` - An input with lesson index, count of cards and mode parameters."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d SRS method +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "The SRS method allows users to be tested with the most urgent questions. The method gives each card a `srsDueDate` field which contains"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "an instant value representing the deadline of testing this card again."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* The SRS method updates users profile using link:https://en.wikipedia.org/wiki/Leitner_system[Leitner_system]."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** There are several levels in the Leitner_system. The lower the level is, the more urgent the card is. When the user answers correctly, the level of that card will increase by one. Otherwise it will decrease by one."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** User data will be updated based on their performance in quiz session. Generally speaking, if the user answer correctly, the `srsDueDate` of the current card will be carry-forwarded."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ".Explanation diagram for Leitner-System"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "image::Leitner-system.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d SrsCardManager +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "The `SrsCardManager` generates needed list of `QuizCard` when the user wants to start a quiz. This class includes four methods for four different modes correspondingly as shown below."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Difficult mode: `previewDifficult()`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Preview mode: `preview()`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Learn mode: `learn()`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Review mode: `sort()`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "The following activity diagram summarizes what happens when the user executes a new `StartCommand`."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Activity diagram for session generation"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "image::SrsCardManagerGenerateActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "link:https://en.wikipedia.org/wiki/Spaced_repetition[Space-Repetition technique] is only applied in review mode."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "The `SrsCardManager` also updates user data using `UpdateCardData()` after receiving results from `Quiz`."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d  Management start command: `start` +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `start` command starts a quiz session based on input parameters. It will analyze the current storage information and then generate the list of `QuizCard` using `SrsCardManager`. It will test the 2 values set to be tested for the lesson. The generating rules are different for different `QuizMode` as explained in a subsequent section. Once the `start` command have succeeded running, the system will switch to the quiz mode."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "The `start` command needs users to specify `LessonIndex`, `CardCount` and `QuizMode` parameter."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "The following sequence diagram shows the interaction between the various classes when the user starts a sample quiz:"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ".Sequence diagram for start feature"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "image::QuizStartCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Design consideration"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: SRS method for updating +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* **Alternative 1: Leinter System (current choice)**"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Pros: Efficient in calculation and easy to understand."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Cons: The time interval between levels cannot be long."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* **Alternative 2: Pimsleur\u0027s graduated-interval recall**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Pros: Short time interval between the first few repetitions."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Cons: No level attribute to group the element clearly."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Alternative 1 was chosen because it clearly displays the due date in several levels. Developers can also understand it easily since the actions for updating is simple. Besides, the system does not require the testing interval of the same card to be very small."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: data storage to support the SRS system +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* **Alternative 1: The system saves the due time into several levels and stores in a hashmap with card\u0027s hashcode (current choice)**"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Pros: It is easier to update the user progress using Leinter System since the levels are already stored."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Cons: The system needs to generate the range of due time for each level by default and the range may be unreasonable."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* **Alternative 2: The system saves the due time and hashcode of cards directly in a 2D array**"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Pros: It is clearer to see the match between card and its due time with same hashcode."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Cons: It is more difficult to set the updated due time for each single card."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Alternative 1 was chosen because the quiz only passes back information of total attempts and total number of correct answers. It is hard to generate an algorithm to update due time for each single card with only these quiz information. Thus, grouping cards as different levels and updating due time under different levels can solve this problem more efficiently."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: review mode +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* **Alternative 1: Starts test directly (current choice)**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Pros: Users can focus on the tests directly."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Cons: No time for them to have a quick reminder."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* **Alternative 2: Starts with previewing questions and answers**"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Pros: Users can recall the cards before testing."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Cons: The difficulty level becomes lower."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Alternative 1 was chosen because users are supposed to enter the test directly when they are reviewing cards. They can then judge their memorizing results in a most accurate level."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//end::session[]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Quiz feature +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Quiz feature allows users to enter quiz related commands and answer."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The quiz feature processes the following inputs:"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* `[ANSWER]...` - An input without a prefix `\\` is treated as an answer."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `\\difficult` - Labels current question as difficult or not."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `\\help` - Lists all quiz commands and inputs which will be accepted."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `\\hint` - Reveals additional information to help the user to answer the question."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `\\quit` - Quits quiz mode and saves attempt progress."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `\\status` - Lists current quiz progress."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Quiz class +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/model/quiz/Quiz.java[`Quiz.java`] holds all the in-memory"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "quiz data. It takes in a list of \u003c\u003ccard,cards\u003e\u003e from `Session`. Then, it generates an expanded list of cards based on the `mode` indicated by the user. The generated list of cards in both"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "`review` and `learn` mode includes cards which questions and answers are flipped. This to ensure that users are"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "memorizing both question and answer values. According to the mode which the user has chosen, the cards will be"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "displayed differently as seen below."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "In the four different modes:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Preview**: both the question and answer are shown to the user."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Question displayed in `preview` mode."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/quiz-preview.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* **Review**: only the question is shown as the user needs to answer the question."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Question displayed in `review` mode."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/quiz-review.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Learn**: is a combination of preview and review, the user sees both the question and"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "answer as in `preview` mode, before attempting the question with the answer hidden as in `review` mode."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Question displayed in `learn` mode."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/quiz-learn.PNG[width\u003d\"670\"]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Difficult**: similar to preview mode but only contains questions which have been labelled as"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "difficult."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The following code shows how the cards are generated:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "----"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "private List\u003cQuizCard\u003e generate() {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    generatedQuizCardList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    switch (mode) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    case PREVIEW:"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatePreview();"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    case LEARN:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // Learn is a combination of preview + review"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatePreview();"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generateReview();"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    case REVIEW:"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generateReview();"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    case DIFFICULT:"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatePreview();"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    generatedCardSize \u003d generatedQuizCardList.size();"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    return generatedQuizCardList;"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "private void generateReview() {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizCard currentCard;"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    for (int i \u003d 0; i \u003c originalQuizCardList.size(); i++) {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        currentCard \u003d originalQuizCardList.get(i);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatedQuizCardList.add("
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard.generateOrderedQuizCardWithIndex(i, QuizMode.REVIEW));"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    for (int i \u003d 0; i \u003c originalQuizCardList.size(); i++) {"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        currentCard \u003d originalQuizCardList.get(i);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatedQuizCardList.add("
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard.generateFlippedQuizCardWithIndex(i));"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "private void generatePreview() {"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizCard currentCard;"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    for (int i \u003d 0; i \u003c originalQuizCardList.size(); i++) {"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        currentCard \u003d originalQuizCardList.get(i);"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatedQuizCardList.add("
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard.generateOrderedQuizCardWithIndex(i, QuizMode.PREVIEW));"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "----"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d  Quiz answer command: `[ANSWER]` +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".High-level sequence diagram for the `ANSWER` command, an example of completing a quiz."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::AnwerComponetSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The `[ANSWER]` feature is facilitated by `QuizAnswerCommand`. The command takes in user input"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "as answer, which will be processed later when the command is executed."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The following sequence diagram shows the interaction between the various classes when the user"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "answered the question correctly:"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Sequence diagram for answer feature"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::QuizAnswerCommandSequenceDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the `execute` method of the `QuizAnswerCommand`, the following steps can be performed:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "1. Quiz result +"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This step checks if the user is shown the result, this is performed because the quiz can only end after"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "the result has been shown. Once the quiz ends, BrainTrain will save the progress of the quiz"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "to the file specified by the user."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "2. Handling of answer +"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "This step checks if the answer should be handled, if user is in `PREVIEW` mode it will not be"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "handled. Otherwise, the total attempts and streak of the question will be updated depending on whether the question has been answered correctly."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "3. Handling of next question +"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This step verifies that the question has been answered correctly, and checks if there are still questions"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "left for the current quiz. Depending on the check, it will then displays the next question or the quiz result."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The following code shows how the steps could be performed:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "----"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    requireNonNull(model);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    this.quizModel \u003d requireQuizModel(model);"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    this.card \u003d quizModel.getCurrentQuizCard();"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    this.isCurrentCardWrong \u003d false;"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    if (quizModel.isResultDisplay()) {"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        endQuiz();"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(\"\", true, false, false);"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    if (card.isWrongTwice() || card.getQuizMode() !\u003d QuizMode.PREVIEW) {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(handleCurrentCardAnswer());"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    if (!isCurrentCardWrong) {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String result \u003d handleIfCardLeft();"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(result);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    return new CommandResult(sb.toString(), true, false, false);"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "----"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d  Quiz quit command: `\\quit` +"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `\\quit` will force quit the current quiz and save the attempted questions to the location which"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "the user has specified in `UserPref`. By default it will be saved to `\\userdata\\savedata.csv`. Once"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "the `\\quit` command is completed, the user will be returned to the management mode."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Sequence diagram for quit feature"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::QuizQuitCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d  Quiz status command: `\\status` +"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `\\status` feature lists the total number of attempts you have made, total number of"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "question you have gotten correct, and which question you are currently on."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Sequence diagram for status feature"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::QuizStatusCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: quiz and management commands execution +"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* **Alternative 1 (current choice):** Run quiz in a different mode"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Pro: Least restricted choice of answer and great user experience."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Con: Tedious to implement."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* **Alternative 2:** Run quiz together with the rest of the commands"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Pro: Easy to implement."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Con: Restricted answer and compromised user experience. Answer cannot start with words already"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "reserved for management commands."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "(e.g. `start`)"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "**Alternative 1** is chosen because it allows the user to have a more flexible choice of"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "word. For certain questions, it is possible for the answer to be \"start\". Hence by choosing alternative 1, the choice of answer will not be restricted. Also, by running the quiz in a different mode, it allows the user to have intuitive"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "interaction in quiz mode."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Logging +"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the app"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Configuration +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Documentation +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "We used AsciiDoc for writing documentation."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "We chose AsciiDoc over Markdown because AsciiDoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Editing documentation +"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Publishing documentation +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format +"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://AsciiDoctor.org/docs/user-manual/#attributes[AsciiDoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Per-file documentation settings +"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Site template +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Running tests +"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Types of tests +"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. _System Tests_ that test the entire app by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing +"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Dev ops"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Build automation +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Continuous integration +"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Coverage reporting +"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Documentation previews +"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "When a pull request has changes to AsciiDoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those AsciiDoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Making a release +"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Managing dependencies +"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Product scope +"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* student who is trying to remember something content heavy for a given subject"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* would like a flashcard system that introduces/tests them on words/ideas"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* prefers command line interface for simplicity"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* able to keep track of the progress of all \u003c\u003clesson,lessons\u003e\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Possible users*:"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* User / Student: Someone who\u0027s trying to memorise content"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* Creator / Educator: Someone who generates the lists of content so that other users (i.e Student) can use it directly without having to do the data entry"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Value proposition*: Flashcard integrated with \u003c\u003csrs,SRS\u003e\u003e that assists in memorization"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d User stories +"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|Priority |As a ... |I want to ... |So that..."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|`* * *` |new user |see usage instructions |I can refer to instructions when I forget how to use the app"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|`* * *` |user |load/import lessons |I can use the app without needing to make my own lists first"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |Creator |export lessons |I can share my lessons easily in a multiple files"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |be tested more often on poorly memorized questions |I can automatically focus on them"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |save my current progress |I do not lose progress between sessions"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |export my current progress |I can keep my progress between different devices"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |reset my progress |I can start anew"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |see my current progress |I know which questions I frequently get it right or wrong"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |be give multiple chances to answer |I am given some leeway for mistyping"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |start a lesson |I can start to memorise"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |see a hint if I am not sure about the answer |I can have a deeper impression"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |exit a quit any time |I can save my progress and continue next time."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |view correct answer and explanation if I answered wrongly |I can understand and"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "remember it better"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |view the cards from the lesson at a glance|I can manage the lesson\u0027s cards easily"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |user |view all the lessons at a glance|I can easily manage the lessons easily"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* * *` |Creator |change the testable values|I can choose which values to tested."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |add tags to the lessons |I can search based on the tags"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |start multiple lessons |I can see all the question at once"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |limit how many questions I’m given at one go |I can have shorter/longer sessions"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |store/favourite hard content |I can review them more frequently"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |have my own profile |Others can use the program on the same device"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |use any language |I can use it for languages other than English"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |have a graded test based on my current progress |I can see clearly how well I obtain the knowledge"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |view lessons created by others |I can import them into my own library without creating my own"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |change the frequency of re-testing |I can test everything on my own basis"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`* *` |user |switch question and answer |I can associate the answer and question the other way."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |change the number of possible answers |I can vary the difficulty level"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |have images as prompts |I have more varied test options"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |set the plan (like 15 words a day) |I can make sure that I\u0027m on track"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |user |autocomplete the lessons name |I can find a lesson quickly"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |Creator |import from other file formats into lessons |I can use my own pre-existing lists with the application"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|`*` |Creator |notify users if there is any change of the app |I can help users stay updated with new methods"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Use cases +"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Use case: import a lesson +"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". User downloads file from a source (e.g Internet, other users)."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". User moves the file to the lessons folder."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". User restarts App."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". App loads the file as a lesson."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". App shows loaded lessons in the UI."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* 3a. User inputs invalid file."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** 3a1. App continues loading other lessons."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Use case: test poorly memorised questions +"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "1. User requests to revise poorly/wrongly answered questions"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "2. App requests for the pool of questions based on the user’s profile"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "3. App displays questions for User to answer."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "4. User to input his answer."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "5. App displays the correct answer."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Steps 3-5 are repeated until there are no more questions left to be tested."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* 3a. App detects no questions to be tested now."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a1. App prompts User to continue testing all questions."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** 3a2. User enter yes."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Use case: start a review quiz +"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "1. User finds specified lesson."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "2. User starts quiz by lesson name."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "3. App displays questions for User to answer."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "4. User to input his answer."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "5. App displays the correct answer."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Steps 3-5 are repeated until there are no more questions left to be tested."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* 3a. App detects no questions to be reviewed now."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** 3a1. App prompts User no questions to be reviewed now."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Non-functional requirements +"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".  Should be able to hold up to 1000 cards in multiple lessons without a noticeable sluggishness in"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "performance for typical usage."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".  Should be able to load 1000 cards within 7 seconds."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".  Product is not required to handle mass data editing (i.e no spreadsheet editing functionality)"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".  User data (both lessons and SRS data) should be easily portable"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Glossary +"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[card]] Card::"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "A card contains 2 or more `TEST` values and 0 or more `HINT` values. When a card is tested in"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "quiz mode, 2 of its `TEST` values will be tested as a question-answer pair. `HINT` values will be"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "shown when the `\\hint` command is entered."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[lesson]] Lesson::"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "A lesson contains \u003c\u003ccard,cards\u003e\u003e of the same type and topic. It has 2 or more `TEST` values and 0"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " or more `HINT` values. Cards added to this lesson must have corresponding `TEST` values, but need"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " not have matching `HINT` values. By default, the first 2 `TEST` values of cards in this lesson will"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " be tested when the lesson is started in quiz mode. You can change this by using the `set` command."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[session]] Session::"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "User’s current learning progress"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[srs]] Spaced Repetition System (SRS)::"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The technique of gradually delaying or accelerating the testing of content based on the user’s success."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Instructions for manual testing +"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown +"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Changing theme +"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Changing from light theme to dark theme."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". `changeTheme` +"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Exit and start `BrainTrain` again. +"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Expected: The theme have changed to dark theme and persist beyond restart."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Adding a lesson +"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `addLesson n/Capitals of the world t/Country t/Capital t/Language h/Hint` +"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The lesson is added and appears on the user interface. +"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Exit the BrainTrain app, and launch it again. +"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The lesson \u0027Capitals of the world\u0027 is loaded on app launch."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `addLesson t/Country t/Capital t/Language h/Hint` +"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No lesson is added because name is missing. Error details are shown to the user."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `addLesson n/Capitals t/Country h/Language h/Hint` +"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No lesson is added because there is only 1 test value. Error details are shown to the user."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Deleting a lesson +"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Prerequisite: There is at least 1 lesson loaded in-memory."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `deleteLesson 1` +"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The first lesson is deleted and no longer appears on the user interface. +"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Exit the BrainTrain app, and launch it again. +"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The lesson is permanently gone and does not re-appear on app restart."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `deleteLesson 0` +"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No lesson is deleted because of invalid index. Error details are shown to the user."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Other incorrect `deleteLesson` commands to try: `deleteLesson`, `deleteLesson x` where x is larger than the number of lessons loaded in-memory"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Editing a lesson +"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Prerequisite: There is at least 1 lesson loaded in-memory."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `edit 1` +"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The first lesson is opened in Card View for editing. +"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `edit 0` +"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No lesson is opened for editing because of invalid index. Error details are shown to the user."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Other incorrect `edit` commands to try: `edit`, `edit x` where x is larger than the number of lessons loaded in-memory."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Setting a lesson\u0027s test pair +"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Prerequisite steps:"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `addLesson n/Capitals of the world t/Country t/Capital t/Language h/Hint` to create a lesson"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `edit x` where x is the number of the lesson added"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `addCard t/Australia t/Canberra t/English h/Starts with C` to add a card"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `addCard t/Korea t/Seoul t/Korean` to add another card"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `set 1 3` +"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The user interface indicates that \u0027Country\u0027 and \u0027Language\u0027 are the 2 test values to be tested."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `set 3 2` +"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The user interface indicates that \u0027Language\u0027 and \u0027Capital\u0027 are the 2 test values to be tested."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `set 0 2` +"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No setting is done because of invalid index. Error details are shown to the user."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `set 1 5` +"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No setting is done because the lesson only has 3 test values, and there is no test value at index 5. Error details are shown to the user."
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Other incorrect `set` commands to try: `set`, `set x y` where x or y is larger than the number of test values the lesson has."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Adding a card +"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Adding a card."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Prerequisite steps:"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `addLesson n/Capitals of the world t/Country t/Capital t/Language h/Hint` to create a lesson"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `edit x` where x is the number of the lesson added"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `addCard t/Australia t/Canberra t/English h/Starts with C` +"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The card is added and appears on the user interface. +"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `addCard t/Korea t/Seoul t/Korean` +"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The card is added and appears on the user interface. +"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `addCard t/English h/Starts with C` +"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No card is added because there is only 1 test value and all cards require at least 2 test values. Error details are shown to the user."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `addCard t/Australia t/Canberra h/Starts with C` +"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No card is added because there is only 2 test value but the lesson requires 3. Error details are shown to the user."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Deleting a card +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deleting a card."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Prerequisite steps:"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `addLesson n/Capitals of the world t/Country t/Capital t/Language h/Hint` to create a lesson"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `edit x` where x is the number of the lesson added"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `addCard t/Australia t/Canberra t/English h/Starts with C` to add a card"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".. Enter `addCard t/Korea t/Seoul t/Korean` to add another card"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (successful): `deleteCard 1` +"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: The first card is deleted and no longer appears on the user interface. +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `deleteCard 0` +"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No card is deleted because of invalid index. Error details are shown to the user."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Test case (unsuccessful): `deleteCard 100` +"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Expected: No card is deleted because of invalid index. Error details are shown to the user."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Other incorrect `deleteCard` commands to try: `deleteCard`, `deleteCard x` where x is larger than the number of cards in the opened lesson."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//tag::session[]"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Starting a new quiz +"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Below are some test cases you can perform to test the `StartCommand` for the Management feature."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ". Prerequisite: The system is in the management mode and there is no opened lesson currently."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ". Test case:"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ".. `start 1 m/preview` +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "   Expected: The system and GUI change to `Quiz mode`. Starting new quiz. Current lesson is the first lesson in the list. Besides, only one card will be previewed in the quiz."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ".. `start 3 c/1 m/learn` +"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "   Expected: The system and GUI change to `Quiz mode`. Starting new quiz. Current lesson is the third lesson in the list. Besides, only one card will be learnt in the quiz."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//end::session[]"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Answering a question in a quiz +"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Below are some test cases you can perform to test the `QuizAnswerCommand` for the Quiz feature. +"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Answering questions in `learn` mode"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. Prerequisite: A quiz have already started. +"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "   Start a quiz, for example `start 1 c/1 m/learn` +"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Replace lesson name with a lesson of your choice. +"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Answer the question according to the question from the specified lesson."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. Test case:  +"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... kbd:[enter] or anything without the prefix `\\` followed by kbd:[enter] +"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Shown the question for answering. +"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... `brussels` +"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Answered the question correct. Total correct question updated."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... `belgiu` +"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Answered the question wrongly once. Total correct question updated."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... `belgiuu` +"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Answered the question wrongly twice and shown the correct answer. Total correct"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    question updated."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Answering questions in `review` mode"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. Prerequisite: A quiz have already started. +"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "   Start a quiz, for example `start 1 c/1 m/review` +"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Replace lesson name with a lesson of your choice. +"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Answer the question according to the question from the specified lesson."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... `brussels` +"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Answered the question correct. Total correct question updated."
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... `belgiu` +"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Answered the question wrongly once. Total correct question updated."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... `belgiuu` +"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Answered the question wrongly twice and shown the correct answer. Total correct"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    question updated."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Answering questions in `preview` mode"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. Prerequisite: A quiz have already started. +"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "   Start a quiz, for example `start 1 c/1 m/preview` +"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Replace lesson name with a lesson of your choice. +"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Answer the question according to the question from the specified lesson."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "... kbd:[enter] or anything without the prefix `\\` followed by kbd:[enter] +"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Shown the next question for previewing. +"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Labelling a question as difficult in a quiz +"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Below is a test case you can perform to test the `QuizDifficultCommand` for the Quiz feature. +"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Prerequisite: A quiz have already started. +"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "   Start a quiz, for example `start 1 c/1 m/learn` +"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Replace the lesson name with a lesson of your choice. +"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Test case:  +"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. `\\difficult` +"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Card labelled as difficult. +"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".. `\\difficult` +"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    Expected: Card labelled as not difficult. +"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Viewing hint in a quiz +"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Below is a test case you can perform to test the `QuizHintCommand` for the Quiz feature. +"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Prerequisite: A quiz have already started. +"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "   Start a quiz, for example `start 1 c/1 m/review` +"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Replace the lesson name with a lesson of your choice. +"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Test case: `\\hint` +"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Expected: Shown the hint for this question. +"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Quitting the quiz +"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Below are some test cases you can perform to test the `QuizQuitCommand` for the Quiz feature. +"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Prerequisite: A quiz have already started. +"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Start a quiz, for example `start 1 c/1 m/review` +"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Replace lesson name with a lesson of your choice. +"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Answer the question according to the question from the specified lesson."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Test case: `\\quit` +"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Expected: Shown the result of the quiz and saved the progress of 0 attempted question."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Test case: `brussels` +"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  `\\quit` +"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Expected: Shown the result of the quiz and saved the progress of 1 attempted question."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Viewing status in a quiz +"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Below is a test cases you can perform to test the `QuizStatusCommand` for the Quiz feature. +"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Prerequisite: A quiz have already started. +"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "   Start a quiz, for example `start 1 c/1 m/learn` +"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "   Replace the lesson name with a lesson of your choice. +"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ". Test case: `\\status` +"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Expected: Shown the quiz progress. +"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "// tag::datastorage[]"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Saving user data +"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Ensuring that there is a save user file generated. The file should be generated under `/userdata/savedata`"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ".. Prerequisites: The user has at least started on a quiz once."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ".. NOTE: There will be 5 unique notations generated in the `savedata` file. It is arranged in an array as such [hashcode, number of attempts, streak, SRS date, isDifficult]"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ".. Test case: Open the `savedata` file and modify `hashcode \u003d 0` +"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "   Expected: Launch braintrain.jar again and open braintrain.log. There should be a warning message stating: `\"WARNING: There are empty values in the file\"` +"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "   Other incorrect cases: Setting `number of attempts \u003c 0` or `streak \u003c 0`. +"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "// end::datastorage[]"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 63,
      "eugenefdw": 86,
      "halcyoneee": 370,
      "lallanachang": 116,
      "DigiPie": 434,
      "-": 529
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX framework, which this code base uses for its UI, uses _events_ to communicate user input (such as mouse movement and button presses) to interested _event consumers_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX event loop acts as an _event dispatcher_ to transmit events to event consumers."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/8/javafx/events-tutorial/events.htm[JavaFX: Handling Events]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as Jackson. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern*: The code base uses JavaFX\u0027s https://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ObservableValue.html[`ObservableValue`] interface to allow objects to watch for changes in data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "This interface is an implementation of the Observer pattern."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Objects that are interested in changes to an `ObservableValue` can register a listener via `ObservableValue#addListener(...)`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "When the value represented by the `ObservableValue` changes, it will notify all registered listeners."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the managementModel because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "-": 270,
      "DigiPie": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d BrainTrain - User guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "By: `Team BrainTrain`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::evan-intro[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is a *spaced-repetition card application* which makes *memorizing easy and effective*. With BrainTrain\u0027s link:https://www.theguardian.com/education/2016/jan/23/spaced-repetition-a-hack-to-make-your-brain-store-information[Spaced Repetition System (SRS)] optimizing your card revision intervals, you will be able to *learn more in less time*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Who is it for:*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- Anyone who needs to memorise anything (e.g. Japanese vocabulary, the periodic table, the human anatomy). BrainTrain\u0027s card system is *content-agnostic* and *flexible*. It accommodates all forms of learning you may require."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- Anyone who needs to create flashcards for educational purposes. BrainTrain\u0027s cards are grouped as lessons which can be *easily imported and exported*. These lessons are also saved in `.csv` files which you *can edit in your favourite spreadsheet application* (e.g. Excel)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Main features of BrainTrain:*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- You can manage card lessons in BrainTrain\u0027s management mode or alternatively do so in your preferred spreadsheet application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "- You can attempt card lessons in BrainTrain\u0027s quiz mode which will track and manage your user-specific spaced-repetition data automatically."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Read the next section, \u003c\u003cQuick-start\u003e\u003e, to start using BrainTrain."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::evan-intro[]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::evan-start[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[Quick-start]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick start"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "To begin using BrainTrain, follow the following set of instructions: +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Ensure that Java version `9` or later is installed on your Computer. You can download it link:https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html[here]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Download the latest `braintrain.jar` file link:{repoURL}/releases[here]. It is located under _Assets_."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Create a folder to store the downloaded file (e.g. `braintrain/`)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Move `braintrain.jar` into the created folder."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Double-click `braintrain.jar` to launch the BrainTrain app. You should see the following within a few seconds:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".BrainTrain on first run"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[#img-firstlook]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::UiFirstLook.png[width\u003d\"384\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". Read the next section, \u003c\u003cFeatures\u003e\u003e, to find out what BrainTrain commands there are."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::evan-start[]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::evan-format[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Words in `UPPER_CASE` are parameter values which you need to specify in order for the commands to work. For example,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "for `deleteCard INDEX`, `INDEX` is a parameter you have to specify."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Parameters in `[ ]` brackets are optional. For example, for the `addCard t/TEST t/TEST [t/TEST]... [h/HINT]...` command, you have to specify at least *2* `TEST` values, but you can optionally specify more than *2* `TEST` values. You can also specify *0 or more* `OPTIONAL` values."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Parameters with trailing `...` can be specified more than once. For example, for the `addLesson n/NAME t/TEST t/TEST [t/TEST]... [h/HINT]...` command, you can specify *0 or more* `HINT` values and *2 or more* `TEST` values. On the other hand, you can only specify exactly *1* `NAME` value."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Parameters can be entered in any order. For example, for the `addCard t/TEST t/TEST [t/TEST]... [h/HINT]...` command, you can use the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "command as such: `addCard t/Australia h/Starts with C t/Canberra t/English`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::evan-format[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Management mode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[help]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Displays usage information on all commands. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Alternatively, press kbd:[F1] to display usage information on all commands."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Changing theme: `changeTheme`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Changes the theme from light to dark vice versa. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Format: `changeTheme`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "// tag::lei[]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[start]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Starting a quiz session: `start`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Starts a new quiz session. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Format: `start LESSON_INDEX [c/COUNT] m/MODE`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in lesson view. If you are currently editing a lesson in card view, you have to use the \u003c\u003cquit, `quit`\u003e\u003e command to return to lesson view before you can use this command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* You must specify the index of lesson to be started. If your input index is out of range of current Lesson List, an error will be thrown."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* You can optionally specify the `COUNT` parameter. `COUNT` sets the number of cards to be tested in the quiz session."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** If no `COUNT` is specified, by default 1 card is tested."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** If `COUNT` is larger than the size of the current lesson, the `COUNT` will be reset to be the size of the lesson by default."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* You must specify index and count as a valid number which should be less than the MAXIMUM_INTEGER(0*7ffffffff), otherwise an error will be thrown."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* You must specify `MODE`. `MODE` sets the testing mode of the quiz session. The four available modes are `LEARN`, `PREVIEW`, `REVIEW` and `DIFFICULT`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ". `LEARN`: Displays new cards with both question and answer before test begins, and then only question is shown to test you. If you have already learned all the cards in current lesson, an error of no more new card to learn will be thrown."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". `PREVIEW`: Displays both question and answer of cards. You will not be tested."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ". `REVIEW`: Tests the words based on the spaced-repetition algorithm, which means that cards with the earliest test date are tested first. If no card has due date before current time, an error of no card for review will be thrown."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ". `DIFFICULT`: Displays cards you previously labelled as difficult with both question and answer shown. You will not be tested. If no card has been labelled as difficult, an error of no difficult card will be thrown."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Only in review mode, cards are tested based on the link:https://en.wikipedia.org/wiki/Spaced_repetition[Space-Repetition system]."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* `start 1 m/LEARN` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Starts a quiz in `LEARN` mode. Cards will be chosen from the first lesson in lesson list. Since count is not specified, the quiz will only contain one card by default."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* `start 2 c/20 m/PREVIEW` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Starts a quiz containing 20 cards chosen from the second lesson in lesson list in `PREVIEW` mode, which only displays question and answer together one time."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "After you start a quiz session with the `start` command, BrainTrain will switch to \u003c\u003cquizmode, `quiz"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "mode`\u003e\u003e and you will only be allowed to enter \u003c\u003cquizmode, `quiz mode`\u003e\u003e commands."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "//end::lei[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::evan-mgt[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[listLessons]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all lessons: `listLessons` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Displays a numbered list of all lessons. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `listLessons` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in lesson view. If you are currently editing a lesson in card view, you have to use the \u003c\u003cquit, `quit`\u003e\u003e command to return to lesson view before you can use this command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Listing of lessons by `listLessons` command"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[#img-listLessons]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::list_lessons.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[addLesson]]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a lesson: `addLesson` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Adds a lesson which is used to store cards of the same type and topic. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `addLesson n/NAME t/TEST t/TEST [t/TEST]... [h/HINT]...`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in lesson view. If you are currently editing a lesson in card view, you have to use the \u003c\u003cquit, `quit`\u003e\u003e command to return to lesson view before you can use this command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You must specify at least 2 `TEST` values. Flashcards added to this lesson must have corresponding `TEST` values."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** For example, a lesson for memorising _muscle anatomy_ will have three `TEST` values: \u0027Muscle\u0027, \u0027Action\u0027 and \u0027Innervation\u0027."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** By default, the first 2 `TEST` values (\u0027Muscle\u0027 and \u0027Action\u0027) will be tested when the lesson is started in quiz mode."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** You can set the 2 `TEST` values to be tested by using the \u003c\u003cset, `set`\u003e\u003e command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You can specify 0 or more `HINT` values (e.g. \u0027Muscle Group\u0027)."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** `HINT` values are displayed during quiz mode when you enter \u003c\u003chint, `\\hint`\u003e\u003e."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson n/Capitals of the world t/Country t/Capital t/Language h/Hint`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Adds a lesson named \u0027Capitals of the world\u0027 with 3 `TEST` values and 1 `HINT` value."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson n/Chinese vocabulary t/English t/Chinese`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Adds a lesson named \u0027Chinese vocabulary\u0027 with 2 `TEST` values."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a lesson: `deleteLesson` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deletes the lesson at the specified INDEX of the numbered lesson list. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `deleteLesson INDEX`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in lesson view. If you are currently editing a lesson in card view, you have to use the \u003c\u003cquit, `quit`\u003e\u003e command to return to lesson view before you can use this command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".BrainTrain with sample lessons loaded"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::delete_lesson.png[width\u003d384]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the above scenario, the command `deleteLesson 2` will delete the second lesson in the numbered list, \u0027Sample-Muscle-Anatomy\u0027."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::evan-mgt[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::eugene[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Reloading all lessons: `reload` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Reloads all lessons from the lessons folder. The default lessons folder is `/lessons/`, found next to `braintrain.jar`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Format: `reload`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in lesson view. If you are currently editing a lesson in card view, you have to use the \u003c\u003cquit, `quit`\u003e\u003e command to return to lesson view before you can use this command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". You have a newly downloaded .csv lesson file, `new_lesson.csv`, with no lessons currently loaded."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "+"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".A new lesson file."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::reload_0_csv.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".No lessons are currently loaded."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::reload_1_empty.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". You drag the new file into the `/lessons/` folder."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "+"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".Dragging the file."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::reload_2_drag.png[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". You enter `reload` into the app, and the new lesson appears."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "+"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".Reloading lessons."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::reload_3_reload.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ". You verify again with `listLessons`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "+"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ".New lesson has been loaded."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "image::reload_4_list.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Lessons are automatically reloaded when you open the application."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "If the lesson does not appear, please check \u003c\u003cTroubleshooting\u003e\u003e."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::eugene[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::evan-mgt[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[openLesson]]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a lesson in card view: `edit` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Opens the lesson at the specified INDEX in Card View for editing. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `openLesson INDEX`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In Card View, users will be able to use the following commands: \u003c\u003cset, `set`\u003e\u003e, \u003c\u003caddCard, `addCard`\u003e\u003e, \u003c\u003cdeleteCard, `deleteCard`\u003e\u003e and \u003c\u003clistCards, `listCards`\u003e\u003e."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".BrainTrain with sample lessons loaded"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::edit_lesson.png[width\u003d384]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the above scenario, the command `edit 1` will open the first lesson in the numbered list, \u0027Sample-Capitals\u0027 in Card View for editing."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[quit]]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Quitting card view: `quit` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Quits Card View and returns to Lesson View. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `quit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Changes made to the lesson in Card View are saved automatically upon quitting Card View."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[set]]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Setting the lesson\u0027s test pair: `set` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Sets the 2 `TEST` values at the 2 specified INDEX of the numbered card list to be tested in quiz mode. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `set INDEX INDEX`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in card view. You have to open a lesson in card view for editing with the \u003c\u003cedit, `edit`\u003e\u003e command before you can use this command."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You must specify exactly 2 valid `INDEX` values."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".A lesson opened in card view, before `set 1 3` is entered"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::set_test_before.png[width\u003d384]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the above scenario, the command `set 1 3` will set the first `TEST` value \u0027Muscle\u0027 and the third `TEST` value \u0027Innervation\u0027 as the values to be tested. After the command is entered, the interface updates accordingly:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".A lesson opened in card view, after `set 1 3` is entered"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::set_test_after.png[width\u003d384]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[listCards]]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all cards: `listCards` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Displays a numbered list of all cards in the lesson opened in Card View. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `listCards` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in card view. You have to open a lesson in card view for editing with the \u003c\u003cedit, `edit`\u003e\u003e command before you can use this command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Listing of cards by `listCards` command"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[#img-listCards]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::list_cards.png[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[addCard]]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a card: `addCard` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Adds a card to the lesson opened in Card View. +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `addCard t/TEST t/TEST [t/TEST]... [h/HINT]...`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in card view. You have to open a lesson in card view for editing with the \u003c\u003cedit, `edit`\u003e\u003e command before you can use this command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You must specify at least 2 `TEST` values. This is because a card needs at least 2 `TEST` values to be testable in quiz mode."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You can specify 0 or more `HINT` values."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "You can only add cards to the opened lesson if they have the same number of `TEST` values as the opened lesson. See \u003c\u003caddLesson, `addLesson`\u003e\u003e command for more information."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addCard t/Australia t/Canberra t/English h/Starts with C`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Adds a card with 3 `TEST` values and 1 `HINT` value."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** By default, the lesson will be set to test the first 2 `TEST` values. In this case, \u0027Australia\u0027 and \u0027Canberra\u0027 are the 2 values to be tested by default."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addCard t/Cake t/蛋糕 h/🎂`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Adds a card with 2 `TEST` values which are both tested in quiz  mode."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[[deleteCard]]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a card: `deleteCard` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deletes the card at the specified INDEX of the numbered card list. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `deleteCard INDEX`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in card view. You have to open a lesson in card view for editing with the \u003c\u003cedit, `edit`\u003e\u003e command before you can use this command."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".BrainTrain with sample cards loaded"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::delete_card.png[width\u003d384]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the above scenario, the command `deleteCard 2` will delete the second card in the numbered list, \u0027Orbicularis oculi / Facial nerve\u0027."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::evan-mgt[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Lists all the commands you have entered in reversed chronological order. +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[quizmode]]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Quiz mode +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "When you \u003c\u003cstart, `start`\u003e\u003e a quiz, you will enter quiz mode. In this mode, you will only be allowed to enter the following set of quiz commands. Management commands are disabled in this mode."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Answering a card : `[ANSWER]` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "An input without the `\\` prefix will be treated as an answer to the current card. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Format: `[ANSWER]...`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "****"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* You can answer with one or more words (e.g. \"Tokyo\" or \"Aland Islands\")."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "What a card contains:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* For each card, total attempts and answer streak are tracked."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* Total attempts refers to the number of times you have attempted this card, regardless of"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "whether you were answered it correctly."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* The answer streak is the number of times you have answered the card correctly consecutively."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The streak will be reduced to 0 after you answer a card wrongly twice in a row. Hence, if you"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "accidentally enter the wrong answer once, your streak for the question will not be affected, unless you answer wrongly again."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "You can press kbd:[ENTER] twice without entering any other input to reveal the answer."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Going through the different scenarios in a quiz*:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Step 1:* +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  The question is \"Japan\" and is asking for the capital of \"Japan\": +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `Tokyo` as answer +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  The picture shown below shows the expected result if the question has been answered correctly,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  which the total correct question counter increased by 1."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of answering the question correctly."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/answer-tokyo-correctly.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Step 2:* +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  The question is \"Tokyo\" and is asking for the country of \"Tokyo\": +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `Japaan` as wrong answer +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  The picture shown below shows the expected result if the question has been answered wrongly once,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  which the total attempts counter increased by 1."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of answering the question wrongly once."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/answer-japan-wrongly-once.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Step 3:* +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Same question as above, \"Tokyo\" and is asking for the country of \"Tokyo\": +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `Jappan` as another wrong answer +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  The picture shown below shows the expected result if the question has been answered wrongly twice,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  which shows the correct answer and the total attempts counter increased by 1."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of answering the question wrongly twice."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/answer-japan-wrongly-twice.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Step 4:* +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Same question as above, \"Tokyo\" and is asking for the country of \"Tokyo\": +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `Japan` as correct answer +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  The picture shown below shows the expected result if the question has been answered correctly"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  after answer has been revealed, which shows how well each question is performed in this quiz."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of quiz after questions have been completed."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/answer-end.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Labelling the current card as difficult: `\\difficult`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Labels the current card as difficult. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Format: `\\difficult`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* The question is \"Japan\" and is asking for the capital of \"Japan\": +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `\\difficult` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Labelled this card as difficult as shown in the picture below."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of card labelled as difficult."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/difficult.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* The question is \"Japan\" and is asking for the capital of \"Japan\": +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  Enters `\\difficult` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  Enters `\\difficult` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Labelled this card as difficult as shown in the picture below."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of card labelled as difficult."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/not-difficult.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `\\help`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Displays usage information on all quiz mode commands and acceptable inputs for answering cards. +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Format: `\\help`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "[[hint]]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the current card\u0027s hint(s): `\\hint`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Reveals the hint(s) for the current card (if any). +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Format: `\\hint`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* Enters `\\hint` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Reveals the hint of the current card"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result revealing the hint of the card."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/hint.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Quitting the quiz session: `\\quit`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Quits the current quiz session and switches back to `management mode`. +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Format: `\\quit`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* The question is \"Japan\" and is asking for the capital of \"Japan\": +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `Tokyo` as answer +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `\\quit` to quit the quiz. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Saves the progress of 1 attempted question \"Japan\"."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of quitting a quiz after answering a question correctly."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/quit.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the status of the current quiz: `\\status`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Displays information on the current quiz\u0027s status such as question progress (i.e. number of"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "correct questions). +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Format: `\\status`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "****"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "What does status display:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* Total attempts refers to the number of times you have attempted this card, regardless of"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "whether you answered it correctly."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Total correct answers refers to the number of times you correctly answered, regardless of the"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "streak."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Current progress refers to which card are you currently on, out of all the cards in the quiz."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "****"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* The question is \"Japan\" and is asking for the capital of \"Japan\": +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `Tokyo` as answer +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Enters `\\status` to view the status of the current quiz. +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  Saves the progress of 1 attempted question \"Japan\"."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".Expected result of viewing the status of a quiz after answering a question correctly."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "image::quiz-command-examples/status.PNG[width\u003d\"500\"]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "// tag::jeraldtsy[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "[[usermode]]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d\u003d User Transfer mode"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "You can use BrainTrain across different devices. This is an in-built feature that is automated in BrainTrain."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d\u003d\u003d Using BrainTrain across different devices"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "To transfer your files: +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ". Store the `userdata` and `lessons` folder into your transfer device (thumbdrive etc.)."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ". On another device, ensure that BrainTrain has been executed `at least once`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ". Transfer and overwrite the `userdata` and `lessons` folder."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ". Your progress will be automatically imported on that device."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Future enhancements"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Importing data from website [Coming in v2.0]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Easily transfer files using import command to get files directly from a specific link without the use of transfer devices. +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The usage of hard drives to transfer and pull documents has reduced overtime as new cloud storage are introduced. Thus, with this new feature, it will help to pull the user file and lessons from links. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Example : `import User l/[INSERT_DESIRED_LINK_HERE]`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "// end::jeraldtsy[]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Supporting timer countdown in quiz mode [Coming in v2.0]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "User will see a 10 seconds timer countdown when answering a question (e.g. learn or review mode)."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d\u003d Supporting auto generation of mcq in quiz mode [Coming in v2.0]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "BrainTrain will auto generate a list of mcq options depending on the list of values in the"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "user specified lesson."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d Support other spreadsheet formats such as .xlsx [Coming in v2.0]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "BrainTrain will be able to accept more robust spreadsheet file formats."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// tag::lei[]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Supporting starting a quiz session with multiple lessons [Coming in v2.0]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Format: `start LESSON_INDEX_1 LESSON_INDEX_2 [c/COUNT1] [c/COUNT2] m/MODE`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You can start a quiz session with cards from more than one lesson. The sequence of cards will be random instead of following the sequence of lessons to increase the difficulty for you to memorize."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Example: `start 1 2 c/5 c/5 m/learn`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Starts a quiz with 5 words from the first lesson and 5 words from the second lesson in `LEARN` mode."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "// end::lei[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// tag::eugene_troubleshoot[]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Troubleshooting"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Q*: Why are my card values shown as `?????`? +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*A*: If your lesson contains non-English characters such as:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Characters with accents: `à`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* Non-English words : `こんにちは` `السلام عليكم` `你好`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "This can be fixed by opening the lesson file in your preferred spreadsheet application (e.g. Excel), and then saving it as `CSV UTF-8 (Comma delimited) (*.csv)`. UTF encoding allows a computer to show non-English characters. +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "****"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "The default encoding setting is unable to process special characters. As a result, you will need to save it as a `UTF-8` encoded file."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Note that externally created lesson files have to be saved with UTF-8 encoding before using them in BrainTrain. +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "If the files are saved without `UTF-8` encoding, any non-English data may be saved as `?????`, and the data will be lost."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "****"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*Q*: Why are my lessons not loading? +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*A*: Please verify if the location of BrainTrain is suitable. Depending on your computer\u0027s permissions and security settings, places such as the Desktop may not be usable, and your operating system may prevent BrainTrain from loading the lesson files."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "If BrainTrain still does not load lessons despite trying other locations, please contact Team BrainTrain at https://github.com/CS2103-AY1819S2-W14-1/main/issues[our issue tracker] or email us at eugenef@u.nus.edu, and attach any generated braintrain.log files."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "// end::eugene_troubleshoot[]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*A*: Install the app in the other computer and transfer the lesson `.csv` files over to the `lessons` directory, and userdata `.csv` files over to the `userdata` directory."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Management mode"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Viewing help*: `help`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Changing theme*: `changeTheme`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Starting a quiz session*: `start LESSON_INDEX [c/COUNT] m/MODE` +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** e.g. `start 1 c/15 m/LEARN`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Listing all lessons*: `listLessons`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Adding a lesson*: `addLesson n/NAME t/TEST t/TEST [t/TEST]…​ [h/HINT]…​` +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** e.g. `addLesson n/Capitals of the world t/Country t/Capital t/Language h/Hint`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Deleting a lesson*: `deleteLesson INDEX` +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "* *Reloading all lessons*: `reload`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Editing a lesson in Card View*: `edit INDEX` +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Quitting card view*: `quit`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Listing all cards*: `listCards`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Adding a card*: `addCard t/TEST t/TEST [t/TEST]... [h/HINT]...` +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** e.g. `addCard t/Australia t/Canberra t/English h/Starts with C`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Deleting a card*: `deleteCard INDEX` +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Listing entered commands*: `history`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Exiting the program*: `exit`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Quiz mode"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Answering a card*: `[ANSWER]...`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Labelling the current card as difficult*: `\\difficult`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Viewing help*: `\\help`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Viewing the current card\u0027s hint(s)*: `\\hint`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Quitting the quiz*: `\\quit`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Viewing the quiz session\u0027s status*: `\\status`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d\u003d User transfer"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Using BrainTrain on another device*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "{empty} +"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 29,
      "eugenefdw": 65,
      "halcyoneee": 187,
      "lallanachang": 20,
      "DigiPie": 237,
      "-": 117
    }
  },
  {
    "path": "docs/team/digipie.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d Evan Tay - Project portfolio for BrainTrain +"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-1/main"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":pullURL: https://github.com/CS2103-AY1819S2-W14-1/main/pull/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":seeduURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ":webURL: https://cs2103-ay1819s2-w14-1.github.io/main/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Introduction +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The purpose of this portfolio is to demonstrate my software engineering competency by showcasing my code and documentation contributions to the link:{repoURL}[BrainTrain project]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Overview +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The BrainTrain project was developed by a team of 5 students over seven weeks, under the National University of Singapore\u0027s link:{seeduURL}[CS2103T: Software Engineering module]. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "CS2103T students were given the option of enhancing an link:{seeduURL}[existing addressbook application] or morphing it into another product. We chose to morph it into a https://en.wikipedia.org/wiki/Spaced_repetition[spaced-repetition] card application because we wanted to further challenge ourselves and improve our software engineering skills."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d What is BrainTrain +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is a *spaced-repetition card application* which makes *memorizing easy and effective*. With BrainTrain\u0027s link:https://www.theguardian.com/education/2016/jan/23/spaced-repetition-a-hack-to-make-your-brain-store-information[Spaced Repetition System (SRS)] optimizing your card revision intervals, you will be able to *learn more in less time*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Summary of contributions +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "My primary responsibility was to design and develop the *Card Management System*. My secondary responsibility was to act as the project\u0027s *documentation lead*. In the following sub-sections, you will find a summary of my key contributions to the project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Major enhancement +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "My largest contribution to the project was the implementation of the *Card Management System*: +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Context: In BrainTrain, each lesson contains a set of cards of the same type and topic."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* What it does: It provides users with the ability to add, edit and delete lessons in *Lesson View* and *Card View* modes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* In *Lesson View*, users can:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Add and delete lessons by using the `addLesson` and `deleteLesson` commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Open a lesson in *Card View* for editing by using the `edit` command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** List the full details of all lessons by using the `listLessons` command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* In *Card View*, users can:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Add and delete cards by using the `addCard` and `deleteCard` commands"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Set the 2 test values to be tested in quiz mode for all cards in the lesson by using the `set` command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** List the full details of all cards by using the `listCards` command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Quit *Card View* and return to *Lesson View* by using the `quit` command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Justification: Users need to be able to create and manage content in order to use BrainTrain for card learning."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Most significant pull requests: link:{pullURL}113[#113], link:{pullURL}173[#173] and link:{pullURL}180[#180]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Code contributed: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003ddigipie[View on RepoSense] +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Minor enhancement +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "My second largest contribution was the Graphical User Interface (GUI) representation for the Card Management System: +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* What it does: Displays all lessons and their relevant details in *Lesson View*, and the details and cards of the lesson being edited in *Card View*."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** In *Lesson View*, users can view all lessons and their details (e.g. number of cards)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** In *Card View*, users can view the opened lesson\u0027s details and its cards."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Justification: The GUI representation of lessons and cards provides users with the ability to view all relevant details at a glance."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Code contributed: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003ddigipie[View on RepoSense] +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Other contributions +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In addition to designing and writing code, I also contributed to the project through the following means:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Documentation:*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "As the documentation lead, I ensured overall quality for the project\u0027s documentation by,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Writing the User Guide\u0027s Introduction and Quick Start sections (see link:{pullURL}15[#15], link:{pullURL}85[#85], and link:{pullURL}180[#180])."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Editing the User Guide and Developer Guide for overall coherency as editor (see"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "link:{pullURL}20[#20], https://github.com/CS2103-AY1819S2-link:{pullURL}85[#85], and link:{pullURL}180[#180])."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Project management:* I assisted the team lead, \u003c\u003ceugenefdw#, Eugene\u003e\u003e by,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Managing product releases link:{repoURL}/releases/tag/v1.2.1[v1.2.1] and link:{repoURL}/releases/tag/v1.3[v1.3.0]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Coordinating team for milestone link:{repoURL}/milestone/4[v1.3]."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Software architecture:* I contributed to the overall project by,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Performing major refactor of `seedu.address.logic` and `seedu.address.model.util` package structure and design to improve workflow for entire team (see  link:{pullURL}/85[#85], link:{pullURL}/180[#180])."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Co-designing the app\u0027s light and dark theme with fellow developer \u003c\u003chalcyoneee#, Tze Ting\u003e\u003e (see link:{pullURL}180[#180])."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* *Community:* I worked with my team to resolve problems together by,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Assisting teammates in fixing their bugs (see link:{pullURL}33[#33] and link:{pullURL}97[#97])."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Reviewing teammates\u0027 pull requests with constructive feedback (see link:{pullURL}37[#37], link:{pullURL}139[#139] and link:{pullURL}175[#175])."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Contributions to the user guide +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "I have listed some of my key contributions to the link:{webURL}UserGuide.html[user guide] as excerpts below: +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Excerpt: Adding a lesson: `addLesson` +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "_Click link:{webURL}UserGuide.html#addLesson[here] to view this section in the user guide._"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Adds a lesson which is used to store cards of the same type and topic. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `addLesson n/NAME t/TEST t/TEST [t/TEST]... [h/HINT]...`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in lesson view. If you are currently editing a lesson in card view, you have to use the \u003c\u003cquit, `quit`\u003e\u003e command to return to lesson view before you can use this command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Usage rules:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You must specify at least 2 `TEST` values. Flashcards added to this lesson must have corresponding `TEST` values."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** For example, a lesson for memorising _muscle anatomy_ will have three `TEST` values: \u0027Muscle\u0027, \u0027Action\u0027 and \u0027Innervation\u0027."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** By default, the first 2 `TEST` values (\u0027Muscle\u0027 and \u0027Action\u0027) will be tested when the lesson is started in quiz mode."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** You can set the 2 `TEST` values to be tested by using the \u003c\u003cset, `set`\u003e\u003e command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* You can specify 0 or more `HINT` values (e.g. \u0027Muscle Group\u0027)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** `HINT` values are displayed during quiz mode when you enter \u003c\u003chint, `\\hint`\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson n/Capitals of the world t/Country t/Capital t/Language h/Hint`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Adds a lesson named \u0027Capitals of the world\u0027 with 3 `TEST` values and 1 `HINT` value."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson n/Chinese vocabulary t/English t/Chinese`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Adds a lesson named \u0027Chinese vocabulary\u0027 with 2 `TEST` values."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Excerpt: Editing a lesson in card view: `edit` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "_Click link:{webURL}UserGuide.html#openLesson[here] to view this section in the user guide._"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Editing a lesson in card view: `edit` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Opens the lesson at the specified INDEX in Card View for editing. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `openLesson INDEX`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In Card View, users will be able to use the following commands: \u003c\u003cset, `set`\u003e\u003e, \u003c\u003caddCard, `addCard`\u003e\u003e, \u003c\u003cdeleteCard, `deleteCard`\u003e\u003e and \u003c\u003clistCards, `listCards`\u003e\u003e."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".BrainTrain with sample lessons loaded"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::edit_lesson.png[width\u003d384]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the above scenario, the command `edit 1` will open the first lesson in the numbered list, \u0027Sample-Capitals\u0027 in Card View for editing."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Excerpt: Deleting a card: `deleteCard` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "_Click link:{webURL}UserGuide.html#deleteCard[here] to view this section in the user guide._"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Deletes the card at the specified INDEX of the numbered card list. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Format: `deleteCard INDEX`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This command only works in card view. You have to open a lesson in card view for editing with the \u003c\u003cedit, `edit`\u003e\u003e command before you can use this command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".BrainTrain with sample cards loaded"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::delete_card.png[width\u003d384]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the above scenario, the command `deleteCard 2` will delete the second card in the numbered list, \u0027Orbicularis oculi / Facial nerve\u0027."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d Contributions to the developer guide +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "I have listed some of my key contributions to the link:{webURL}DeveloperGuide.html[developer guide] as excerpts below: +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Excerpt: Management feature (overview) +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "_Click link:{webURL}DeveloperGuide.html#mgtOverview[here] to view this section in the developer guide._"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Management feature provides users with the ability to add, edit and delete lessons in *Lesson View* and *Card View* modes."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Lesson View +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In *Lesson View*, users can:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addLesson` - Adds a lesson to the list of lessons loaded in-memory."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `deleteLesson` - Deletes a lesson from the list of lessons loaded in-memory."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `edit` - Opens a lesson in *Card View* for editing"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `listLessons` - Lists all cards with full details"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d Card View +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In *Card View*, users can:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `addCard` - Adds a card to the lesson opened in *Card View*."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `deleteCard` - Deletes a card from the lesson opened in *Card View*."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `set` - Sets the 2 test values to be tested in quiz mode for all cards in the lesson"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `listCards` - Lists all cards with full details"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* `quit` - Quits *Card View* and returns to *Lesson View*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "In the subsequent sub-sections, I will discuss the 3 major model classes used to manage lessons and flashcards, `Card.java`, `Lesson.java`, and `LessonList.java`. These classes are also used by the \u003c\u003clessonStorageFeature, Lesson Storage Feature\u003e\u003e and \u003c\u003csessionFeature, Session Feature\u003e\u003e."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Excerpt: Card class +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "_Click link:{webURL}DeveloperGuide.html#cardClass[here] to view this section in the developer guide._"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "An instance of link:{repoURL}/src/main/java/seedu/address/model/card/Card.java[`Card.java`] represents a flashcard which contains 2 or more test values and 0 or more hint values. It takes in a list of test values, and optionally a list of hint values."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The following code shows how the card is generated:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Test and hint values are referred to as core and optional values internally. These terms are interchangeable."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * @param optionals {@link #optionals} a {@code Card} can have."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " public Card(List\u003cString\u003e cores, List\u003cString\u003e optionals) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     requireAllNonNull(cores, optionals);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.cores.addAll(cores);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     this.optionals.addAll(optionals);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " public Card(List\u003cString\u003e cores) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     // Generates a Card without optionals."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "----"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "These 2 constructors are called by the `Lesson.java` which generates a list of cards."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Excerpt: Add card command: `addCard` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "_Click link:{webURL}DeveloperGuide.html#addCard[here] to view this section in the developer guide._"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "The `addCard` command adds a card to the lesson which is being edited in *Card View*. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* Given a lesson on country capitals which has 2 test values, \u0027Country\u0027 and \u0027Capital\u0027, and 1 hint value, \u0027Hint\u0027."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* If a user wants to add a flashcard to this lesson, he would enter `addCard t/Korea t/Seoul h/S`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "How it will look like to the user after entering the command:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Expected result after the card is added"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::ui_add_card_after.png[width\u003d\"512\"]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Given the above example, the following sequence of interactions will occur within the `Logic` component."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".Sequence diagram of the `addCard t/Korea t/Seoul h/S` command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "image::sd_add_card.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003d\u003d\u003d Excerpt: Aspect: contextual management commands +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "_Click link:{webURL}DeveloperGuide.html#mgtConsiderations[here] to view this section in the developer guide._"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Alternative 1 (current choice):** Only lesson-related commands are allowed in *Lesson View* sub-management mode, and only card-related commands are allowed in *Card View* sub-management mode."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Pros: The user need not specify which lesson he is adding or deleting cards from. It is clear which lesson is currently being edited."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Con: Tedious to implement given that it requries significant refactoring of the base code provided."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "* **Alternative 2:** A single management mode where all lesson and card-related commands can be executed."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Pro: This is significantly easier to implement give that no major refactoring is requred."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** Con: This compromises the user experience."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "**Alternative 1** was chosen because it will vastly improve the user experience. For example, if a user were to need to add multiple cards to a specific lesson, alternative 2 would require the user to enter the lesson\u0027s index or name for each `addCard` command (e.g. `addCard n/Sample-Capitals t/Korea t/Seoul` where \u0027Sample-Capitals\u0027 is the lesson\u0027s name). +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "On the other hand, alternative 1 only requires the user to open the lesson for editing in *Card View* once, before calling the `addCard` commands. These `addCard` commands will not require the user to specify which lesson to add the cards to. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "Hence by choosing alternative 1, the user experience was vastly improved given that the user interface is easier to use."
      }
    ],
    "authorContributionMap": {
      "DigiPie": 243
    }
  },
  {
    "path": "docs/team/eugenefdw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d Eugene Foo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":toc-title: Table of contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":toc-placement: manual"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-1/main"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":pullURL: https://github.com/CS2103-AY1819S2-W14-1/main/pull/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ":seeduURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "This project portfolio highlights my various contributions to the BrainTrain project, including code, documentation and administrative matters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d Overview of project requirements"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "BrainTrain was developed as part of the CS2103T Software Engineering module at the National University of Singapore. My team of 5 were given seven weeks to develop our application, built off of https://github.com/se-edu/addressbook-level4[an existing address book application]."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "We were expected to apply industry-standard practices and tools such as Github and Continuous Integration. Beyond the application, we were also required to document our work in a User Guide and Developer Guide."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d Overview of BrainTrain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "BrainTrain is a memorisation tool made for students and other learners, especially in content-heavy subjects, such as language vocabulary, science terminology and others."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "BrainTrain is a flashcard application that implements a https://en.wikipedia.org/wiki/Spaced_repetition[Spaced Repetition System] (SRS) to test the user over time. This allows you to remember various things in a short amount of time, yet also assist in memorization long-term as you continuously use the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "My role was to design and manage the storage of Lesson data in BrainTrain. The following sections will highlight some of the choices I made and the reasons behind them, and various other contributions to the administration and documentation of the project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d *Major enhancement*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Added the ability to save and load Lesson data to Comma-Separated Value (CSV) files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *What it does*: Allows the user to save and load flashcard lesson data to CSV files."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *Justification*: CSV files can be opened in an external editor, such as Excel. Given that a lesson may have up to hundreds of cards, managing the lesson through row by row editing would be tedious for a user. An external spreadsheet editor would be more suited to editing large amounts of data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *Credits*: The OpenCSV library, which handles actual file I/O."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *Relevant pull requests*: https://github.com/CS2103-AY1819S2-W14-1/main/pull/28[#28], https://github.com/CS2103-AY1819S2-W14-1/main/pull/35[#35], https://github.com/CS2103-AY1819S2-W14-1/main/pull/78[#78], https://github.com/CS2103-AY1819S2-W14-1/main/pull/121[#121], https://github.com/CS2103-AY1819S2-W14-1/main/pull/179[#179]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d *Minor enhancement*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "Added the `reload` command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *What it does*: Allows the user to manually reload lessons from their hard disk."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *Justification*: The user would be able to modify existing lessons or download new lessons without having to close and open the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *Relevant pull requests*: https://github.com/CS2103-AY1819S2-W14-1/main/pull/121[#121]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003deugenefdw[RepoSense]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d\u003d *Other contributions*:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Led the team, setting deadlines for milestones and other tasks and contacting mentors as needed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Set up team\u0027s Github repository"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Set up branch protection, issue labels, milestones on the repository"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Set up AppVeyor, Codacy, Coveralls, Travis on the repository"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Updated User Guide and Developer guide: https://github.com/CS2103-AY1819S2-W14-1/main/pull/78[#78], https://github.com/CS2103-AY1819S2-W14-1/main/pull/99[#99] , https://github.com/CS2103-AY1819S2-W14-1/main/pull/121[#121]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W14-1/main/pull/32[#32], https://github.com/CS2103-AY1819S2-W14-1/main/pull/129[#129], https://github.com/CS2103-AY1819S2-W14-1/main/pull/180[#180]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1819S2/forum/issues/43[1], https://github.com/nus-cs2103-AY1819S2/forum/issues/44[2])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/cs2103-ay1819s2-w09-1/main/issues/117[1], https://github.com/cs2103-ay1819s2-w09-1/main/issues/122[2], https://github.com/cs2103-ay1819s2-w09-1/main/issues/130[3])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Integrated a third party library (opencsv) to the project (https://github.com/CS2103-AY1819S2-W14-1/main/pull/21[#21], https://github.com/CS2103-AY1819S2-W14-1/main/pull/28[#28])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "*** Set up a team Discord channel with the Github Bot for notifications"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "include::../UserGuide.adoc[tag\u003deugene]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "---"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "include::../UserGuide.adoc[tag\u003deugene_troubleshoot]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcsvstorage]"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 94
    }
  },
  {
    "path": "docs/team/halcyoneee.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d Lee Tze Ting - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d PROJECT: BrainTrain"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "This project portfolio page showcases my coding, documentation and other contributions to the BrainTrain project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "As a student of the CS2103T: Software Engineering module, I was tasked with working with 4 other students as a team to build a product from an existing https://github.com/se-edu/addressbook-level4[address book application] over 7 weeks. We were given a choice to morph the existing address book to any application we want and we chose to develop *BrainTrain* to further challenge ourselves."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "BrainTrain is a spaced repetition flashcard application which makes memorizing easy and efficient. User interaction happens through Command Line Interface (CLI) and it has a minimal Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "created with JavaFX. It is written in Java, and has about 16 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "My role was to design and build the app\u0027s quiz mode. The following sections detail what I have contributed to the project, and showcases my ability to write user and developer documentation."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Major enhancement*: Implementation of quiz mode"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *What it does*: Quiz mode manages user interaction during a quiz. It comprises of 6 commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "which are only available in this mode. It also reads in answer inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** `[ANSWER]...` - Answers the current question. All inputs without the prefix `\\` are treated as answers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** `\\difficult` - Labels current question in quiz as difficult or not."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** `\\help` - Lists all commands in quiz and inputs the program will accept."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** `\\hint` - Reveals additional information to help user to solve the question."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** `\\quit` - Quits a quiz and save attempted progress."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** `\\status` - Lists current status and lesson progress of user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "** *Justification*: Users need to be able to launch a lesson in quiz mode, where they will be tested on the lesson\u0027s flashcards, in order to use BrainTrain for memorization."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *Highlights*: Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/32[#32],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/43[#42],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/96[#96],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/129[#129],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/175[#175],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/186[#186]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Minor enhancement*: Implementation of quiz mode display to user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *What it does*: In order to cater for two different mode, there will be 2 different display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "Display will switch smoothly between management mode and quiz mode."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *Justification*: This is to ensure that there is no unnecessary display to distract the user during a quiz mode."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "The user just need to focus solely on going through the flashcard without having to care about"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "the list of lesson available."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** *Highlights*: Pull request"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/108[#108]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dhalcyoneee[RepoSense]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** Managed 3 out of 6 releases `v1.1`, `v1.3.1` and `v1.4` on GitHub"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Team contribution:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** Integrated `AddressBook` features with `BrainTrain` (https://github.com/CS2103-AY1819S2-W14-1/main/pull/33[#33])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Improved test coverage from 88% to 95% by writing all the BrainTrain system tests (https://github.com/CS2103-AY1819S2-W14-1/main/pull/175[#175])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Implemented `ChangeThemeCommand` to change between light and dark theme which persists beyond"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "app restart. (https://github.com/CS2103-AY1819S2-W14-1/main/pull/175[#175])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** Updated Architecture, Logic, UI and QuizModel component diagram to match the current"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "implementation. (https://github.com/CS2103-AY1819S2-W14-1/main/pull/186[#186])"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Reviewed pull requests with constructive feedback"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "(examples: https://github.com/CS2103-AY1819S2-W14-1/main/pull/30[#30],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/85[#87],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/97[#97],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/121[#121])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** Contributed to forum discussions"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "(examples: https://github.com/nus-cs2103-AY1819S2/forum/issues/49[#49],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/nus-cs2103-AY1819S2/forum/issues/51[#51])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "*** Reported bugs and suggestion for other team in the class"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "(examples: https://github.com/cs2103-ay1819s2-w09-1/main/issues/106[#106],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/cs2103-ay1819s2-w09-1/main/issues/118[#118],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "https://github.com/cs2103-ay1819s2-w09-1/main/issues/140[#140])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "*** Assisted \u003c\u003cdigipie#, Evan\u003e\u003e in adding a legend footer to his management mode (https://github.com/cs2103-ay1819s2-w09-1/main/issues/106[#106])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|_Given below is an extract of my contributions to the https://cs2103-ay1819s2-w14-1.github.io/main/UserGuide.html[user guide]._"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "_Start of extract of quiz mode_"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "_End of extract of quiz mode_"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "|_Given below is an extract of my contribution to the https://cs2103-ay1819s2-w14-1.github.io/main/DeveloperGuide.html[developer guide]._"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "_Start of extract of quiz mode_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "_End of extract of quiz mode_"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 93,
      "DigiPie": 16
    }
  },
  {
    "path": "docs/team/jeraldtsy.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d Jerald Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d PROJECT: BrainTrain"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "This project portfolio page showcases my contributions to the BrainTrain project such as coding,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "documentation and other contributions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "All National University of Singapore(NUS) School of Computing(SoC) students have to take a software engineering module"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "part encoded CS2103T as a required module. Our team comprises of 5 members who were tasked to develop and enhance an existing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "https://github.com/se-edu/addressbook-level4[address book application] within 7 weeks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "We were given a choice to morph the existing address book to any application we want and we chose"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "to develop *BrainTrain*, which will be detailed below."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "BrainTrain uses Spaced-Repetition System (SRS), a more effective and efficient memorisation technique compared to hardcore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "memorisation techniques. Users will be able to learn more with less time. User interaction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "happens through Command Line Interface (CLI) and it has a minimal Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "My role in BrainTrain is to design and manage the user data through the manipulation of importing and exporting of files."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "The following sections give a summary of how I have contributed to the project and showcases my ability to write both"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "the user and developer guide."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Major enhancement*: User features, Comma-Separated Values(CSV) File Storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** *What it does*: User features manage the user progress and import and export their progress into a simple CSV file accordingly."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "This feature is automated. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Import of user file happens when the application is opened. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Export of user file happens when the application is closed. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** *Why it is important*: In consideration of the portability for users to use BrainTrain across different devices, it is"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "important to have a file to keep track of the status of the questions. Furthermore, each question will have a unique SRS-date that is"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "dependent on how well the user answered the questions. Questions with approaching due dates will be listed first."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** *Highlights*: Pull request https://github.com/CS2103-AY1819S2-W14-1/main/pull/30[#30],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/75[#75],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/106[#106],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-1/main/pull/139[#139]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Minor enhancement*: Sanitise user inputs of the CSV file that is generated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003djeraldtsy[RepoSense]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "*** Updated class and sequence diagrams to match the current implementation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "*** Reported bugs and suggestion for other team in the class"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "(examples: https://github.com/CS2103-AY1819S2-W16-1/main/issues/143[#143],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "https://github.com/CS2103-AY1819S2-W16-1/main/issues/152[#152],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "https://github.com/CS2103-AY1819S2-W16-1/main/issues/163[#163],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "https://github.com/CS2103-AY1819S2-W16-1/main/issues/172[#172])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "_Start of extract of user mode_"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "include::../UserGuide.adoc[tag\u003djeraldtsy]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "_End of extract of user mode_"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Click to read the full https://cs2103-ay1819s2-w14-1.github.io/main/UserGuide.html[User Guide]."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "_Start of extract of data storage_"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddatastorage]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "_End of extract of data storage_"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "Click to read the full https://cs2103-ay1819s2-w14-1.github.io/main/DeveloperGuide.html[Developer Guide]."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 78
    }
  },
  {
    "path": "docs/team/lallanachang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d Chang Lei - Project Portfolio for BrainTrain"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":toc-title: Table of contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":toc-placement: manual"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-1/main"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":pullURL: https://github.com/CS2103-AY1819S2-W14-1/main/pull/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ":seeduURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "This project portfolio page displays my contributions to the BrainTrain project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "The BrainTrain project was designed, developed and implemented by a team of 5 students over seven weeks, under one of the National University of Singapore\u0027s modules: link:{seeduURL}[CS2103T Software Engineering]. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "We chose to morph link:{seeduURL}[existing addressbook application] into a https://en.wikipedia.org/wiki/Spaced_repetition[spaced-repetition system] flashcard application to improve our software engineering skills and build an application for users who need to memorize heavy contents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d What is BrainTrain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "BrainTrain is an open-source spaced repetition flashcard application for people who need to memorise something which is content heavy. link:https://www.theguardian.com/education/2016/jan/23/spaced-repetition-a-hack-to-make-your-brain-store-information[Research] has shown that the Spaced-Repetition System (SRS) is much more effective than traditional memorization techniques since it help users review more their poorly memorised words. With BrainTrain, you will learn more with less time since this application makes memorizing an easier and more efficient job."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "BrainTrain is also a portable and easy-to-navigate desktop program. It is an offline application which you can use anywhere, even in places with limited or no Internet availability. It can be navigated and used via easy-to-use commands through the Command Line Interface (CLI). The CLI is supplemented by a minimalistic Graphical User Interface (GUI) which provides helpful but non-distracting visual aid. Together, the CLI and GUI provides an effective and straightforward way for you to use BrainTrain."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d My role"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "My role was to design and write the codes for a `session` feature as well as `start` command. The following sections illustrate these enhancements and other relevant minor enhancements in more detail."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "team project."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d *Major enhancement*: Session and session manager model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *What it does*: Session model generates quiz cards that are needed to be tested in quiz mode based on data storage both from lesson and user progress."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Justification*: To choose the most suitable words for users, session model also has a manager to do the card analysis and generation based on different modes that users want. In review mode, the method will always generate the cards with the closet due date to users which applies our https://en.wikipedia.org/wiki/Spaced_repetition[spaced-repetition system]. It can update the user progress after each quiz session as well."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Highlights*: Pull request link:{pullURL}40[#40], link:{pullURL}97[#97], link:{pullURL}109[#109] and link:{pullURL}132[#132]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Code contributed: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dlallanachang[RepoSense]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d *Minor enhancement*: quiz start command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *What it does*: Users can start a quiz session using `start` command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Justification*: Users can specify the lesson and number of cards they want to be tested as well as the quiz mode they want to enter through setting different parameters in the quiz start command ."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* *Highlights*: Pull request link:{pullURL}40[#40], link:{pullURL}100[#100] and link:{pullURL}185[#185]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Code contributed: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dlallanachang[RepoSense]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d\u003d *Other contributions*:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "Besides designing and writing codes, I also contributed to the project in the following areas:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Updated explanation and diagrams in user guide and developer guide to match the current implementation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Sorted out and updated use stories and cases in develop guide. (Pull request link:{pullURL}14[#14])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Enhancement to existing feature:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Updated the Graphical User Interface representation for the quiz system. (Pull request link:{pullURL}176[#176])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Followed team\u0027s internal schedule and updated the codes before each milestone."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** PRs reviewed with comments: (examples: Pull request link:{pullURL}86[#86], link:{pullURL}107[#107])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "** Reported bugs and offered suggestion for the project. (examples: https://github.com/CS2103-AY1819S2-W14-1/main/issues/98[#98], https://github.com/CS2103-AY1819S2-W14-1/main/issues/128[#128])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|Given below are sections I contributed to the User Guide, showing development that I have made for the `start` feature. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|The sections also contain an excerpt for the starting multiple lessons feature that I have planned for the next version (v2.0) of BrainTrain."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlei]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide, showing implementation I have made for the `session` feature as well as some suggested test cases for `StartCommand`. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsession]"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvLessonListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvUserStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.LessonListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.UserStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    protected ManagementModel managementModel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected QuizModel quizModel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BrainTrain ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonListStorage lessonListStorage \u003d new CsvLessonListStorage(userPrefs.getLessonListFolderPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d initLessonList(lessonListStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        UserStorage userStorage \u003d new CsvUserStorage(userPrefs.getUserFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        User user \u003d initUser(userStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, lessonListStorage, userStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        managementModel \u003d initModelManager(userPrefs, lessonList, user);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel \u003d initQuizModelManager(managementModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        logic \u003d new LogicManager(managementModel, quizModel, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a {@code ManagementModelManager} with the data from {@code userPrefs}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel initModelManager(ReadOnlyUserPrefs userPrefs, LessonList lessonList, User user) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new ManagementModelManager(userPrefs, lessonList, user);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns an empty {@code QuizModelManager}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param managementModel"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModelManager initQuizModelManager(ManagementModel managementModel) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new QuizModelManager(managementModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with a empty BrainTrain\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a {@code LessonList} using the folder at {@code storage}\u0027s LessonList folder path,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * or a new {@code LessonList} with no initial lessons if errors occur when"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    protected LessonList initLessonList(LessonListStorage storage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path lessonListFolderPath \u003d storage.getLessonListFolderPath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        logger.info(\"Using lessons folder: \" + lessonListFolderPath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!Files.exists(lessonListFolderPath)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"Lessons folder not found. Creating...\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            Files.createDirectories(lessonListFolderPath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Failed to create folder at: \" + lessonListFolderPath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonList initializedLessonList \u003d null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Optional\u003cLessonList\u003e prefsOptional \u003d storage.readLessonList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        initializedLessonList \u003d prefsOptional.orElse(SampleDataUtil.getSampleBrainTrain());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (initializedLessonList.getLessons().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            initializedLessonList \u003d SampleDataUtil.getSampleBrainTrain();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            storage.saveLessonList(initializedLessonList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        logger.info(initializedLessonList.getLessons().size() + \" lessons loaded.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return initializedLessonList;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a {@code User} using the file at {@code storage}\u0027s user file path,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * or a new {@code User} with empty data if errors occur when reading from the file."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    protected User initUser(UserStorage storage) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path userFilePath \u003d storage.getUserFilePath();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        logger.info(\"Using user data folder : \" + userFilePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!Files.exists(userFilePath)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"User folder not found. Creating...\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            Files.createDirectories(userFilePath.getParent());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Failed to create folder at: \" + userFilePath);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        User initializedUser \u003d null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Optional\u003cUser\u003e prefsOptional \u003d storage.readUser();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        initializedUser \u003d prefsOptional.orElse(new User());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        logger.info(\"User data successfully loaded \" + initializedUser.getCards().size() + \" cards.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return initializedUser;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.info(\"Starting BrainTrain \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping BrainTrain ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            storage.saveUserPrefs(managementModel.getUserPrefs());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 60,
      "halcyoneee": 21,
      "-": 150,
      "DigiPie": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof Config)) { // this handles null as well"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return hashCode() \u003d\u003d o.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "DigiPie": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Taken from seedu.addressbook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String LOG_FILE \u003d \"braintrain.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private LogsCenter() { }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "-": 111,
      "DigiPie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ChangeThemeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.EditLessonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HistoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ListCardsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ListLessonsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.QuitLessonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ReloadLessonsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.SetLessonTestValuesCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when management mode is first entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_LESSON_COMMANDS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"\u003c\u003c Lesson View \u003e\u003e\\nYou can now use the following commands:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"1.\\t\" + StartCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Starts a lesson in Quiz mode.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"2.\\t\" + EditLessonCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Opens a lesson in Card View for editing.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"3.\\t\" + AddLessonCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Adds a lesson.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"4.\\t\" + DeleteLessonCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Deletes a lesson.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"5.\\t\" + ReloadLessonsCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Reloads all lessons from the data folder.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"6.\\t\" + ListLessonsCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Lists all lessons with full details.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"7.\\t\" + ChangeThemeCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Changes the theme.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"8.\\t\" + HistoryCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Lists all entered commands.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"9.\\t\" + HelpCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Shows user guide.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"10.\\t\" + ExitCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Exits the program.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_CARD_COMMANDS \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"\u003c\u003c Card View \u003e\u003e\\nYou can now use the following commands:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"1.\\t\" + QuitLessonCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Quits Card View and returns to Lesson View.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"2.\\t\" + SetLessonTestValuesCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Sets the 2 test values for the lesson\u0027s flashcards.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"3.\\t\" + AddCardCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Adds a card to the lesson.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"4.\\t\" + DeleteCardCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Deletes the card at the specified INDEX of the card list.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"5.\\t\" + ListCardsCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Lists all cards in the lesson with full details.\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"6.\\t\" + ChangeThemeCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Changes the theme.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"7.\\t\" + HistoryCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Lists all entered commands.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"8.\\t\" + HelpCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Shows user guide.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"9.\\t\" + ExitCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \": Exits the program.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when the command does not match any command patterns."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when the command format is incorrect."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format. \\n%1$s\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when an invalid index is supplied."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index: %1$d.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when user does not supply exactly 1 input for a specific"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * parameter."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_INVALID_INPUT \u003d \"Only one input for \u0027%1$s\u0027 is allowed.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when user supplies empty value."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Empty input for \u0027%1$s\u0027 is not allowed.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when attempting to close lesson when no lesson is opened."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_CARD_VIEW_COMMAND \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"This is a Card View command.\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"To open a lesson in Card View for editing, use this command:\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + EditLessonCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when attempting to use listLessons, addLesson,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * deleteLesson, editLesson and reloadLessons command while lesson is opened. Prompts user"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * to exitLesson first."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_LESSON_VIEW_COMMAND \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"This is a Lesson View command.\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"To exit Card View and return to Lesson View, use this command:\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + QuitLessonCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a constants-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Messages() { }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "DigiPie": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else if (isEarlyAccess) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(obj instanceof Version)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "DigiPie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private AppUtil() { }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 39,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CollectionUtil() { }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ConfigUtil() { }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CsvUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import com.opencsv.CSVReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Converts a List of String arrays to CSV and vice versa."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CsvUtil.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CsvUtil() { }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a list of String arrays from the given file or null object if the file is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Files are automatically assumed to be UTF-8 encoded, and BOMs are checked for and removed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static List\u003cString[]\u003e readCsvFile(Path filePath) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"csv file at [\" + filePath + \"] not found\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CSVReader csvReader;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e values;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        BufferedReader reader \u003d Files.newBufferedReader(filePath, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvReader \u003d new CSVReader(reader);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        values \u003d csvReader.readAll();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        //If file is empty and does not have UTF-8 BOM, it will be size 0"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (values.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"Invalid/empty file: \" + filePath.getFileName().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            //Extra handling of first line for UTF-8 BOM."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            String[] firstLine \u003d values.get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            if (firstLine[0].startsWith(\"\\uFEFF\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                firstLine[0] \u003d firstLine[0].substring(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                values.set(0, firstLine);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        //If the file is empty after removing the UTF-8 BOM, then it was empty to begin with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (values.size() \u003c\u003d 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            \u0026\u0026 values.get(0).length \u003c\u003d 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            \u0026\u0026 values.get(0)[0].isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"Invalid/empty file: \" + filePath.getFileName().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return values;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Saves the Csv object to the specified file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Defaults to UTF-8 csv by appending the UTF-8 BOM, \\uFEFF."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param data     cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Whether a file was successfully written to."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static boolean writeCsvFile(Path filePath, List\u003cString[]\u003e data) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (data.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"Attempted to write empty data.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CSVWriter csvWriter;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        BufferedWriter writer \u003d Files.newBufferedWriter(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        //write UTF-8 BOM"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        writer.write(\"\\uFEFF\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvWriter \u003d new CSVWriter(writer, CSVWriter.DEFAULT_SEPARATOR, CSVWriter.DEFAULT_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            \u0027\\\\\u0027, CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvWriter.writeAll(data);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvWriter.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 105,
      "DigiPie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Throws an {@link InstantiationError} when accessed to prevent instantiation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * via new, clone(), reflection and serialization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private FileUtil() { }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "DigiPie": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private JsonUtil() { }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "DigiPie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Throws an {@link InstantiationError} when accessed to prevent instantiation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * via new, clone(), reflection and serialization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private StringUtil() { }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks if a {@code List} of {@code String} has empty strings."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param strings the {@code List} of {@code String} to check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if there is one or more empty strings; false if all are non-empty"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static boolean hasEmptyStrings(List\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String s: strings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (s.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Truncates {@code s} if it exceed {@code maxLength} and returns it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param s the string to truncate if exceeding {@code maxLength}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param maxLength the maximum length of the string to be returned, if {@code s} exceeds"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code maxLength}, return a {@code substring(0, maxLength -3)} of {@code s} with \"...\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * appended."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the string if s \u003c maxLength, otherwise the substring of the string of maxLength length"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static String truncateString(String s, int maxLength) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String output \u003d s;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (s.length() \u003e maxLength) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            output \u003d s.substring(0, maxLength - 3) + \"...\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "DigiPie": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns either management or quiz mode dependent on isQuizDone"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    LogicManager.Mode getMode();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a list of lessons for UI display purposes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    List\u003cLesson\u003e getLessons();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    String getCurrentLessonName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Lesson getOpenedLesson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the current quiz card for UI MainPanel display"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizCard getCurrentQuizCard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the total correct out of total attempts for UI MainPanel display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    String getTotalCorrectAndTotalAttempts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the user prefs\u0027 theme."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    String getTheme();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the list of QuizCard from Quiz."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    List\u003cQuizCard\u003e getQuizCardList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 20,
      "lallanachang": 1,
      "-": 48,
      "DigiPie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.ChangeThemeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.parser.ManagementModeParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.parser.QuizModeParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final String CHECK_LOGS_MESSAGE \u003d \"\\nPlease check the logs for more information.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final String FAIL_SAVE_LESSONS_MESSAGE \u003d \"Failed to save some lessons.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final String FAIL_DELETE_LESSON_MESSAGE \u003d \"Failed to delete lesson: \\\"%1$s\\\".\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String FAIL_SAVE_USERPREFS_MESSAGE \u003d \"Failed to save user preference.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private final Storage storageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final ManagementModel managementModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final QuizModel quizModel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final ManagementModeParser managementModeParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final QuizModeParser quizModeParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Different mode that will show different UI and have access to different commands."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public enum Mode {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        MANAGEMENT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QUIZ"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public LogicManager(ManagementModel managementModel, QuizModel quizModel, Storage storageManager) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.storageManager \u003d storageManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.managementModel \u003d managementModel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizModel \u003d quizModel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        managementModeParser \u003d new ManagementModeParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModeParser \u003d new QuizModeParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Command command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (getMode() \u003d\u003d Mode.MANAGEMENT) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                command \u003d managementModeParser.parse(commandText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult \u003d command.execute(managementModel, history);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                switch (commandResult.getUpdateStorageType()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                case NONE:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                case SAVE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    int savedCount \u003d storageManager.saveLessonList(managementModel.getLessonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    int totalLessonCount \u003d managementModel.getLessons().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    if (savedCount \u003c totalLessonCount) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                        commandResult \u003d new CommandResult(FAIL_SAVE_LESSONS_MESSAGE + CHECK_LOGS_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                case LOAD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    Optional\u003cLessonList\u003e lessonListOptional \u003d storageManager.readLessonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    if (lessonListOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                        managementModel.setLessonList(lessonListOptional.get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                        commandResult \u003d new CommandResult(\"Failed to load lessons. Please check \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                            + \"the logs for more information.\" + CHECK_LOGS_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                        storageManager.deleteLesson(commandResult.getDeleteLessonName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                        commandResult \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                            new CommandResult(String.format(FAIL_DELETE_LESSON_MESSAGE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                                commandResult.getDeleteLessonName()) + CHECK_LOGS_MESSAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                command \u003d quizModeParser.parse(commandText);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult \u003d command.execute(quizModel, history);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                if (quizModel.isQuizDone()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    storageManager.saveUser(managementModel.getUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (command instanceof StartCommand) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                StartCommand startCommand \u003d (StartCommand) command;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                commandResult \u003d startCommand.executeQuiz(quizModel, history);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (command instanceof ChangeThemeCommand) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                ReadOnlyUserPrefs userPrefs \u003d managementModel.getUserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    storageManager.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    new CommandResult(FAIL_SAVE_USERPREFS_MESSAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (!commandText.isEmpty()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizModel.isQuizDone() ? Mode.MANAGEMENT : Mode.QUIZ;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getCurrentLessonName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return quizModel.getName();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return managementModel.getLessons();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson getOpenedLesson() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return managementModel.getOpenedLesson();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizModel.getCurrentQuizCard();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getTotalCorrectAndTotalAttempts() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizModel.getQuizTotalCorrectQuestions() + \" out of \" + quizModel.getQuizTotalAttempts();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cQuizCard\u003e getQuizCardList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizModel.isResultDisplay() ? quizModel.getQuizCardList() : null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return managementModel.getGuiSettings();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        managementModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return managementModel.getTheme();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 38,
      "halcyoneee": 63,
      "lallanachang": 3,
      "-": 62,
      "DigiPie": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "DigiPie": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Enum for all possible storage request types."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public enum UpdateStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        NONE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        SAVE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LOAD,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        DELETE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /** Quiz UI should be shown to the user. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final boolean showQuiz;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final boolean showCards;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private final UpdateStorage updateStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *  Name of lesson to be deleted. This would\u0027ve been done in another way for CS2103T but"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *  sadly there isn\u0027t time to rewrite logic."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private final String deleteLessonName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showQuiz \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.updateStorage \u003d UpdateStorage.NONE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.deleteLessonName \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showCards \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showCards) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showQuiz \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.updateStorage \u003d UpdateStorage.NONE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.deleteLessonName \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showCards \u003d showCards;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showQuiz, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.showQuiz \u003d showQuiz;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.updateStorage \u003d UpdateStorage.NONE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.deleteLessonName \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showCards \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public CommandResult (String feedbackToUser, UpdateStorage type) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showQuiz \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.updateStorage \u003d type;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.deleteLessonName \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showCards \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public CommandResult (String feedbackToUser, String deleteLessonName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.showQuiz \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.updateStorage \u003d UpdateStorage.DELETE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.deleteLessonName \u003d deleteLessonName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.showCards \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isShowQuiz() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return showQuiz;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean isShowCards() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return showCards;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public UpdateStorage getUpdateStorageType() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return updateStorage;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public String getDeleteLessonName() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return deleteLessonName;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 37,
      "halcyoneee": 9,
      "-": 69,
      "DigiPie": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Thrown to indicate that the execution of a command has failed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a CommandException with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cause the cause for the CommandException occurrence"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "DigiPie": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/AddCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_TEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which adds a {@link Card} to the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * opened {@link Lesson} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddCardCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addCard\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"TEST \" + PREFIX_TEST + \"TEST \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"[\" + PREFIX_TEST + \"TEST]... \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"[\" + PREFIX_HINT + \"HINT]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"Australia \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"Canberra \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"English \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_HINT + \"Starts with C\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Note: You need to specify at least 2 TEST values. HINT values are optional.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added card:\\n%1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user when attempting to add a card to the opened lesson, and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * the card does not have the same number of cores as the lesson\u0027s core headers."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_INVALID_CORE_COUNT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"The card has an invalid number of cores.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"It needs to have %1$d cores as specified by the lesson.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user if there is already a card in the lesson which is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"Duplicate card not allowed.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The card to be added when {@link #execute(Model, CommandHistory)} is called."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a {@link ManagementCommand} to add the specified {@link Card} to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * opened {@link Lesson} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param toAdd the {@link Card} to be added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public AddCardCommand(Card toAdd) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which adds a {@link Card} to the opened {@link Lesson} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if the {@code model} passed in is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (!mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new CommandException(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else if (mgtModel.openLessonHasCard(toAdd)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            mgtModel.addCardToOpenedLesson(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    String.format(MESSAGE_INVALID_CORE_COUNT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            mgtModel.getOpenedLessonCoreHeaders().size(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            mgtModel), e);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link AddCardCommand}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to add the same card."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link AddCardCommand}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to add the same card."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof AddCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCardCommand) other).toAdd));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/AddLessonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_TEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which adds a {@link Lesson} to the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@code List\u003cLesson\u003e lessons} loaded in memory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addLesson\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_NAME + \"NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"TEST \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"TEST \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"[\" + PREFIX_TEST + \"TEST]... \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"[\" + PREFIX_HINT + \"HINT]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_LESSON_NAME + \"Capitals of the world \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"Country \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"Capital \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_TEST + \"Language \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_HINT + \"Hint\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Note: You need to specify at least 2 TEST values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"By default, the first 2 TEST values (Country and Capital) will be tested.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Use the `\" + SetLessonTestValuesCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"` command to set the TEST values to be tested.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added lesson: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user if there is already a lesson with the same name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NAME \u003d \"A lesson with the name: %1$s already exists.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The lesson to be added when {@link #execute(Model, CommandHistory)} is called."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a {@link ManagementCommand} to add the specified {@link Lesson}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param toAdd the {@link Lesson} to be added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public AddLessonCommand(Lesson toAdd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which adds a {@link Lesson} to the {@code List\u003cLesson\u003e lessons}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * loaded in memory."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if the {@code model} passed in is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String lessonName \u003d toAdd.getName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else if (mgtModel.hasLessonWithName(lessonName)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_NAME, lessonName));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        mgtModel.addLesson(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandResult.UpdateStorage.SAVE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link AddLessonCommand}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to add the same lesson."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link AddLessonCommand}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to add the same lesson."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof AddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddLessonCommand) other).toAdd));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "DigiPie": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ChangeThemeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * This implements a {@link ManagementCommand} which changes the theme."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class ChangeThemeCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"changeTheme\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the theme from light to dark vice-versa.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Changed theme to %1$s theme.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the command which changes the theme."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @throws CommandException if the {@code model} passed in is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String fullThemePath \u003d mgtModel.changeTheme();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String theme \u003d fullThemePath.contains(\"Light\") ? \"light\" : \"dark\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, theme));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/DeleteCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which deletes a {@link Card} from the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * opened {@link Lesson} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteCardCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteCard\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \": Deletes the card at the specified INDEX of the card list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"To view the card list, enter \\\u0027listCards\\\u0027.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Parameter: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted card.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the card to be deleted when {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is called."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates an DeleteCardCommand to delete the specified {@link Card}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param targetIndex the index of the {@link Card} to be deleted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public DeleteCardCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which deletes a {@link Card} from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if the {@code model} passed in is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int toDeleteIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (!mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new CommandException(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            mgtModel.deleteCardFromOpenedLesson(toDeleteIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    targetIndex.getOneBased()), e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link DeleteCardCommand}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to delete the same card."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link DeleteCardCommand}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to delete the same card."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 targetIndex.getZeroBased() \u003d\u003d ((DeleteCardCommand) other).targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/DeleteLessonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which deletes a {@link Lesson} from the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@code List\u003cLesson\u003e lessons} loaded in memory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteLesson\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \": Deletes the lesson at the specified INDEX of the lesson list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"To view the lesson list, enter \\\u0027listLessons\\\u0027.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Parameter: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted lesson: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the lesson to be deleted when {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is called."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates an DeleteLessonCommand to delete the specified {@link Lesson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param targetIndex the index of the {@link Lesson} to be deleted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public DeleteLessonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which deletes a {@link Lesson} from the {@code List\u003cLesson\u003e lessons}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * loaded in memory."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if invalid index supplied or if the {@code model} passed in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int toDeleteIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String lessonName \u003d mgtModel.getLesson(toDeleteIndex).getName();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            mgtModel.deleteLesson(toDeleteIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, lessonName), lessonName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    targetIndex.getOneBased()), e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link DeleteLessonCommand}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to delete the same lesson."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link DeleteLessonCommand}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to delete the same lesson."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof DeleteLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 targetIndex.getZeroBased()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u003d\u003d ((DeleteLessonCommand) other).targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "DigiPie": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/EditLessonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_COMMANDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which opens a {@link Lesson} in Card View"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * for editing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command. The opening of the {@link Lesson} is carried out in the {@link ManagementModel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class EditLessonCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \": Opens the lesson at the specified INDEX in Card View for editing.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Parameter: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Note: The INDEX of the lesson can be found by using the `listLessons` command.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Editing lesson: %1$s\\n\" + MESSAGE_CARD_COMMANDS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the lesson to be opened when {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is called."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a {@link ManagementCommand} to open the specified {@link Lesson}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param targetIndex the index of the {@link Lesson} to be opened"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public EditLessonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which opens a {@link Lesson} in the {@code List\u003cLesson\u003e lessons}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * loaded in memory."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if invalid index supplied or if the {@code model} passed in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int toOpenIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String lessonName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new CommandException(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessonName \u003d mgtModel.openLesson(toOpenIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    String.format(MESSAGE_INVALID_INDEX, targetIndex.getOneBased())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            + \"\\n\" + MESSAGE_USAGE, e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, lessonName, true));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link EditLessonCommand}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to open the same lesson."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link EditLessonCommand}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * attempting to open the same lesson."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof EditLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 targetIndex.getZeroBased() \u003d\u003d ((EditLessonCommand) other).targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting BrainTrain as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 12,
      "DigiPie": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows user guide.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "DigiPie": 17,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class HistoryCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 11,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ListCardsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which lists all {@link Card} objects"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * in the opened {@link Lesson} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ListCardsCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listCards\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all cards with full details.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed %1$s card(s):\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user if there are no cards found and hence no listing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_NO_CARDS \u003d \"No cards found.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a list of {@link Card} objects for display purposes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cards the list of {@link Card} objects"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a String representing {@code cards}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String buildList(List\u003cString\u003e coreHeaders, List\u003cString\u003e optionalHeaders,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (cards.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return MESSAGE_NO_CARDS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            builder.append(String.format(MESSAGE_SUCCESS, cards.size()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            builder.append(\"[No.]\").append(coreHeaders).append(optionalHeaders).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            for (Card card : cards) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                builder.append(\"[ \").append(i).append(\" ]\").append(card.toPrint()).append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which lists all {@link Card} objects in the opened {@link Lesson}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if the {@code model} passed in is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (!mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new CommandException(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e(mgtModel.getOpenedLessonCards());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            List\u003cString\u003e coreHeaders \u003d mgtModel.getOpenedLessonCoreHeaders();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            List\u003cString\u003e optionalHeaders \u003d mgtModel.getOpenedLessonOptionalHeaders();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new CommandResult(buildList(coreHeaders, optionalHeaders, cards));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CARDS, e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link ListCardsCommand}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link ListCardsCommand} objects are the same."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link ListCardsCommand}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link ListCardsCommand} objects are the same."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof ListCardsCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ListLessonsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which lists all {@link Lesson} objects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * in the {@code List\u003cLesson\u003e lessons} loaded in memory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ListLessonsCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listLessons\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all lessons with full details.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed %1$s lesson(s):\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user if there are no lessons found and hence no listing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_NO_LESSONS \u003d \"No lesson found.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a list of {@link Lesson} objects for display purposes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param lessons the list of lessons"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a String representing {@code lessons}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String buildList(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (lessons.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return MESSAGE_NO_LESSONS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            builder.append(String.format(MESSAGE_SUCCESS, lessons.size()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                builder.append(i).append(\".\\t\").append(lesson.getName()).append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which lists all {@link Lesson} objects in the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code List\u003cLesson\u003e lessons} loaded in memory."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if the {@code model} passed in is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e(mgtModel.getLessons());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new CommandResult(buildList(lessons));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link ListLessonsCommand}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link ListLessonsCommand} objects are the same."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link ListLessonsCommand}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link ListLessonsCommand} objects are the same."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof ListLessonsCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ManagementCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a management command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public abstract class ManagementCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_EXPECTED_MODEL \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"Expected ManagementModel but received QuizModel instead.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks that the specified object reference is {@link ManagementModel}. This"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * method is designed primarily for doing parameter validation for methods using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link ManagementModel}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param obj the object reference to check if {@link ManagementModel}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return {@code obj} if {@link ManagementModel}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if {@code obj} is not {@link ManagementModel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    protected static ManagementModel requireManagementModel(Object obj) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(obj instanceof ManagementModel)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return (ManagementModel) obj;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/QuitLessonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_COMMANDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which saves changes made to the {@link Lesson}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * opened in Card View, before returning to Lesson View."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuitLessonCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \": Quits Card View and returns to Lesson View.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"\\nNote: Changes made in Card View will be saved.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Changes saved for lesson: %1$s\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + MESSAGE_LESSON_COMMANDS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which closes the opened {@link Lesson} in the {@code List\u003cLesson\u003e lessons}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * loaded in memory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if there is no opened lesson and hence no need to close lesson or"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * if the {@code model} passed in is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String lessonName \u003d mgtModel.closeLesson();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, lessonName), CommandResult.UpdateStorage.SAVE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CARD_VIEW_COMMAND, e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link QuitLessonCommand}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link QuitLessonCommand} objects are the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link QuitLessonCommand}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link QuitLessonCommand} objects are the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (other instanceof QuitLessonCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "DigiPie": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/ReloadLessonsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * This implements a {@link ManagementCommand} which loads all lessons from file again."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class ReloadLessonsCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reload\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            + \": Reloads all lessons from the data folder.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Reloaded all lessons from the data folder.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Executes the command which reloads the lessons from file into memory."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandResult.UpdateStorage.LOAD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also an {@link ReloadLessonsCommand}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * attempting to reload lessons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also an {@link ReloadLessonsCommand}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * attempting to reload lessons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                || (other instanceof ReloadLessonsCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 52,
      "DigiPie": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/SetLessonTestValuesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link ManagementCommand} which sets the 2 test values to be tested for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * the opened {@link Lesson} in the {@code List\u003cLesson\u003e lessons} loaded in memory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link ManagementModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class SetLessonTestValuesCommand extends ManagementCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The word a user must enter to call this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Instructions on command usage and parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \": Sets the 2 test values to be tested.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Parameters: INDEX INDEX (both starting from 1)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 3\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"Note: When the lesson is started in quiz mode, these 2 values will be tested.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Feedback message displayed to the user upon successful execution of this command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"Updated lesson\u0027s tested values.\\nTested value #1: %1$s\\nTested value #2: %2$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The question index to be set when {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is called."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Index questionIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The answer index to be set when {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is called."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Index answerIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates an SetLessonTestValuesCommand to set the question and answer core indices of"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * the specified {@link Lesson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param questionIndex the index of the {@link Lesson} to be deleted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answerIndex ew"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public SetLessonTestValuesCommand(Index questionIndex, Index answerIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.answerIndex \u003d answerIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command which sets the question and answer core indices of"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * a {@link Lesson} in the {@code List\u003cLesson\u003e lessons} loaded in memory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model the {@link ManagementModel} the command should operate on."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@link CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if invalid index supplied or if the {@code model} passed in"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * is not a {@link ManagementModel}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Can only set question and answer when in opened lesson"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            int qIndex \u003d questionIndex.getZeroBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            int aIndex \u003d answerIndex.getZeroBased();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            mgtModel.setOpenedLessonTestValues(qIndex, aIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            List\u003cString\u003e cores \u003d mgtModel.getOpenedLessonCoreHeaders();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String question \u003d cores.get(qIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String answer \u003d cores.get(aIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, question, answer));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(e.getMessage(), e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if {@code other} is the same object or if it is also a"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link SetLessonTestValuesCommand} attempting to set the same 2 test values as question and answer."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the other object to compare this object to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if {@code other} is the same object or if it is also a"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link SetLessonTestValuesCommand} attempting to set the same 2 test values as question and answer."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof SetLessonTestValuesCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        SetLessonTestValuesCommand otherCommand \u003d (SetLessonTestValuesCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return (otherCommand.answerIndex.getZeroBased() + otherCommand.questionIndex.getZeroBased()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \u003d\u003d questionIndex.getZeroBased() + answerIndex.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/management/StartCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.requireManagementModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_COUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_MODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.session.SrsCardsManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * This implements a {@link QuizCommand} which starts a {@link Quiz}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * It requires a {@link QuizModel} to be passed into the {@link #execute(Model, CommandHistory)}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class StartCommand extends QuizCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"LESSON_INDEX \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + \"[\" + PREFIX_START_COUNT + \"COUNT] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_START_MODE + \"MODE...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + PREFIX_START_COUNT + \"10 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            + PREFIX_START_MODE + \"LEARN\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Starting new quiz\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final String MESSAGE_LESSON \u003d \"\\nCurrent lesson: \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final String MESSAGE_COUNT \u003d \"Not enough cards in current lesson.\\nSet the count to the maximum\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \" number for you by default.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Constructs a {@link QuizCommand} to start the specified {@link Quiz}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param session to be opened."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public StartCommand(Session session) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session getSession() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Executes the command and starts the new {@link Quiz}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return messages to show whether the quiz starts correctly."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult executeQuiz(QuizModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModel quizModel \u003d requireQuizModel(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (session.getCount() \u003e session.getSrsCards().size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            session.setCount(session.getSrsCards().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            sb.append(MESSAGE_COUNT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            sb.append(MESSAGE_LESSON + session.getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            sb.append(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            sb.append(MESSAGE_LESSON + session.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e quizCards \u003d session.generateSession();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Quiz quiz \u003d new Quiz(quizCards, session.getMode());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        quizModel.init(quiz, session);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new CommandResult(sb.toString(), true, false, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModel mgtModel \u003d requireManagementModel(model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (mgtModel.isThereOpenedLesson()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        LessonList lessonList \u003d mgtModel.getLessonList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d lessonList.getLessons();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (this.session.getLessonIndex() \u003e lessons.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new CommandException(\"Lesson index is out of range. Please try a smaller one.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (this.session.getLessonIndex() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new CommandException(\"Lesson index is out of range. Please try a larger one.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Lesson lesson \u003d lessons.get(this.session.getLessonIndex() - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        HashMap\u003cInteger, CardSrsData\u003e cardData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c lesson.getCardCount(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentHashcode \u003d lesson.getCards().get(i).hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (mgtModel.getCardSrsData(currentHashcode) !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                cardData.put(currentHashcode, mgtModel.getCardSrsData(currentHashcode));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager generateManager \u003d new SrsCardsManager(lesson, cardData);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (this.session.getMode() \u003d\u003d QuizMode.PREVIEW) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            this.session \u003d new Session(lesson.getName(), this.session.getCount(), this.session.getMode(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    generateManager.preview());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        } else if (this.session.getMode() \u003d\u003d QuizMode.DIFFICULT) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            List\u003cSrsCard\u003e srsCards \u003d generateManager.previewDifficult();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (srsCards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                throw new CommandException(\"There is no difficult card in this lesson.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                this.session \u003d new Session(lesson.getName(), this.session.getCount(), this.session.getMode(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        srsCards);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        } else if (this.session.getMode() \u003d\u003d QuizMode.REVIEW) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            List\u003cSrsCard\u003e srsCards \u003d generateManager.sort();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (srsCards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                throw new CommandException(\"There is no card for review since all cards in current lesson\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        + \" do not reach the due date.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                this.session \u003d new Session(lesson.getName(), this.session.getCount(), this.session.getMode(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        srsCards);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        } else if (this.session.getMode() \u003d\u003d QuizMode.LEARN) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            List\u003cSrsCard\u003e srsCards \u003d generateManager.learn();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (srsCards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                throw new CommandException(\"There is no more new card to learn in this lesson.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                this.session \u003d new Session(lesson.getName(), this.session.getCount(), this.session.getMode(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        srsCards);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 29,
      "lallanachang": 93,
      "DigiPie": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizAnswerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Processes user answer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizAnswerCommand extends QuizCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"answer\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": * any character except word that starts with \\\\\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_CORRECT \u003d \"Your answer is correct.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_WRONG_ONCE \u003d \"Your answer %1$s is wrong, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            + \"you have one more chance to answer it.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_WRONG \u003d \"Your answer is %1$s but the correct answer is %2$s.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed all the questions in this quiz.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Press Enter to exit quiz mode.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel quizModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizCard card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isCurrentCardWrong;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizAnswerCommand(String answer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizModel \u003d requireQuizModel(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.card \u003d quizModel.getCurrentQuizCard();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isCurrentCardWrong \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (quizModel.isResultDisplay()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            endQuiz();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new CommandResult(\"\", true, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (card.isWrongTwice() || card.getQuizMode() !\u003d QuizMode.PREVIEW) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(handleCurrentCardAnswer());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!isCurrentCardWrong) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            String result \u003d handleIfCardLeft();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(sb.toString(), true, false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Handles next available card or end the quiz."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String handleIfCardLeft () {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizModel.hasCardLeft() ? handleNextCard() : handleDisplayResult();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns message dependent on wrong or correct answer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String handleCurrentCardAnswer() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!quizModel.updateTotalAttemptsAndStreak(card.getIndex(), answer)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return handleWrongAnswer();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns prompt message with user answer, if user got it wrong twice"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * returns prompt message with the correct answer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String handleWrongAnswer() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isCurrentCardWrong \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!card.isWrongTwice()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return String.format(MESSAGE_WRONG_ONCE, answer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return String.format(MESSAGE_WRONG, answer, card.getAnswer());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Gets next card and returns nothing to be displayed in command result box."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String handleNextCard() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Updates user data when quiz end."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void endQuiz() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.setResultDisplay(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (card.isWrongTwice() || card.getQuizMode() !\u003d QuizMode.PREVIEW) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizModel.updateUserProfile(quizModel.end());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets true to display a list of quiz card with their stats."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String handleDisplayResult() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            || (other instanceof QuizAnswerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u0026\u0026 answer.equals(((QuizAnswerCommand) other).answer)); // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 119,
      "lallanachang": 1,
      "DigiPie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a quiz command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public abstract class QuizCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String MESSAGE_EXPECTED_MODEL \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \"Expected QuizModel but received ManagementModel instead.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks that the specified object reference is {@link QuizModel}. This"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * method is designed primarily for doing parameter validation for methods using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link QuizModel}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param obj the object reference to check if {@link QuizModel}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return {@code obj} if {@link QuizModel}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws CommandException if {@code obj} is not {@link QuizModel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    protected static QuizModel requireQuizModel(Object obj) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException will be thrown if and only if LogicManager passes in the incorrect Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // In other words, only incorrect code will result in a CommandException being thrown"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(obj instanceof QuizModel)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new CommandException(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return (QuizModel) obj;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizDifficultCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Labels a card as difficult or not difficult."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizDifficultCommand extends QuizCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\\\\difficult\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Label this current question as difficult.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This question is labelled as %1$s.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModel quizModel \u003d requireQuizModel(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d quizModel.getCurrentQuizCard();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (quizModel.toggleIsCardDifficult(card.getIndex())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, \"difficult\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, \"not difficult\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 27,
      "DigiPie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizHelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Formats full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizHelpCommand extends QuizCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\\\\help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_QUIZ_USAGE \u003d QuizAnswerCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"\\n\" + QuizDifficultCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"\\n\" + QuizHelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"\\n\" + QuizHintCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"\\n\" + QuizQuitCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"\\n\" + QuizStatusCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(MESSAGE_QUIZ_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 24,
      "DigiPie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizHintCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Displays a list of hints of the current card."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizHintCommand extends QuizCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\\\\hint\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays hint(s) for this card.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Hints: %1$s\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ONE \u003d \"Hint: %1$s\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"No hint for this card.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel quizModel \u003d requireQuizModel(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cString\u003e hints \u003d quizModel.getOpt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (hints.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (hints.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_ONE, hints.toString()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, hints.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizQuitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Force quits quiz while it is still not yet completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizQuitCommand extends QuizCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\\\\quit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Force quits this quiz, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"only progress of attempted questions will be saved.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You attempted %1$s question(s) and your progress has been saved.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Press Enter to exit quiz mode.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel quizModel \u003d requireQuizModel(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e nonZeroAttemptsResult \u003d quizModel.end();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (nonZeroAttemptsResult.size() !\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizModel.updateUserProfile(nonZeroAttemptsResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, nonZeroAttemptsResult.size()), true, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizStatusCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Displays the total attempts, streak and progress of the current session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizStatusCommand extends QuizCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\\\\status\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        COMMAND_WORD + \": Shows the total attempts, streak and progress for this quiz.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total attempts: %1$s\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Total correct answer: %2$s\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \"Current progress: %3$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModel quizModel \u003d requireQuizModel(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, quizModel.getQuizTotalAttempts(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizModel.getQuizTotalCorrectQuestions(), quizModel.getCurrentProgress()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 27,
      "DigiPie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCardParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_TEST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link AddCardCommand} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddCardParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@link AddCardCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * and returns an {@link AddCardCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public AddCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TEST, PREFIX_HINT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TEST)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e coreHeaders \u003d new ArrayList\u003c\u003e(argMultimap.getAllValues(PREFIX_TEST));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e optHeaders \u003d new ArrayList\u003c\u003e(argMultimap.getAllValues(PREFIX_HINT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card card \u003d new Card(coreHeaders, optHeaders);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new AddCardCommand(card);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param argumentMultimap the mapping of prefixes to their respective arguments"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param prefixes the prefixes to check if present"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if prefixes are present in {@see argumentMultimap}; false otherwise"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddLessonParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.util.StringUtil.hasEmptyStrings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_TEST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link AddLessonCommand} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonParser implements Parser\u003cAddLessonCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks if the supplied prefixes only have 1 supplied value each."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param argMultimap the multimap to check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param prefixes the prefixes in the multimap to check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if specified prefixes does not have exactly one value supplied"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void requireOnlyOneValue(ArgumentMultimap argMultimap, Prefix ... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (!argMultimap.hasExactlyOneValue(prefix)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_INPUT, prefix));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@link AddLessonCommand}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * and returns an {@link AddLessonCommand} object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public AddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LESSON_NAME, PREFIX_TEST, PREFIX_HINT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e testValues \u003d argMultimap.getAllValues(PREFIX_TEST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LESSON_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || testValues.size() \u003c 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Name can only be specified once"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireOnlyOneValue(argMultimap, PREFIX_LESSON_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_LESSON_NAME).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e coreHeaders \u003d new ArrayList\u003c\u003e(testValues);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e optHeaders \u003d new ArrayList\u003c\u003e(argMultimap.getAllValues(PREFIX_HINT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Name cannot be empty, strings in coreHeaders cannot be empty"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // and if optionalHeaders isn\u0027t empty, strings it mustn\u0027t be empty"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_EMPTY_INPUT, PREFIX_LESSON_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else if (hasEmptyStrings(coreHeaders)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_EMPTY_INPUT, PREFIX_TEST));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else if (hasEmptyStrings(optHeaders)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_EMPTY_INPUT, PREFIX_HINT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d new Lesson(name, coreHeaders, optHeaders);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new AddLessonCommand(lesson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param argumentMultimap the mapping of prefixes to their respective arguments"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param prefixes the prefixes to check if present"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if prefixes are present in {@see argumentMultimap}; false otherwise"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param prefix the prefix to check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if and only if one of prefix is available; false otherwise"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasExactlyOneValue(Prefix prefix) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return getAllValues(prefix).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "DigiPie": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 2,
      "-": 142,
      "DigiPie": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCardParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteCardCommand} object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteCardParser implements Parser\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link DeleteCardCommand} and returns an {@link DeleteCardCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new DeleteCardCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            DeleteCardCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "DigiPie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteLessonParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteLessonCommand} object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonParser implements Parser\u003cDeleteLessonCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link DeleteLessonCommand} and returns an {@link DeleteLessonCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public DeleteLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new DeleteLessonCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            DeleteLessonCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ManagementModeParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.ChangeThemeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.EditLessonCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ListCardsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ListLessonsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.QuitLessonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.management.ReloadLessonsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.SetLessonTestValuesCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModeParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        //            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // TODO use parser here"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case AddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new AddLessonParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case DeleteLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new DeleteLessonParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case ListLessonsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new ListLessonsCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case EditLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new OpenLessonParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case QuitLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new QuitLessonCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case SetLessonTestValuesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new SetTestParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new AddCardParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new DeleteCardParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        case ListCardsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new ListCardsCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        case ReloadLessonsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return new ReloadLessonsCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case ChangeThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new ChangeThemeCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 9,
      "halcyoneee": 52,
      "lallanachang": 1,
      "DigiPie": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenLessonParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.EditLessonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link EditLessonCommand} object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class OpenLessonParser implements Parser\u003cEditLessonCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link EditLessonCommand} and returns an {@link EditLessonCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public EditLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new EditLessonCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            EditLessonCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "DigiPie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Parses a string{@code count} into a integer{@code count}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @throws ParseException if the count is not a number or is an integer larger than MAX_VALUE."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static int parseCount(String count) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireNonNull(count);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedCount \u003d count.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        boolean numeric \u003d trimmedCount.matches(\"\\\\d+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (numeric) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                int validCount \u003d Integer.parseInt(trimmedCount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                if (validCount \u003c 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    throw new ParseException(\"Count should not be less than 1 in a single lesson.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    return validCount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        \"Count of number should be a valid integer less than MAX_INTEGER (2147483647).\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new ParseException(\"Count of number should be a valid integer less than MAX_INTEGER (2147483647).\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Parses a String{@code mode} into a Quiz.mode{@code  mode}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @throws ParseException if the mode name is not in the enum."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static QuizMode parseMode(String mode) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedMode \u003d mode.trim().toUpperCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (\"LEARN\".equals(trimmedMode) || \"PREVIEW\".equals(trimmedMode)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                || \"REVIEW\".equals(trimmedMode) || \"DIFFICULT\".equals(trimmedMode)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return QuizMode.valueOf(trimmedMode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new ParseException(\"Mode of quiz is not acceptable. You can choose from: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    + \"learn, preview, review and difficult.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "lallanachang": 30,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * E.g. \u0027n/\u0027 in \u0027addLesson n/Capitals of the world c/Country c/Capital o/Hint\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/QuizModeParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAnswerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizDifficultCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizHelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizHintCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizQuitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStatusCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Parses user input in QuizMode"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizModeParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\\\\\.*)|(?\u003canswer\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static Matcher matcher;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Checks if userInput is valid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param userInput from commandBox"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return the correct parser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d matcher.group(\"answer\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (commandWord !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return parseCommand(commandWord);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return parseAnswer(answer);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Command parseAnswer(String answer) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param commandWord full user input string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Command parseCommand(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case QuizDifficultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new QuizDifficultCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case QuizHelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new QuizHelpCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case QuizHintCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new QuizHintCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case QuizQuitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new QuizQuitCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case QuizStatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return new QuizStatusCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 65,
      "DigiPie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetTestParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.SetLessonTestValuesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Parses input arguments and creates a new {@link SetLessonTestValuesCommand} object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class SetTestParser implements Parser\u003cSetLessonTestValuesCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link SetLessonTestValuesCommand} and returns an {@link SetLessonTestValuesCommand} object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public SetLessonTestValuesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e testValues \u003d Arrays.asList(args.trim().split(\" \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Only allow 2 inputs - can only set 2 values to be tested"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (testValues.size() \u003e 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String testValue \u003d testValues.get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Index questionIndex \u003d ParserUtil.parseIndex(testValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            testValue \u003d testValues.get(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Index answerIndex \u003d ParserUtil.parseIndex(testValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Only allow 2 distinct inputs - must set 2 values to be tested"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (questionIndex.equals(answerIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new SetLessonTestValuesCommand(questionIndex, answerIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                            SetLessonTestValuesCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_COUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_START_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * Parses user input when start a session quiz."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class StartCommandParser implements Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * and returns an StartCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Checks if userInput is valid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param args from commandBox"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return the correct parser as a {@link Session}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public StartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String[] splited \u003d args.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_START_COUNT, PREFIX_START_MODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START_MODE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            index \u003d Integer.parseInt(splited[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int count \u003d ParserUtil.parseCount(argMultimap.getValue(PREFIX_START_COUNT)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            .orElse(String.valueOf(Session.CARD_COUNT_MINIMUM)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizMode mode \u003d ParserUtil.parseMode(argMultimap.getValue(PREFIX_START_MODE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new Session(index, count, mode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new StartCommand(session);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Returns true if none of the prefixes contains empty values in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param argumentMultimap the mapping of prefixes to their respective arguments"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param prefixes the prefixes to check if present"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return true if prefixes are present in {@see argumentMultimap}; false otherwise"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 7,
      "lallanachang": 47,
      "DigiPie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Syntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class Syntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Used by Lesson commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_LESSON_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Used by Card and Lesson commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_TEST \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_HINT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Used by Start command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_START_COUNT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Prefix PREFIX_START_MODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a constants-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Syntax() { }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Path getLessonListFolderPath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Path getUserFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    String getTheme();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 4,
      "halcyoneee": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String LIGHT_THEME \u003d \"view/LightTheme.css\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String DARK_THEME \u003d \"view/DarkTheme.css\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path lessonListFolderPath \u003d Paths.get(\"lessons\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path userFilePath \u003d Paths.get(\"userdata\", \"savedata.csv\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String theme \u003d LIGHT_THEME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        setLessonListFolderPath(newUserPrefs.getLessonListFolderPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        setUserFilePath(newUserPrefs.getUserFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        setTheme(newUserPrefs.getTheme());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getLessonListFolderPath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonListFolderPath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonListFolderPath(Path lessonListFolderPath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(lessonListFolderPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessonListFolderPath \u003d lessonListFolderPath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getUserFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return userFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setUserFilePath(Path userFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(userFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.userFilePath \u003d userFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return theme;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setTheme(String newTheme) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(newTheme);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.theme \u003d newTheme;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String toggleTheme() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return theme.equals(LIGHT_THEME) ? DARK_THEME : LIGHT_THEME;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return this.hashCode() \u003d\u003d o.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return Objects.hash(guiSettings, lessonListFolderPath, userFilePath, theme);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + lessonListFolderPath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        sb.append(\"\\nLocal user file location : \" + userFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"\\nTheme location : \" + theme);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 24,
      "halcyoneee": 17,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Card.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a flash card which minimally contains {@value #MIN_CORE_COUNT} {@link java.lang.String} objects in"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@link #cores} and 0 or more {@link java.lang.String} objects in {@link #optionals}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eA basic {@code Card} will have 2 {@link java.lang.String} objects in {@link #cores} representing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Question and Answer, and optionally have 1 {@link java.lang.String} object in {@link #optionals} representing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Hint."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Class fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A {@code Card} requires at least {@value #MIN_CORE_COUNT} cores to be testable (e.g. Question and Answer)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final int MIN_CORE_COUNT \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Two {@code Card} objects with the same sets and order of {@link #cores} and {@link #optionals} will have"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * the same {@code hashCode}. See {@link #generateHashCode()}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int hashCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Cores are fields a {@code Card} must have. A {@code Card} requires at least {@value #MIN_CORE_COUNT} cores"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * to be testable (e.g. Question and Answer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ArrayList\u003cString\u003e cores;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Optionals are fields a {@code Card} can have. A {@code Card} can have 0 or more optionals (e.g. Hint)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ArrayList\u003cString\u003e optionals;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionals {@link #optionals} a {@code Card} can have."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Card(List\u003cString\u003e cores, List\u003cString\u003e optionals) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(cores, optionals);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.addAll(cores);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals.addAll(optionals);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Card} which represents a flash card."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cores {@link #cores} a {@code Card} must have."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Card(List\u003cString\u003e cores) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(cores);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.addAll(cores);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the list of {@link #cores}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of {@link #cores}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ArrayList\u003cString\u003e getCores() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cores;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the list of {@link #optionals}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of {@link #optionals}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ArrayList\u003cString\u003e getOptionals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return optionals;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the existing list in {@link #cores} with newCores."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newCores the new list of {@link #cores}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setCores(List\u003cString\u003e newCores) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(newCores);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores.addAll(newCores);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the existing list in {@link #optionals} with newOptionals."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newOptionals the new list of {@link #optionals}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOptionals(List\u003cString\u003e newOptionals) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(newOptionals);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals.addAll(newOptionals);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the core at the specified position in {@link #cores}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the core to return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the core at the specified position in {@link #cores}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getCore(int index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cores.get(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the optional at the specified position in {@link #optionals}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the optional to return"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the optional at the specified position in {@link #optionals}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getOptional(int index) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return optionals.get(index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the core at the specified position in {@link #cores} with newCore."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the core to replace"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newCore core to be stored at the specified position in {@link #cores}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setCore(int index, String newCore) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores.set(index, newCore);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Replaces the optional at the specified position in {@link #optionals} with newOptional."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the optional to replace"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newOptional optional to be stored at the specified position in {@link #optionals}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOptional(int index, String newOptional) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals.set(index, newOptional);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        hashCode \u003d generateHashCode();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Generates a hash code using {@link #cores} and {@link #optionals} as input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Two {@code Card} objects with the \u003cb\u003esame set and order\u003c/b\u003e of {@link #cores} and {@link #optionals}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * will have the same hash code."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return {@link #hashCode} generated using {@link #cores} and {@link #optionals} as input"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int generateHashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Objects.hash(cores, optionals);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(\"Cores: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(getCores())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(\"\\nOptionals: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(getOptionals());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a printable format of the Card which is displayed to the user."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the printable format of the Card."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String toPrint() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(getCores()).append(getOptionals());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return hashCode;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if both are {@code Card} objects, and are the same object or have the same {@link #hashCode}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other object to be compared for equality with this {@code Card}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if the specified object is a {@code Card} identical to this {@code Card}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return otherCard.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 4,
      "DigiPie": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.model.card.Card.MIN_CORE_COUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a lesson which contains multiple flash cards and can be loaded into Quiz"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * for testing. It stores multiple {@link Card} objects, and also {@link #coreHeaders} and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@link #optionalHeaders} which are headers for the core and optional fields in the {@link Card} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eIt also stores {@link #questionCoreIndex} and {@link #answerCoreIndex} which identifies the indices"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * of the question and answer in the {@link Card} objects\u0027 list of cores respectively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eA basic {@code Lesson} will have {@link Card} objects, where every {@link Card} could have"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * 2 {@link java.lang.String} objects in their list of cores representing question and answer, and optionally"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * have 1 {@link java.lang.String} object in their list of optionals representing hint."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003eThe lesson\u0027s {@link #coreHeaders} could store \"Country\" and \"Capital\" to identify what the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * questions and answers of the {@link Card} objects are. The lesson\u0027s {@link #optionalHeaders} could store"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * \"Starts with\" to identify what the hints of the {@link Card} objects are."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Static fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final int DEFAULT_INDEX_QUESTION \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final int DEFAULT_INDEX_ANSWER \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_NAME \u003d \"Invalid name supplied.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"Invalid index: %1$s.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_CORE_SIZE \u003d \"Invalid number of core headers supplied.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_CORE_SIZE_MISMATCH \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        \"The cores of the card to be added do not match the core headers of this lesson.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The name of the lesson which is displayed to the user. It is not used by {@link #equals(Object)}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The headers for the cores of every {@link Card} object in this {@code lesson}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * These headers describe the core values in the {@link Card} objects."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All {@link Card} objects added to this lesson must have the same number of cores as the number of"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * core headers."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e coreHeaders;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The headers for the optionals of every {@link Card} object in this {@code lesson}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * These headers describe the optional values in the {@link Card} objects."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e optionalHeaders;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the question in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private int questionCoreIndex \u003d DEFAULT_INDEX_QUESTION;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the answer in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private int answerCoreIndex \u003d DEFAULT_INDEX_ANSWER;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The list of {@link Card} objects."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private List\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Controls the visibility of optionals. If {@code isVisibleOptionals[i]} is set to {@code true},"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * the optional at index {@code i} of every {@see Card} object\u0027s list of optionals is shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * If set to {@code false}, all {@see Card} object\u0027s optionals at index {@code i} is hidden."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private boolean[] isVisibleOptionals;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Lesson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name name of the {@code lesson}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param coreHeaders all {@link Card} objects added to this lesson must have cores corresponding to"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * these headers."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionalHeaders if the {@code i}th element of {@link #isVisibleOptionals} is set to true,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        the {@code i}th element of optionalHeaders is shown alongside the {@code i}th"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        element of every {@link Card} objects\u0027 list of optionals, if it is available."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson(String name, List\u003cString\u003e coreHeaders, List\u003cString\u003e optionalHeaders) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(coreHeaders);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setCoreHeaders(coreHeaders);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setOptionalHeaders(optionalHeaders);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders !\u003d null \u0026\u0026 optionalHeaders.size() \u003e 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            isVisibleOptionals \u003d new boolean[optionalHeaders.size()];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Lesson}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name name of the {@code lesson}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param noOfCoreHeaders specifies the number of core headers in {@code headers}. Used to separate core"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        headers from optional headers."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param headers contains core and optional headers. All {@link Card} objects added to this lesson must"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                have cores corresponding to the core headers specified."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson(String name, int noOfCoreHeaders, List\u003cString\u003e headers) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireAllNonNull(headers);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e cores;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e optionals;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores \u003d headers.subList(0, noOfCoreHeaders);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int optionalStart \u003d noOfCoreHeaders;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int optionalEnd \u003d headers.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (noOfCoreHeaders \u003d\u003d headers.size()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            optionals \u003d headers.subList(optionalStart, optionalEnd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setCoreHeaders(cores);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setOptionalHeaders(optionals);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionals.size() \u003e 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            isVisibleOptionals \u003d new boolean[optionals.size()];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a {@code Lesson} containing {@link Card} objects."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name name of the {@code lesson}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param coreHeaders all {@link Card} objects added to this lesson must have cores corresponding to"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * these headers"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionalHeaders if the {@code i}th element of {@link #isVisibleOptionals} is set to true,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        the {@code i}th element of optionalHeaders is shown alongside the {@code i}th"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        element of every {@link Card} objects\u0027 list of optionals, if it is available"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param questionCoreIndex the index of the question in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answerCoreIndex the index of the answer in {@link Card} objects\u0027 cores."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cards list of {@link Card} objects to be added to this lesson"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson(String name, List\u003cString\u003e coreHeaders, List\u003cString\u003e optionalHeaders,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                  int questionCoreIndex, int answerCoreIndex, List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this(name, coreHeaders, optionalHeaders);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setQuestionAnswerIndices(questionCoreIndex, answerCoreIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addCards(cards);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the name of the lesson. It is not used by {@link #equals(Object)}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name the name of the lesson which is displayed to the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_NAME);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Gets the name of the lesson for displaying to the user."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return name of the lesson"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the core headers which describes what every {@link Card} object\u0027s cores are."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param coreHeaders all {@link Card} objects added to this lesson must have cores corresponding to"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      * these headers"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setCoreHeaders(List\u003cString\u003e coreHeaders) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(coreHeaders);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (coreHeaders.size() \u003c MIN_CORE_COUNT) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_CORE_SIZE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.coreHeaders \u003d coreHeaders;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the core headers which describes what every {@link Card} object\u0027s cores are."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the core headers of this lesson"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getCoreHeaders() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return coreHeaders;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the number of core headers in this lesson"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getCoreHeaderSize() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return coreHeaders.size();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the optional headers which describes what every {@link Card} object\u0027s optionals are."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param optionalHeaders all {@link Card} objects added to this lesson can have optionals corresponding"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *                        to these headers"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setOptionalHeaders(List\u003cString\u003e optionalHeaders) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            this.optionalHeaders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.optionalHeaders \u003d optionalHeaders;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders.size() \u003e 0) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            isVisibleOptionals \u003d new boolean[optionalHeaders.size()];"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the optional headers which describes what every {@link Card} object\u0027s optional are."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the optional headers of this lesson"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOptionalHeaders() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return optionalHeaders;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setQuestionCoreIndex(int index) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_INVALID_INDEX,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    index + 1));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d index;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAnswerCoreIndex(int index) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_INVALID_INDEX,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    index + 1));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d index;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param questionCoreIndex the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answerCodeIndex the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setQuestionAnswerIndices(int questionCoreIndex, int answerCodeIndex) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setQuestionCoreIndex(questionCoreIndex);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setAnswerCoreIndex(answerCodeIndex);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getQuestionCoreIndex() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return questionCoreIndex;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getAnswerCoreIndex() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return answerCoreIndex;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a {@link #isVisibleOptionals} which controls the visibility of optionals. If"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code isVisibleOptionals[i]} is set to {@code true}, the optional at index {@code i} of every"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@see Card} object\u0027s list of optionals is shown. If set to {@code false}, all {@see Card} object\u0027s"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * optionals at index {@code i} is hidden."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of booleans corresponding to the visibility of headers in {@link #optionalHeaders}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean[] getIsVisibleOptionals() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return isVisibleOptionals;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the visibility of the {@code i}th element of {@link #isVisibleOptionals} to {@code isShown}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * If {@code isVisibleOptionals[i]} is set to {@code true}, the optional at index {@code i} of every"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@see Card} object\u0027s list of optionals is shown. If set to {@code false}, all {@see Card} object\u0027s"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * optionals at index {@code i} is hidden."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the optional to change visibility of"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param isShown if set to true, the optional at {@code index} will be shown during quiz mode"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setIsVisibleOptional(int index, boolean isShown) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d isVisibleOptionals.length) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        isVisibleOptionals[index] \u003d isShown;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the {@link #isVisibleOptionals} element to get"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the visibility of the optional at {@code index}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean getIsVisibleOptional(int index) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return isVisibleOptionals[index];"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds a {@link Card} object to {@link #cards}."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param card {@link Card} to be added to {@link #cards}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // All Card objects added must have the same number of cores as the number of core headers."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (card.getCores().size() !\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_CORE_SIZE_MISMATCH);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String field: card.getCores()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (field.isEmpty()) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_CORE_SIZE_MISMATCH);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds a {@link Card} object to the lesson."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code fields} are separated into two separate sub-lists of cores and optionals based on"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #coreHeaders}\u0027s {@code size()}."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param fields the {@link Card}\u0027s cores and optionals in this order"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCard(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireAllNonNull(fields);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (fields.size() \u003d\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            addCard(new Card(fields));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            List\u003cString\u003e cores \u003d fields.subList(0, coreHeaders.size());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            int optionalStart \u003d coreHeaders.size();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            int optionalEnd \u003d fields.size();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            List\u003cString\u003e optionals \u003d fields.subList(optionalStart, optionalEnd);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            addCard(new Card(cores, optionals));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds {@link Card} objects to the lesson."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cards a list of {@link Card} objects to be added to the lesson"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (Card card: cards) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            addCard(card);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks if the Lesson contains the cardToCheck card"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param cardToCheck the card to look for in Lesson"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return returns true if cardToCheck is already in Lesson; false otherwise"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasCard(Card cardToCheck) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (card.equals(cardToCheck)) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCard(int index) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards.remove(index);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of {@link Card} objects in this lesson"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cCard\u003e getCards() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the number of {@link Card} objects in this lesson"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getCardCount() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if there is at least 1 {@link Card} in this lesson"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasCards() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return cards !\u003d null \u0026\u0026 cards.size() !\u003d 0;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Two {@code Lesson} objects with the same hashcode are equivalent."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * They need not have the same {@link #name}."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the hashcode generated using {@link #coreHeaders}, {@link #optionalHeaders},"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #questionCoreIndex}, {@link #answerCoreIndex} and {@link #cards} as input."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Objects.hash(coreHeaders, optionalHeaders, questionCoreIndex, answerCoreIndex,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                cards);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(name)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(\"\\nCores: \").append(String.join(\", \", coreHeaders))"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .append(\"\\nOptionals: \");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionalHeaders.size() \u003e 0) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            builder.append(String.join(\", \", optionalHeaders));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        builder.append(\"\\nCards: \").append(getCardCount());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return otherLesson.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 82,
      "halcyoneee": 2,
      "DigiPie": 372
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/LessonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a list of {@link Lesson} objects. It has helper functions to assist with the management"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * of {@link Lesson} objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //Static fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"Invalid index: %1$s.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The list of {@link Lesson} objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private List\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The {@link Lesson} object currently in focus. All lesson-editing-related commands will apply"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * to this lesson."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Lesson openedLesson \u003d null; // The lesson currently being edited"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * The index of the  {@link #openedLesson} object. Used when {@link #deleteLesson(int)} is"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * called to determine if {@link #openedLesson} should be set to null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int openedLessonIndex \u003d -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Flag for whether there is an opened lesson. Determines if there is an opened lesson which can"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * be edited."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private boolean isThereOpenedLesson \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Creates a new {@link LessonList} which is used to store a list of {@link Lesson} objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // General lesson commands"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the list of {@link #lessons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of {@link #lessons}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the {@link Lesson} at the specified position in {@link #lessons}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the lesson to return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the lesson at the specified position in {@link #lessons}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return lessons.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks if there already is a lesson with the name specified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name the lesson name to look for in LessonList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return returns true if there is a lesson in LessonList with the specified name; false otherwise"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasLessonWithName(String name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (lesson.getName().equals(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks if a card is already in {@link #openedLesson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param card the {@link Card} to look for in {@link #openedLesson}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return returns true if the {@link Card} is already in {@link #openedLesson}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean openLessonHasCard(Card card) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireAllNonNull(openedLesson, card);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return openedLesson.hasCard(card);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds a {@link Lesson} object to {@link #lessons}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param lesson {@link Lesson} to be added to {@link #lessons}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Deletes a {@link Lesson} object from {@link #lessons}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the lesson to delete"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (openedLesson !\u003d null \u0026\u0026 openedLessonIndex \u003d\u003d index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                closeLesson();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            lessons.remove(index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the {@link Lesson} object at index of {@link #lessons}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the lesson to set"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param newLesson set the old lesson to this lesson"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLesson(int index, Lesson newLesson) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(newLesson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessons.set(index, newLesson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Opened lesson commands"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the {@link #openedLesson}. A lesson is opened by calling {@link #openLesson(int)} and"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * closed by calling {@link #closeLesson()}. If there is no lesson currently opened, this returns"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * null."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the {@link Lesson} object in {@link #openedLesson}. Null if there is no opened lesson."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson getOpenedLesson() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return openedLesson;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return all {@code Card} objects in the {@link #openedLesson}; null if there are none"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cCard\u003e getOpenedLessonCards() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return openedLesson.getCards();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of core headers in the {@link #openedLesson}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOpenedLessonCoreHeaders() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return openedLesson.getCoreHeaders();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of optional headers in the {@link #openedLesson}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOpenedLessonOptionalHeaders() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return openedLesson.getOptionalHeaders();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param questionCoreIndex the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answerCodeIndex the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOpenedLessonQuestionAnswer(int questionCoreIndex, int answerCodeIndex) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(openedLesson);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        openedLesson.setQuestionAnswerIndices(questionCoreIndex, answerCodeIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds a {@link Card} to the {@link #openedLesson}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param card {@link Card} to be added to the {@link #openedLesson}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCardToOpenedLesson(Card card) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireAllNonNull(openedLesson, card);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        openedLesson.addCard(card);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Deletes the {@link Card} at the specified index from the {@link #openedLesson}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the {@link Card} to be deleted from the {@link #openedLesson}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCardFromOpenedLesson(int index) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLesson.deleteCard(index);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets {@link #openedLesson} to the lesson at the specified index."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * All lesson-editing commands will apply to this {@link #openedLesson}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index index of the lesson to be assigned to {@link #openedLesson}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the name of the lesson assigned as {@link #openedLesson}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String openLesson(int index) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLesson \u003d lessons.get(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLessonIndex \u003d index;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            isThereOpenedLesson \u003d true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return openedLesson.getName();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets {@link #openedLesson} to null."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String closeLesson() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(openedLesson);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String lessonName \u003d openedLesson.getName();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setLesson(openedLessonIndex, openedLesson); // Save lesson to in-memory lesson list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        openedLesson \u003d null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        openedLessonIndex \u003d -1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        isThereOpenedLesson \u003d false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonName;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Updated automatically by {@link #openLesson(int)} and {@link #closeLesson()} commands."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if there is an opened lesson; false otherwise"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return isThereOpenedLesson;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Other general functions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param other the object to compare this LessonList against"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if the given object represents a LessonList equivalent to this string, false otherwise"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof LessonList)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonList otherLesson \u003d (LessonList) other;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return otherLesson.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a hash code for this LessonList. The hash code for a LessonList object is the hash code of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * the {@link #lessons} in this LessonList."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a hash code value for this object"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessons.hashCode();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 48,
      "DigiPie": 224
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/ManagementModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * The API of the ManagementModel component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface ManagementModel extends Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Gets the lesson by index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Lesson getLesson(int index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Opens the {@link Lesson} object at the specified index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the {@link Lesson} object to open"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the name of the {@link Lesson} object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    String openLesson(int index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Closes the opened {@link Lesson} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the name of the closed {@link Lesson} object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    String closeLesson();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the opened lesson. A lesson is opened by calling {@link #openLesson(int)} and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * closed by calling {@link #closeLesson()}. If there is no lesson currently opened,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * this returns null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the opened {@link Lesson}. Null if there is no opened lesson."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    Lesson getOpenedLesson();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Gets the {@code Card} objects from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return {@code Card} objects from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns null if there are no cards found."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    List\u003cCard\u003e getOpenedLessonCards();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of core headers in the opened {@link Lesson} object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    List\u003cString\u003e getOpenedLessonCoreHeaders();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the list of optional headers in the opened {@link Lesson} object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    List\u003cString\u003e getOpenedLessonOptionalHeaders();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the opened lesson\u0027s question and answer indices."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param questionIndex the index of the core to set as question"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answerIndex the index of the core to set as answer"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    void setOpenedLessonTestValues(int questionIndex, int answerIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds a {@link Card} to the opened {@link Lesson} object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param card {@link Card} to be added to the opened {@link Lesson} object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    void addCardToOpenedLesson(Card card);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks if a card is already in the opened {@link Lesson} object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param card the {@link Card} to look for in the opened {@link Lesson} object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return returns true if the {@link Card} is already in the opened {@link Lesson} object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    boolean openLessonHasCard(Card card);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Deletes the {@link Card} at the specified index from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the {@link Card} to be deleted from the opened {@link Lesson} object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    void deleteCardFromOpenedLesson(int index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Updated automatically by {@link #openLesson(int)} and {@link #closeLesson()} commands."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return true if there is an opened lesson; false otherwise"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    boolean isThereOpenedLesson();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Checks if there already is a lesson with the name specified in {@link LessonList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param name the {@link Lesson} name to look for in {@link LessonList}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return returns true if there is a {@link Lesson} in {@link LessonList} with the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * specified name; false otherwise"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    boolean hasLessonWithName(String name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Toggles theme from light to dark scheme or vice versa, and returns the new theme."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    String changeTheme();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns current theme from {@link UserPrefs} object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    String getTheme();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the {@link LessonList} object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    LessonList getLessonList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Updates the {@link LessonList} object with a new copy."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void setLessonList(LessonList lessonList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a {@link List} of {@link Lesson} objects in {@link LessonList}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    List\u003cLesson\u003e getLessons();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Adds the lesson."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Updates the lesson at the given index."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void setLesson(int index, Lesson updatedLesson);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Removes the lesson at the given index from memory, and deletes its corresponding file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param index w"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void deleteLesson(int index);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    CardSrsData getCardSrsData(int hashCode);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void addCardSrsData(CardSrsData card);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void setCardSrsData(CardSrsData card);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void deleteCardSrsData(CardSrsData card);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 46,
      "halcyoneee": 35,
      "DigiPie": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/ManagementModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents the in-memory management of BrainTrain data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModelManager implements ManagementModel {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ManagementModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private final User user;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private LessonList lessonList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Initializes a ManagementModelManager with the given userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ManagementModelManager(ReadOnlyUserPrefs userPrefs, LessonList lessonList, User user) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.lessonList \u003d lessonList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ManagementModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this(new UserPrefs(), new LessonList(), new User());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String changeTheme() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String newTheme \u003d userPrefs.toggleTheme();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setTheme(newTheme);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return newTheme;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return userPrefs.getTheme();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LessonList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonList getLessonList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonList(LessonList lessonList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(lessonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessonList \u003d lessonList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.getLessons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.getLesson(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Opens the {@link Lesson} object at the specified index of {@link #lessonList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the {@link Lesson} object in {@link #lessonList} to open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the name of the {@link Lesson} object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String openLesson(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.openLesson(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String closeLesson() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.closeLesson();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.isThereOpenedLesson();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Gets the lesson which is opened by calling {@link #openLesson(int)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the opened {@link Lesson}. Returns null if there is no opened lesson."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson getOpenedLesson() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.getOpenedLesson();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Gets the {@code Card} objects from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return {@code Card} objects from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns null if there are no cards found."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cCard\u003e getOpenedLessonCards() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.getOpenedLessonCards();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOpenedLessonCoreHeaders() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.getOpenedLessonCoreHeaders();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOpenedLessonOptionalHeaders() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.getOpenedLessonOptionalHeaders();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOpenedLessonTestValues(int questionIndex, int answerIndex) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.setOpenedLessonQuestionAnswer(questionIndex, answerIndex);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCardToOpenedLesson(Card card) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addCardToOpenedLesson(card);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean openLessonHasCard(Card card) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.openLessonHasCard(card);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCardFromOpenedLesson(int index) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.deleteCardFromOpenedLesson(index);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(lesson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson(int index, Lesson updatedLesson) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.setLesson(index, updatedLesson);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasLessonWithName(String name) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList.hasLessonWithName(name);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.deleteLesson(index);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public CardSrsData getCardSrsData(int hashCode) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return user.getCard(hashCode);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addCardSrsData(CardSrsData card) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        user.addCard(card);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setCardSrsData(CardSrsData card) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        user.setCard(card);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteCardSrsData(CardSrsData card) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        user.deleteCard(card);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(obj instanceof ManagementModelManager)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModelManager other \u003d (ManagementModelManager) obj;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \u0026\u0026 lessonList.equals(other.lessonList)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            \u0026\u0026 user.equals(other.user);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 62,
      "halcyoneee": 75,
      "DigiPie": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Wrapper interface for QuizModel and ManagementModel"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/QuizModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * The API of the QuizModel component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public interface QuizModel extends Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Return mode of {@link Session}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizMode getMode();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    int getIndex();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Return card count of {@link Session}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    int getCount();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Return name of {@link Session}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Return a list of SrsCards for updating user progress."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    List\u003cSrsCard\u003e getQuizSrsCards();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets the {@link Quiz} and {@link Session} information."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void init(Quiz quiz, Session session);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns if there is still {@link QuizCard} left in {@link Quiz}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean hasCardLeft();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the next {@link QuizCard} in line for {@link Quiz}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizCard getNextCard();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the user current progress in {@link Quiz}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    String getCurrentProgress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the current {@link QuizCard} in {@link Quiz}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    QuizCard getCurrentQuizCard();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Update the totalAttempts and streak of a specified {@link QuizCard} in the current quiz."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param index of the current {@link QuizCard}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param answer user input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return true if correct"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean updateTotalAttemptsAndStreak(int index, String answer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns total attempts in this {@link Quiz}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    int getQuizTotalAttempts();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the total correct questions attempted in this {@link Quiz}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    int getQuizTotalCorrectQuestions();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Toggles between if the card labeled difficult."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param index of the current {@link QuizCard}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return result after toggling"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean toggleIsCardDifficult(int index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns list of optional of the {@link QuizCard}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    List\u003cString\u003e getOpt();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns if User is done with {@link Quiz}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean isQuizDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns data needed by {@link Session} when {@link Quiz} end."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    List\u003cList\u003cInteger\u003e\u003e end();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Updates user profile after quiz ends."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param quizInformation from quiz."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void updateUserProfile(List\u003cList\u003cInteger\u003e\u003e quizInformation);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the list of original {@link QuizCard} that includes streak and total attempts."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    List\u003cQuizCard\u003e getQuizCardList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns true to display quiz result, otherwise false."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    boolean isResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets result display to display quiz result or not."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void setResultDisplay(boolean resultDisplay);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns {@link User} data from {@link ManagementModel}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    User getManagementModelUser();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 99,
      "lallanachang": 31,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/modelmanager/QuizModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents the in-memory management of quiz data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizModelManager implements QuizModel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(QuizModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private ManagementModel managementModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isResultDisplay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Initialises QuizModelManager with ManagementModel"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param managementModel instance of ManagementModel"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizModelManager(ManagementModel managementModel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.managementModel \u003d managementModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.fine(\"Initializing constructor with ManagementModel\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Initialises empty QuizModelManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logger.fine(\"Initializing empty constructor\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Session \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizMode getMode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getMode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getLessonIndex();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getCount();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e getQuizSrsCards() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return session.getQuizSrsCards();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void updateUserProfile(List\u003cList\u003cInteger\u003e\u003e quizInformation) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cCardSrsData\u003e cardSrsDataList \u003d session.updateUserProfile(quizInformation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (CardSrsData cardSrsData : cardSrsDataList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            managementModel.addCardSrsData(cardSrsData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quiz \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void init(Quiz quiz, Session session) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(quiz, session);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isResultDisplay \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.hasCardLeft();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getNextCard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getCurrentProgress() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getCurrentProgress();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getCurrentQuizCard();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cQuizCard\u003e getQuizCardList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getOriginalQuizCardList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.updateTotalAttemptsAndStreak(index, answer);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getQuizTotalAttempts();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getQuizTotalCorrectQuestions();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean toggleIsCardDifficult(int index) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.toggleIsCardDifficult(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cString\u003e getOpt() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.getOpt();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isQuizDone() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (quiz !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quiz.isQuizDone();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // By default if no quiz is running, it will be considered as done"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isResultDisplay() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isResultDisplay;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setResultDisplay(boolean resultDisplay) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!resultDisplay) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.setQuizDone();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        isResultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.end();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public User getManagementModelUser() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return managementModel.getUser();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!(obj instanceof QuizModelManager)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager other \u003d (QuizModelManager) obj;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quiz.equals(other.quiz);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 160,
      "lallanachang": 30,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Quiz.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Represents a quiz that stores a list of {@link QuizCard}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"QuizMode must only be learn/review/preview/difficult\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private List\u003cQuizCard\u003e originalQuizCardList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private List\u003cQuizCard\u003e generatedQuizCardList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizMode mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizCard currentQuizCard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isQuizDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int currentCardIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int generatedCardSize;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int quizTotalAttempts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int quizTotalCorrectQuestions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Builds constructor from originalQuizCardList which is generated by {@link Session}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param originalQuizCardList contains a list of question, answer and list of optional"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public Quiz(List\u003cQuizCard\u003e originalQuizCardList, QuizMode mode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(originalQuizCardList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        checkArgument(mode !\u003d null, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.originalQuizCardList \u003d originalQuizCardList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isQuizDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.currentCardIndex \u003d -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.generatedCardSize \u003d -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizTotalAttempts \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizTotalCorrectQuestions \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Generates a list of {@link QuizCard} based on the chosen cards given by session."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void generate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatedQuizCardList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case PREVIEW:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatePreview();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case LEARN:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            // Learn is a combination of Preview + Review"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatePreview();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generateReview();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case REVIEW:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generateReview();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        case DIFFICULT:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatePreview();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        generatedCardSize \u003d generatedQuizCardList.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Generates a list of {@link QuizCard} for review."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void generateReview() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard currentCard;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c originalQuizCardList.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard \u003d originalQuizCardList.get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatedQuizCardList.add(currentCard.generateOrderedQuizCardWithIndex(i, QuizMode.REVIEW));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c originalQuizCardList.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard \u003d originalQuizCardList.get(i);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatedQuizCardList.add(currentCard.generateFlippedQuizCardWithIndex(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Generates a list of {@link QuizCard} for preview."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void generatePreview() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard currentCard;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c originalQuizCardList.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentCard \u003d originalQuizCardList.get(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            generatedQuizCardList.add(currentCard.generateOrderedQuizCardWithIndex(i, QuizMode.PREVIEW));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizTotalAttempts;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizTotalCorrectQuestions;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getCurrentProgress() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return (currentCardIndex + 1) + \"/\" + generatedCardSize;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireNonNull(currentQuizCard);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return currentQuizCard;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cString\u003e getOpt() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return currentQuizCard.getOpt();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cQuizCard\u003e getOriginalQuizCardList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return originalQuizCardList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setQuizDone() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        isQuizDone \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isQuizDone() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isQuizDone;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cQuizCard\u003e getGeneratedQuizCardList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return generatedQuizCardList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns true if there is card left in quiz."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return currentCardIndex \u003c (generatedCardSize - 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the next card in line."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        currentCardIndex++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (currentCardIndex \u003c generatedCardSize) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentQuizCard \u003d generatedQuizCardList.get(currentCardIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return currentQuizCard;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new IndexOutOfBoundsException(\"No cards left.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Updates the totalAttempts and streak of a specified card in the current session"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * and current quiz session totalAttempts and totalCorrectQuestions"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param index of the card"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param answer user input"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard sessionCard \u003d originalQuizCardList.get(index);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        boolean isCorrect \u003d currentQuizCard.isCorrect(answer);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sessionCard.updateTotalAttemptsAndStreak(isCorrect);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizTotalCorrectQuestions++;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizTotalAttempts++;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isCorrect;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Toggles between if the card labeled difficult."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param index of the card"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return result after toggling"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean toggleIsCardDifficult(int index) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard sessionCard \u003d originalQuizCardList.get(index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sessionCard.toggleIsCardDifficult();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return sessionCard.isCardDifficult();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Format data needed by Session"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return a list of index of card, total attempts, streak and isDifficult in this session"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     *         which contains streak higher than 0."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e session \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c originalQuizCardList.size(); i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            card \u003d originalQuizCardList.get(i);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            int isCardDifficult \u003d card.isCardDifficult() ? 1 : 0;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (card.getStreak() !\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                session.add(Arrays.asList(i, card.getTotalAttempts(), card.getStreak(), isCardDifficult));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!(obj instanceof Quiz)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz other \u003d (Quiz) obj;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return other.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return Objects.hash(originalQuizCardList, generatedQuizCardList, mode,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            currentQuizCard, currentCardIndex, isQuizDone);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Represents the QuizCard used in {@link Quiz}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Question/answer can take any values, and it\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        + \" should not be blank or contain only whitespaces\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizMode quizMode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String questionHeader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String answerHeader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private List\u003cString\u003e opt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int totalAttempts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int streak;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean hasAttemptedBefore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isWrongTwice;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isCardDifficult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard(String question, String answer, List\u003cString\u003e opt, String questionHeader, String answerHeader) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(question, answer, opt, questionHeader, answerHeader);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        checkArgument(!question.trim().isEmpty() \u0026\u0026 !answer.trim().isEmpty(), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.questionHeader \u003d questionHeader;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answerHeader \u003d answerHeader;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.opt \u003d opt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.totalAttempts \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.streak \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isCardDifficult \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizCard(int index, String question, String answer, List\u003cString\u003e opt, String questionHeader,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                     String answerHeader, QuizMode quizMode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(index, question, answer, quizMode, questionHeader, answerHeader);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        checkArgument(!question.trim().isEmpty() \u0026\u0026 !answer.trim().isEmpty(), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.questionHeader \u003d questionHeader;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.answerHeader \u003d answerHeader;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.opt \u003d opt;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.quizMode \u003d quizMode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.totalAttempts \u003d -1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.streak \u003d -1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isWrongTwice \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.hasAttemptedBefore \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isCardDifficult \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard generateOrderedQuizCardWithIndex(int index, QuizMode mode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new QuizCard(index, question, answer, opt, questionHeader, answerHeader, mode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizCard generateFlippedQuizCardWithIndex(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return new QuizCard(index, answer, question, opt, answerHeader, questionHeader, QuizMode.REVIEW);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cString\u003e getOpt() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return opt;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getTotalAttempts() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return totalAttempts;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getStreak() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return streak;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isWrongTwice() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isWrongTwice;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizMode getQuizMode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizMode;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getQuestionHeader() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return questionHeader;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getAnswerHeader() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return answerHeader;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isCardDifficult() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isCardDifficult;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Toggles between if the card labeled difficult."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void toggleIsCardDifficult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        isCardDifficult \u003d !isCardDifficult;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Check if the given answer is the same as the answer of the card."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param answer user\u0027s input answer."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return the result after checking."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isCorrect(String answer) throws NullPointerException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (hasAttemptedBefore) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            isWrongTwice \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizMode \u003d QuizMode.PREVIEW;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        hasAttemptedBefore \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return answer.equalsIgnoreCase(this.answer);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Update both totalAttempts and streak depending on isCorrect."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param isCorrect the output of isCorrect method"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void updateTotalAttemptsAndStreak(boolean isCorrect) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (quizMode !\u003d QuizMode.PREVIEW) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (isCorrect) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                streak +\u003d 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                streak \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            totalAttempts +\u003d 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (!(obj instanceof QuizCard)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard other \u003d (QuizCard) obj;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return other.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return Objects.hash(index, question, answer, questionHeader, answerHeader, opt, totalAttempts, streak);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(questionHeader + \": \" + question + \"\\n\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(answerHeader + \": \" + answer + \"\\n\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        sb.append(\"hints: \" + opt + \"\\n\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(\"Total attempts: \" + totalAttempts + \"\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(\"Streak: \" + streak + \"\\n\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(\"isWrongTwice: \" + isWrongTwice + \"\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(\"Index: \" + index + \"\\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizMode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Different types of mode supported in Quiz."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Learn: sees both the question and answer first then get tested."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Review: only get tested."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Preview: sees both question and answer but not tested."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * Difficult: sees cards labelled as difficult with both question and answer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public enum QuizMode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    LEARN,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    REVIEW,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    PREVIEW,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    DIFFICULT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 12,
      "lallanachang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/Session.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * Represents a session that stores cards based on srs data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * It will be generated based on user input when staring a quiz"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * and pass the needed list of {@link QuizCard} to the quiz session."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class Session {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final int CARD_COUNT_MINIMUM \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizMode mode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int cardCount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int lessonIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Creates a session with the {@code name} of the {@link seedu.address.model.lesson.Lesson}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * which will be used for users of the current {@link seedu.address.model.lesson.Lesson}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * in {@link seedu.address.model.quiz.Quiz}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param name {@code name} of the lesson"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param cardCount number of cards that users want to be tested"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param mode {@link QuizMode} for users"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public Session(String name, int cardCount, QuizMode mode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid name\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (cardCount \u003c CARD_COUNT_MINIMUM) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"CardCount should not be less than 1 in a single session\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d QuizMode.LEARN) \u0026 (mode !\u003d QuizMode.REVIEW) \u0026 (mode !\u003d QuizMode.PREVIEW)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            \u0026 (mode !\u003d QuizMode.DIFFICULT)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d cardCount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public Session(String name, int cardCount, QuizMode mode, List\u003cSrsCard\u003e srsCards) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid name\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (cardCount \u003c CARD_COUNT_MINIMUM) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"CardCount should not be less than 1 in a single session\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d QuizMode.LEARN) \u0026 (mode !\u003d QuizMode.REVIEW) \u0026 (mode !\u003d QuizMode.PREVIEW)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            \u0026 (mode !\u003d QuizMode.DIFFICULT)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d cardCount;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public Session(String name, QuizMode mode, List\u003cSrsCard\u003e srsCards) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (name \u003d\u003d null || name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid name\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d QuizMode.LEARN) \u0026 (mode !\u003d QuizMode.REVIEW) \u0026 (mode !\u003d QuizMode.PREVIEW)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            \u0026 (mode !\u003d QuizMode.DIFFICULT)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d 10;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session(int index, int cardCount, QuizMode mode) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (cardCount \u003c CARD_COUNT_MINIMUM) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"CardCount should not be less than 1 in a single session\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d QuizMode.LEARN) \u0026 (mode !\u003d QuizMode.REVIEW) \u0026 (mode !\u003d QuizMode.PREVIEW)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                \u0026 (mode !\u003d QuizMode.DIFFICULT)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.lessonIndex \u003d index;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d cardCount;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d \"default\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Creates the session when user input a {@link StartCommand}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param index {@code index} shows the index of the {@link seedu.address.model.lesson.Lesson}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *                           in {@link seedu.address.model.lesson.LessonList}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param cardCount number of cards that users want to be tested"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param mode {@link QuizMode} for users"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param srsCards list of srsCards to generate the {@link QuizCard}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session(int index, int cardCount, QuizMode mode, List\u003cSrsCard\u003e srsCards) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if (cardCount \u003c CARD_COUNT_MINIMUM) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"CardCount should not be less than 1 in a single session\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        if ((mode !\u003d QuizMode.LEARN) \u0026 (mode !\u003d QuizMode.REVIEW) \u0026 (mode !\u003d QuizMode.PREVIEW)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                \u0026 (mode !\u003d QuizMode.DIFFICULT)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid mode\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.lessonIndex \u003d index;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardCount \u003d cardCount;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d \"default\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Generate a list of quizCards that will pass to quiz system."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return the list of {@link QuizCard}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cQuizCard\u003e generateSession() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentCard;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cQuizCard\u003e quizCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cardCount; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            currentCard \u003d srsCards.get(i);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            quizCards.add(new QuizCard(currentCard.getQuestion(), currentCard.getAnswer(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    currentCard.getHints(), currentCard.getQuestionHeader(), currentCard.getAnswerHeader()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return quizCards;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Returns the needed attributes."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return Different attributes that will be needed later."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizMode getMode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getLessonIndex() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return lessonIndex;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardCount;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void setCount(int count) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardCount \u003d count;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e getSrsCards() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return srsCards;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e getQuizSrsCards() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e quizSrsCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cardCount; i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            quizSrsCards.add(srsCards.get(i));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return quizSrsCards;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns user profile after quiz ends."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param quizInformation from quiz."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return List of {@link CardSrsData} to update the user data."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cCardSrsData\u003e updateUserProfile(List\u003cList\u003cInteger\u003e\u003e quizInformation) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Instant currentDate \u003d Instant.now();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager updateManager \u003d new SrsCardsManager(this.getQuizSrsCards(), quizInformation, currentDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return updateManager.updateCardData();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 13,
      "lallanachang": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/SrsCardsManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static java.time.temporal.ChronoUnit.HOURS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Represents a management of cards manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * It will be used to generate list of {@link SrsCard} for different modes and updating user data after quiz."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardsManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private HashMap\u003cInteger, CardSrsData\u003e cardData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cList\u003cInteger\u003e\u003e quizInformation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Instant currentDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Creates a manager to generate {@link SrsCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param lesson {@link Lesson} of flashcards."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param cardData user information of {@link CardSrsData}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardsManager(Lesson lesson, HashMap\u003cInteger, CardSrsData\u003e cardData) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireAllNonNull(lesson, cardData);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardData \u003d cardData;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Creates a manager to update {@link CardSrsData}。"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param srsCards list of {@link SrsCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param quizInformation results obtained from {@link seedu.address.model.quiz.Quiz}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param currentDate shows the current time as an Instant."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardsManager(List\u003cSrsCard\u003e srsCards, List\u003cList\u003cInteger\u003e\u003e quizInformation, Instant currentDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireAllNonNull(srsCards, quizInformation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.quizInformation \u003d quizInformation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.currentDate \u003d currentDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Show the cards in lesson in order for PREVIEW mode."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @retun list of {@link SrsCard} for PREVIEW mode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e preview() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCard\u003e cards \u003d lesson.getCards();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Card currentCard \u003d cards.get(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            srsCards.add(new SrsCard(currentCard,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    new CardSrsData(currentCard.hashCode(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                            0, 0, Instant.now(), false), lesson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return srsCards;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Shows the cards in lesson only labelled as difficult."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return List of {@link SrsCard} for DIFFICULT mode."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e previewDifficult() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCard\u003e cards \u003d lesson.getCards();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Card currentCard \u003d cards.get(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentHashcode \u003d currentCard.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (cardData.containsKey(currentHashcode) \u0026\u0026 cardData.get(currentHashcode).isDifficult()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                srsCards.add(new SrsCard(currentCard, cardData.get(currentHashcode), lesson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return srsCards;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Generate a list of new cards for LEARN mode."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return List of {@link SrsCard} for LEARN mode."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e learn() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCard\u003e cards \u003d lesson.getCards();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Card currentCard \u003d cards.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentHashcode \u003d currentCard.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (!cardData.containsKey(currentHashcode)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                srsCards.add(new SrsCard(currentCard,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        new CardSrsData(currentCard.hashCode(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                                0, 0, Instant.now(), false), lesson));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return srsCards;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sorts all cards in this lesson based on their srsDueDate."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Generate cards for review mode based on srs value."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return List of {@link SrsCard} for REVIEW mode."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cSrsCard\u003e sort() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCard\u003e cards \u003d lesson.getCards();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            SrsCard srsCard;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Card currentCard \u003d cards.get(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Instant currentDate \u003d Instant.now();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (!cardData.containsKey(currentCard.hashCode())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                srsCard \u003d new SrsCard(currentCard, new CardSrsData(currentCard.hashCode(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        0, 0, currentDate, false) , lesson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                srsCard \u003d new SrsCard(currentCard, cardData.get(currentCard.hashCode()), lesson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Instant currentSrsDueDate \u003d srsCard.getSrsDueDate();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentSize \u003d srsCards.size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int update \u003d 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (srsCards.size() \u003d\u003d 0 \u0026\u0026 currentSrsDueDate.compareTo(currentDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                srsCards.add(srsCard);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                for (int k \u003d 0; k \u003c currentSize; k++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    if (currentSrsDueDate.compareTo(srsCards.get(k).getSrsDueDate()) \u003c 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        srsCards.add(k, srsCard);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        update \u003d 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                if (update \u003d\u003d 0 \u0026\u0026 currentSrsDueDate.compareTo(currentDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    srsCards.add(srsCard);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return srsCards;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Updates fields of each cardData class based on the result of quiz system."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return List of updated {@link CardSrsData} based on {@code quizInformation}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public List\u003cCardSrsData\u003e updateCardData() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        List\u003cCardSrsData\u003e updatedCardData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        HashMap\u003cSrsCard, Integer\u003e memoryBoxes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c quizInformation.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Instant srsDueDate \u003d srsCards.get(i).getSrsDueDate();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (srsDueDate.compareTo(currentDate) \u003c 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (currentDate.until(srsDueDate, HOURS) \u003c 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (currentDate.until(srsDueDate, HOURS) \u003c 5) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 3);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (currentDate.until(srsDueDate, HOURS) \u003c 12) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 4);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), 5);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentHashCode \u003d srsCards.get(i).getHashcode();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentNumOfAttempts \u003d srsCards.get(i).getNumOfAttempts() + quizInformation.get(i).get(1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentStreak \u003d srsCards.get(i).getStreak() + quizInformation.get(i).get(2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            boolean isDifficult;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (quizInformation.get(i).get(3) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                isDifficult \u003d true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                isDifficult \u003d false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            int currentLevel \u003d memoryBoxes.get(srsCards.get(i));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (quizInformation.get(i).get(1).equals(quizInformation.get(i).get(2)) \u0026\u0026 currentLevel !\u003d 5) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), currentLevel + 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (quizInformation.get(i).get(1) \u003e quizInformation.get(i).get(2) \u0026\u0026 currentLevel !\u003d 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                memoryBoxes.put(srsCards.get(i), currentLevel - 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            Instant updatedSrsDueDate \u003d Instant.MIN;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(5));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(12));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 4) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(24));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else if (memoryBoxes.get(srsCards.get(i)) \u003d\u003d 5) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                updatedSrsDueDate \u003d currentDate.plus(Duration.ofHours(48));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            updatedCardData.add(new CardSrsData(currentHashCode, currentNumOfAttempts, currentStreak,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    updatedSrsDueDate, isDifficult));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return updatedCardData;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 4,
      "eugenefdw": 3,
      "lallanachang": 192,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/srscard/SrsCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.srscard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * Represents a flashcard contains both core fields(question and answer) and srs data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * It will be generated based on {@link Lesson} and {@link CardSrsData}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCard {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private CardSrsData cardData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int questionIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int answerIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Creates a {@code srsCard} which represents a flashcard with user data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param card the flash card information from {@link Lesson}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param cardData the srs user data informaation from {@link CardSrsData}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param lesson the {@link Lesson} of the needed cards for the {@code questionIndex} and {@code answerIndex}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public SrsCard(Card card, CardSrsData cardData, Lesson lesson) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        requireAllNonNull(card, cardData, lesson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.cardData \u003d cardData;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        questionIndex \u003d lesson.getQuestionCoreIndex();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        answerIndex \u003d lesson.getAnswerCoreIndex();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Returns the needed attributes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return Different attributes that will be needed later."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return card.getCore(questionIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public CardSrsData getCardData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return card.getCore(answerIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Instant getSrsDueDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getSrsDueDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getHashcode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getHashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getNumOfAttempts() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getNumOfAttempts();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getStreak() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardData.getStreak();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public List\u003cString\u003e getHints() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return card.getOptionals();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getQuestionHeader() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return lesson.getCoreHeaders().get((lesson.getQuestionCoreIndex()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getAnswerHeader() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return lesson.getCoreHeaders().get((lesson.getAnswerCoreIndex()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Lesson getLesson() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Returns true if both are {@code srsCard} objects, and are the same object or have the same {@link #hashCode}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param obj object to be compared for equality with this {@code srsCard}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return true if the specified object is a {@code srsCard} identical to this {@code srsCard}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard other \u003d (SrsCard) obj;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return other.getHashcode() \u003d\u003d this.getHashcode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 3,
      "eugenefdw": 1,
      "lallanachang": 94,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/CardSrsData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Represents a Card which contains the data and hashcode that can be called by session"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CardSrsData {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private int hashCode; // This corresponds to a Card\u0027s hashCode"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private int numOfAttempts; // Number of attempts for this Card by a User"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private int streak;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private boolean isDifficult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Instant srsDueDate; // SRS Due Date for a User"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private HashMap \u003cInteger, CardSrsData\u003e cardMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Constructor for the CardData"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Takes in the hashCode, numOfAttempts, streak, the srsDueDate and isDifficult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param hashCode this corresponds to a Card\u0027s hashCode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param numOfAttempts this corresponds to the number of attempts"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param streak this corresponds to the number of correct answers consecutively"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param srsDueDate this corresponds to the space repetition storage due date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @param isDifficult this corresponds to the card labelled as difficult or not"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CardSrsData(int hashCode, int numOfAttempts, int streak, Instant srsDueDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                       boolean isDifficult) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        requireAllNonNull(hashCode, numOfAttempts, streak, srsDueDate, isDifficult);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.hashCode \u003d hashCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.numOfAttempts \u003d numOfAttempts;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.streak \u003d streak;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.srsDueDate \u003d srsDueDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.isDifficult \u003d isDifficult;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Function for session management to get list of card datas"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param hashCode must be given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @return card from hashmap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CardSrsData getCard(int hashCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return cardMap.get(hashCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setCard(int hashCode, CardSrsData values) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardMap.put(hashCode, values);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public int getHashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return hashCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public int getNumOfAttempts() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return numOfAttempts;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setNumOfAttempts(int numOfAttempts) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.numOfAttempts \u003d numOfAttempts;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public int getStreak() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return streak;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setStreak(int streak) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.streak \u003d streak;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Instant getSrsDueDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return srsDueDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isDifficult() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return isDifficult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        if (!(obj instanceof CardSrsData)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData other \u003d (CardSrsData) obj;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return other.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 60,
      "eugenefdw": 1,
      "halcyoneee": 25,
      "lallanachang": 3,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Represents a user data and allows importing and exporting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private HashMap\u003cInteger, CardSrsData\u003e cardmap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardmap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void addCard(CardSrsData singleCard) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardmap.put(singleCard.getHashCode(), singleCard);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void deleteCard(CardSrsData singleCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardmap.remove(singleCard.getHashCode());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setCard(CardSrsData singleCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        addCard(singleCard);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CardSrsData getCard(int hashCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return cardmap.get(hashCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Map\u003cInteger, CardSrsData\u003e getCards() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return cardmap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (!(other instanceof User)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        User otherUser \u003d (User) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return otherUser.hashCode() \u003d\u003d this.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return cardmap.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 34,
      "eugenefdw": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@code Card} objects used to form sample lessons."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class SampleCards {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Sample cards for Sample-Capitals lesson"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_1_CARD_1_CORE_1 \u003d \"Japan\"; // First core"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_1_CARD_1_CORE_2 \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_1_CARD_1_OPT_1 \u003d \"T\"; // First optional"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card SAMPLE_1_CARD_1 \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new Card(List.of(SAMPLE_1_CARD_1_CORE_1, SAMPLE_1_CARD_1_CORE_2),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    List.of(SAMPLE_1_CARD_1_OPT_1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_1_CARD_2_CORE_1 \u003d \"Belgium\"; // First core"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_1_CARD_2_CORE_2 \u003d \"Brussels\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_1_CARD_2_OPT_1 \u003d \"B\"; // First optional"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card SAMPLE_1_CARD_2 \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new Card(List.of(SAMPLE_1_CARD_2_CORE_1, SAMPLE_1_CARD_2_CORE_2),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    List.of(SAMPLE_1_CARD_2_OPT_1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Sample cards for Sample-Muscles-Anatomy lesson"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_1_CORE_1 \u003d \"Deltoid\"; // First core"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_1_CORE_2 \u003d \"Abduction of arm\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_1_CORE_3 \u003d \"Axillary nerve\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_1_OPT_1 \u003d \"Most superficial muscle on shoulder\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card SAMPLE_2_CARD_1 \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new Card(List.of(SAMPLE_2_CARD_1_CORE_1, SAMPLE_2_CARD_1_CORE_2, SAMPLE_2_CARD_1_CORE_3),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    List.of(SAMPLE_2_CARD_1_OPT_1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_2_CORE_1 \u003d \"Orbicularis oculi\"; // First core"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_2_CORE_2 \u003d \"Closes the eyelids\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_2_CORE_3 \u003d \"Facial nerve\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_2_OPT_1 \u003d \"\\uD83D\\uDE09\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card SAMPLE_2_CARD_2 \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new Card(List.of(SAMPLE_2_CARD_2_CORE_1, SAMPLE_2_CARD_2_CORE_2, SAMPLE_2_CARD_2_CORE_3),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    List.of(SAMPLE_2_CARD_2_OPT_1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_3_CORE_1 \u003d \"Quadriceps femoris\"; // First core"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_3_CORE_2 \u003d \"Extension of knee\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_3_CORE_3 \u003d \"Femoral nerve\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_CARD_3_OPT_1 \u003d \"Knee jerk reflex\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card SAMPLE_2_CARD_3 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new Card(List.of(SAMPLE_2_CARD_3_CORE_1, SAMPLE_2_CARD_3_CORE_2, SAMPLE_2_CARD_3_CORE_3),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    List.of(SAMPLE_2_CARD_3_OPT_1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a constants-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private SampleCards() { }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleLessons.SAMPLE_1_LESSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleLessons.SAMPLE_2_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a static-methods-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private SampleDataUtil() { }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static LessonList getSampleBrainTrain() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(SAMPLE_1_LESSON);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(SAMPLE_2_LESSON);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return lessonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 5,
      "-": 12,
      "DigiPie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleLessons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_1_CARD_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_1_CARD_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_2_CARD_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_2_CARD_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_2_CARD_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@code Lesson} objects used to form sample lessons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class SampleLessons {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Sample lesson with 2 test values and 1 hint"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_1_NAME \u003d \"Sample-Capitals\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e SAMPLE_1_CORES \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(\"Country\", \"Capital\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e SAMPLE_1_OPTIONALS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(\"First letter\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cCard\u003e SAMPLE_1_CARDS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(SAMPLE_1_CARD_2, SAMPLE_1_CARD_1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Lesson SAMPLE_1_LESSON \u003d new Lesson("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            SAMPLE_1_NAME, SAMPLE_1_CORES, SAMPLE_1_OPTIONALS, 0, 1, SAMPLE_1_CARDS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Sample lesson with 3 test values and 1 hint"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String SAMPLE_2_NAME \u003d \"Sample-Muscles-Anatomy\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e SAMPLE_2_CORES \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(\"Muscle\", \"Action\", \"Innervation\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e SAMPLE_2_OPTIONALS \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(\"Hint\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cCard\u003e SAMPLE_2_CARDS \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(SAMPLE_2_CARD_1, SAMPLE_2_CARD_2, SAMPLE_2_CARD_3));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Lesson SAMPLE_2_LESSON \u003d new Lesson("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            SAMPLE_2_NAME, SAMPLE_2_CORES, SAMPLE_2_OPTIONALS, 0, 2, SAMPLE_2_CARDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This is a constants-only (utility) class which should not be instantiated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note that this is not a singleton class given that not even a single instance is allowed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private SampleLessons() { }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CsvLessonListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A class to access LessonList stored in the hard disk as a csv file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvLessonListStorage implements LessonListStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final String DEFAULT_FIELD_NAME \u003d \"Unnamed\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CsvLessonListStorage.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String FULL_HEADER_CORE_QA \u003d \"TESTED\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String FULL_HEADER_CORE_NOT_QA \u003d \"NOT TESTED\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String FULL_HEADER_OPTIONAL \u003d \"HINT\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String HEADER_CORE_QA \u003d \"t\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String HEADER_CORE_NOT_QA \u003d \"n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final String HEADER_OPTIONAL \u003d \"h\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Path folderPath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public CsvLessonListStorage(Path folderPath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.folderPath \u003d folderPath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getLessonListFolderPath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return folderPath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonListFolderPath(Path folderPath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(folderPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.folderPath \u003d folderPath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Parses the given file at the path into a lesson, in the following order:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Reads the file into a List of String arrays"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Parses the first String array as a header"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * -\u003e Values marked as core using CORE_ESCAPE have the marker removed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *      --\u003e Values marked with QUESTION_ESCAPE and ANSWER_ESCAPE are assigned."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *       - See documentation on save data. TODO"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * -\u003e The count of cores is kept"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Name of lesson is read from filename without extension"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Fields of lesson read from modified header"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * - Cards are read from remainder of data."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param filePath Assumes not null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return The parsed lesson."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Optional\u003cLesson\u003e parseFileIntoLesson(Path filePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            data \u003d CsvUtil.readCsvFile(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Unable to read lesson file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (data \u003d\u003d null || data.size() \u003c 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Empty/invalid file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String lessonName \u003d filePath.getFileName().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int extensionIndex \u003d lessonName.lastIndexOf(\".\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonName \u003d lessonName.substring(0, extensionIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] headerArray \u003d data.get(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] fieldNameArray \u003d data.get(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (headerArray.length !\u003d fieldNameArray.length) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Lesson does not have matching number of fields and field types: \" + lessonName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int[] headerData \u003d parseStringArrayToHeaderData(headerArray);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int coreCount \u003d headerData[0];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (coreCount \u003d\u003d -1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Lesson has invalid header values: \" + lessonName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (coreCount \u003c Card.MIN_CORE_COUNT) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.warning(\"Lesson does not have enough testable sides: \" + lessonName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int questionIndex \u003d headerData[1];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int answerIndex \u003d headerData[2];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (questionIndex \u003c 0 || answerIndex \u003c 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            logger.info(\"Invalid values marked for testing. Using defaults.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            questionIndex \u003d Lesson.DEFAULT_INDEX_QUESTION;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            answerIndex \u003d Lesson.DEFAULT_INDEX_ANSWER;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e fieldNames \u003d parseStringArrayToFieldNames(fieldNameArray);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson newLesson \u003d new Lesson(lessonName, coreCount, fieldNames);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        newLesson.setQuestionAnswerIndices(questionIndex, answerIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 2; i \u003c data.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                newLesson.addCard(Arrays.asList(data.get(i)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return Optional.of(newLesson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns an int array containing core count, question and answer index."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param headerArray"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Header data values."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private int[] parseStringArrayToHeaderData(String[] headerArray) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int[] returnValues \u003d new int[3];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Arrays.fill(returnValues, -1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int questionIndex \u003d -1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int answerIndex \u003d -1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c headerArray.length; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            if (headerArray[i].isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                headerArray[i] \u003d \" \";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int coreCount \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        while (index \u003c headerArray.length) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            String headerChar \u003d headerArray[index].toLowerCase().substring(0, 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            if (headerChar.equals(HEADER_CORE_QA)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                if (questionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    questionIndex \u003d index;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                } else if (answerIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                    answerIndex \u003d index;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                coreCount++;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } else if (headerChar.equals(HEADER_CORE_NOT_QA)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                coreCount++;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } else if (!headerChar.equals(HEADER_OPTIONAL)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                return returnValues;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        returnValues[0] \u003d coreCount;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        returnValues[1] \u003d questionIndex;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        returnValues[2] \u003d answerIndex;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return returnValues;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a list of Strings containing correctly formatted field names."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * If the field is empty, it is automatically renamed to DEFAULT_FIELD_NAME."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param fieldNameArray"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return List of field names."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private List\u003cString\u003e parseStringArrayToFieldNames(String[] fieldNameArray) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e fieldNames;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c fieldNameArray.length; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            if (fieldNameArray[i].isEmpty()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                fieldNameArray[i] \u003d DEFAULT_FIELD_NAME;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        fieldNames \u003d Arrays.asList(fieldNameArray);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return fieldNames;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a String[] containing correctly formatted strings for saving."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Appends QUESTION_ESCAPE and ANSWER_ESCAPE chars to the headers, then appends CORE_ESCAPE to all remaining core"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Header data with relevant escape characters."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private String[] parseHeaderDataToStringArray(Lesson lesson) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] header;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e headerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c lesson.getCoreHeaders().size(); i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            if (i \u003d\u003d lesson.getAnswerCoreIndex() || i \u003d\u003d lesson.getQuestionCoreIndex()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                headerList.add(FULL_HEADER_CORE_QA);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                headerList.add(FULL_HEADER_CORE_NOT_QA);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c lesson.getOptionalHeaders().size(); i++) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            headerList.add(FULL_HEADER_OPTIONAL);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        header \u003d new String[headerList.size()];"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        headerList.toArray(header);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return header;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a String[] containing correctly formatted strings for saving."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Appends QUESTION_ESCAPE and ANSWER_ESCAPE chars to the headers, then appends CORE_ESCAPE to all remaining core"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Header data with relevant escape characters."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private String[] parseFieldNamesToStringArray(Lesson lesson) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] fieldNames;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e fieldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        fieldList.addAll(lesson.getCoreHeaders());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        fieldList.addAll(lesson.getOptionalHeaders());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int headerSize \u003d fieldList.size();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        fieldNames \u003d new String[headerSize];"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        fieldList.toArray(fieldNames);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return fieldNames;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns a String[] of all card fields in order."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Formatted card data."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private String[] parseCardDataToStringArray(Card card) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] cardArray;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString\u003e cardData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardData.addAll(card.getCores());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardData.addAll(card.getOptionals());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardArray \u003d new String[card.getCores().size() + card.getOptionals().size()];"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cardData.toArray(cardArray);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return cardArray;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * TODO"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private void saveLessonToFile(Lesson lesson, Path folderPath) throws IOException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path filePath \u003d Paths.get(folderPath.toString(), lesson.getName() + \".csv\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        data.add(parseHeaderDataToStringArray(lesson));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        data.add(parseFieldNamesToStringArray(lesson));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (Card card : lesson.getCards()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            data.add(parseCardDataToStringArray(card));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvUtil.writeCsvFile(filePath, data);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private List\u003cPath\u003e getFilePathsInFolder(Path folderPath) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cPath\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            Files.walk(folderPath, 1).filter(path -\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                path.toString().endsWith(\".csv\")).forEach(paths::add);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return paths;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessonList\u003e readLessonList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return readLessonList(folderPath);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessonList\u003e readLessonList(Path folderPath) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(folderPath);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cPath\u003e paths \u003d getFilePathsInFolder(folderPath);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        if (paths.isEmpty()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (Path filePath : paths) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            Optional\u003cLesson\u003e newLesson \u003d parseFileIntoLesson(filePath);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            newLesson.ifPresent(lessonList::addLesson);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return Optional.of(lessonList);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessonList(LessonList lessonList) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return saveLessonList(lessonList, folderPath);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessonList(LessonList lessonList, Path folderPath) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        requireNonNull(lessonList);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        requireNonNull(folderPath);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        int saveCount \u003d 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cLesson\u003e allLessons \u003d lessonList.getLessons();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (Lesson lesson : allLessons) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                saveLessonToFile(lesson, folderPath);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                saveCount++;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                logger.warning(\"Lesson: \\\"\" + lesson.getName() + \"\\\" failed to save; IOException occurred\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return saveCount;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 338,
      "DigiPie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CsvUserStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * A class to access User stored in the hard disk as a csv file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CsvUserStorage implements UserStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CsvLessonListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final int MAX_SIZE \u003d 5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public CsvUserStorage(Path filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Path getUserFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setUserFilePath(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Parses the given file and attempts to read it. Failure to read will return null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @return the parsed user or null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Optional\u003cUser\u003e parseFileIntoUser(Path filePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        List\u003cString[]\u003e data;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            data \u003d CsvUtil.readCsvFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Unable to read file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        if (data \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Empty/invalid file at: \" + filePath.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        User user \u003d new User();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        for (String[] arr : data) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            Optional\u003cCardSrsData\u003e card \u003d parseStringIntoCard(arr);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            if (card.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                user.addCard(card.get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return Optional.of(user);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Parses the current user into a file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private void parseUserIntoFile(User user, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.getCards();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        for (Map.Entry\u003cInteger, CardSrsData\u003e entry : user.getCards().entrySet()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            data.add(parseCardIntoString(entry.getValue()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CsvUtil.writeCsvFile(filePath, data);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Converts a card with its constructor values into a String Array ready for CSV file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @return a String array with the cardData(hashcode, numAttempts, streak, srs, isDifficult)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private String[] parseCardIntoString(CardSrsData card) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String[] cardArray \u003d new String[5];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[0] \u003d Integer.toString(card.getHashCode());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[1] \u003d Integer.toString(card.getNumOfAttempts());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[2] \u003d Integer.toString(card.getStreak());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cardArray[3] \u003d card.getSrsDueDate().toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        cardArray[4] \u003d String.valueOf(card.isDifficult());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return cardArray;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Converts a card from a String Array in the CSV file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param cardArray"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @return card type with the constructor values"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Optional\u003cCardSrsData\u003e parseStringIntoCard(String[] cardArray) throws"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            NumberFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        if (cardArray.length \u003c MAX_SIZE) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"There are empty values in the file\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        for (int i \u003d 0; i \u003c cardArray.length - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            if (cardArray[i].isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                logger.warning(\"There are empty values in the file\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        int hashCode;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        int numOfAttempts;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        int streak;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        Instant srs;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        boolean isDifficult;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData card;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            hashCode \u003d Integer.parseInt(cardArray[0]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            numOfAttempts \u003d Integer.parseInt(cardArray[1]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            streak \u003d Integer.parseInt(cardArray[2]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            srs \u003d Instant.parse(cardArray[3]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            isDifficult \u003d cardArray[4].equals(\"true\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            if (hashCode \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                logger.warning(\"Hashcode cannot be 0 in \" + filePath.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            if (numOfAttempts \u003c ZERO) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                logger.warning(\"Number of attempts cannot be 0 in \" + filePath.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            if (streak \u003c ZERO) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                logger.warning(\"Streak cannot be 0 in \" + filePath.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Values are not correct in \" + filePath.toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"SrsDate is wrong in \" + filePath.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        card \u003d new CardSrsData(hashCode, numOfAttempts, streak, srs, isDifficult);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return Optional.of(card);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cUser\u003e readUser() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return readUser(filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Optional\u003cUser\u003e readUser(Path filePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        Optional\u003cUser\u003e newUser \u003d parseFileIntoUser(filePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return newUser;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser(User user) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        saveUser(user, filePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser(User users, Path filePath) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(users);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            parseUserIntoFile(users, filePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            logger.warning(\"Failed to save user; IOException occurred\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 196,
      "eugenefdw": 5,
      "halcyoneee": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LessonListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Represents a storage for {@link LessonList}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public interface LessonListStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns the folder path of the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Path getLessonListFolderPath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Sets the folder path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void setLessonListFolderPath(Path folderPath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Returns LessonList data as a {@link LessonList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLessonList\u003e readLessonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @see #getLessonListFolderPath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLessonList\u003e readLessonList(Path folderPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Saves the given {@link LessonList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @param lessonList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @return Number of lessonList successfully saved."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    int saveLessonList(LessonList lessonList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * @see #saveLessonList(LessonList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    int saveLessonList(LessonList lessonList, Path filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public interface Storage extends UserPrefsStorage, LessonListStorage, UserStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cLessonList\u003e readLessonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    int saveLessonList(LessonList lessonList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cUser\u003e readUser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void saveUser(User user);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void deleteLesson(String lessonName) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 10,
      "-": 26,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Manages storage of Lesson and user data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private LessonListStorage lessonListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private UserStorage userStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                          LessonListStorage lessonListStorage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                          UserStorage userStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.lessonListStorage \u003d lessonListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        this.userStorage \u003d userStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private void deleteLessonFile(String lessonName) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path lessonPath \u003d getLessonListFolderPath().resolve(lessonName + \".csv\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Files.delete(lessonPath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LessonList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Path getLessonListFolderPath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonListStorage.getLessonListFolderPath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonListFolderPath(Path folderPath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonListStorage.setLessonListFolderPath(folderPath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessonList\u003e readLessonList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonListStorage.readLessonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cLessonList\u003e readLessonList(Path filePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonListStorage.readLessonList(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessonList(LessonList lessonList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonListStorage.saveLessonList(lessonList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public int saveLessonList(LessonList lessonList, Path filePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonListStorage.saveLessonList(lessonList, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson(String lessonName) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        deleteLessonFile(lessonName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public Path getUserFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return userStorage.getUserFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setUserFilePath(Path folderPath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        userStorage.setUserFilePath(folderPath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cUser\u003e readUser() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return userStorage.readUser();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public Optional\u003cUser\u003e readUser(Path folderPath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return userStorage.readUser(folderPath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveUser(User user) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        userStorage.saveUser(user);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveUser(User user, Path filePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        userStorage.saveUser(user, filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 5,
      "eugenefdw": 56,
      "halcyoneee": 3,
      "-": 56,
      "DigiPie": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " * Represents a storage for {@link User}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public interface UserStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Returns the folder path of the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    Path getUserFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Sets the folder path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    void setUserFilePath(Path folderPath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns LessonList data as a {@link User}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cUser\u003e readUser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @see #getUserFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    Optional\u003cUser\u003e readUser(Path folderPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * Saves the given {@link User} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @param user cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void saveUser(User user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     * @see #saveUser(User, Path)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    void saveUser(User user, Path filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 38,
      "eugenefdw": 4,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String STYLE_CLASS_ERROR \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        commandTextField.getStyleClass().remove(STYLE_CLASS_ERROR);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (styleClass.contains(STYLE_CLASS_ERROR)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        styleClass.add(STYLE_CLASS_ERROR);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 1,
      "-": 148,
      "DigiPie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.util.StringUtil.truncateString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * An UI component that displays information of a {@link Card}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class FlashcardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String FXML \u003d \"FlashcardCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Maximum length of label text before truncation occurs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final int labelMaxLen \u003d 20;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private FlowPane headers;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public FlashcardCard(Card card, int displayedIndex, int questionIndex, int answerIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        name.setText(formatName(card.getCore(questionIndex), card.getCore(answerIndex)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (int i \u003d 0; i \u003c card.getCores().size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String core \u003d card.getCore(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Construct the numbering for the cores"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Needed for setTest command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            sb.append(i + 1).append(\". \").append(core);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Label label \u003d new Label(truncateString(sb.toString(), labelMaxLen));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            label.setTooltip(new Tooltip(core));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (i \u003d\u003d questionIndex || i \u003d\u003d answerIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.getStyleClass().add(\"questionAnswer\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.getStyleClass().add(\"core\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            headers.getChildren().add(label);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (int i \u003d 0; i \u003c card.getOptionals().size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String optional \u003d card.getOptional(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Label label \u003d new Label(truncateString(optional, labelMaxLen));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            label.setTooltip(new Tooltip(optional));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            label.getStyleClass().add(\"opt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            headers.getChildren().add(label);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static String formatName(String question, String answer) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return question + \" / \" + answer;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof FlashcardCard)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        FlashcardCard otherCard \u003d (FlashcardCard) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return card.equals(otherCard.card);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class FlashcardPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String FXML \u003d \"FlashcardPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //private final Logger logger \u003d LogsCenter.getLogger(LessonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ListView\u003cCard\u003e flashcardView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int questionIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int answerIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public FlashcardPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Updates the card list in GUI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param lesson the lesson from {@code ManagementModel}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void updateCardList(Lesson lesson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cCard\u003e cards \u003d lesson.getCards();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.questionIndex \u003d lesson.getQuestionCoreIndex();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.answerIndex \u003d lesson.getAnswerCoreIndex();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        flashcardView.setItems(FXCollections.observableList(cards));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        flashcardView.setCellFactory(listView -\u003e new CardViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Hides the card list in GUI."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void hideCardList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        flashcardView.setItems(FXCollections.emptyObservableList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        flashcardView.setCellFactory(listView -\u003e new CardViewCell());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getViewItemCount() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return flashcardView.getItems().size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code FlashcardCard}.."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    class CardViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        protected void updateItem(Card card, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setGraphic(new FlashcardCard(card, getIndex() + 1,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        questionIndex, answerIndex).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.util.StringUtil.truncateString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * An UI component that displays information of a {@link Lesson}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String FXML \u003d \"LessonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Maximum length of label text before truncation occurs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final int labelMaxLen \u003d 14;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Label count;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private FlowPane headers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        name.setText(lesson.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int cardCount \u003d lesson.getCardCount();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        count.setText(getCountString(cardCount));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int questionIndex \u003d lesson.getQuestionCoreIndex();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int answerIndex \u003d lesson.getAnswerCoreIndex();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String s: lesson.getCoreHeaders()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Label label \u003d new Label(truncateString(s, labelMaxLen));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (i \u003d\u003d questionIndex || i \u003d\u003d answerIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.getStyleClass().add(\"questionAnswer\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.setTooltip(new Tooltip(\"Tested: \" + s));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.getStyleClass().add(\"core\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.setTooltip(new Tooltip(\"Not tested: \" + s));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            headers.getChildren().add(label);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String s: lesson.getOptionalHeaders()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Label label \u003d new Label(truncateString(s, labelMaxLen));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            label.getStyleClass().add(\"opt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            label.setTooltip(new Tooltip(\"Hint: \" + s));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            headers.getChildren().add(label);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static String getCountString(int count) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Contains \").append(count);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (count \u003e 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            sb.append(\" cards\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            sb.append(\" card\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof LessonCard)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonCard card \u003d (LessonCard) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String FXML \u003d \"LessonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonListPanel(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListView.setItems(FXCollections.observableList(lessons));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Updates the lesson list in GUI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param lessons the list of lessons from {@code ManagementModel}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void updateLessonList(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListView.setItems(FXCollections.observableList(lessons));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Updates the lesson list in GUI with a single lesson."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param lesson the list of lessons from {@code ManagementModel}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void updateLessonList(Lesson lesson) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListView.setItems(FXCollections.observableList(Collections.singletonList(lesson)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonOverviewViewCell());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the size of the ListView"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getViewItemCount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonListView.getItems().size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Lesson} using a {@code LessonCard}.."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the size of the ListView"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setGraphic(new LessonCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Lesson}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * using a {@code LessonOverview}.."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return the size of the ListView"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    class LessonOverviewViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                setGraphic(new LessonOverview(lesson).getRoot());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonOverview.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.util.StringUtil.truncateString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * An UI component that displays information of a {@link Lesson}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonOverview extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String FXML \u003d \"LessonOverview.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Maximum length of label text before truncation occurs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final int labelMaxLen \u003d 14;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Label count;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private FlowPane bigHeaders;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonOverview(Lesson lesson) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        name.setText(lesson.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int cardCount \u003d lesson.getCardCount();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Contains \").append(cardCount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (cardCount \u003e 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            sb.append(\" cards\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            sb.append(\" card\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        count.setText(sb.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int questionIndex \u003d lesson.getQuestionCoreIndex();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int answerIndex \u003d lesson.getAnswerCoreIndex();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String s: lesson.getCoreHeaders()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Construct the numbering for the cores"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Needed for setTest command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            sb.append(i + 1).append(\". \").append(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Label label \u003d new Label(truncateString(sb.toString(), labelMaxLen));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (i \u003d\u003d questionIndex || i \u003d\u003d answerIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.getStyleClass().add(\"questionAnswer\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.setTooltip(new Tooltip(\"Tested: \" + s));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                bigHeaders.getChildren().add(label);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.getStyleClass().add(\"core\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                label.setTooltip(new Tooltip(\"Not tested: \" + s));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                bigHeaders.getChildren().add(label);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String s: lesson.getOptionalHeaders()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Label label \u003d new Label(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            label.getStyleClass().add(\"opt\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            label.setTooltip(new Tooltip(\"Hint: \" + s));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            bigHeaders.getChildren().add(label);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!(other instanceof LessonOverview)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonOverview overview \u003d (LessonOverview) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lesson.equals(overview.lesson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class MainPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_QUESTION \u003d \"%1$s: %2$s\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MESSAGE_QUESTION_ANSWER \u003d \"%1$s: %2$s\\n%3$s: %4$s\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String FXML \u003d \"MainPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String boldStyle \u003d \"-fx-font-weight: bold;\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private TextFlow mainPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizCard quizCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private String totalCorrectAndTotalAttempts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public MainPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Displays the current testing card and status information in the main panel."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param quizCard the current testing quizCard."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @param totalCorrectAndTotalAttempts the current status stored in totalCorrectAndTotalAttempts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void setFeedbackToUser(QuizCard quizCard, String totalCorrectAndTotalAttempts) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainPanel.getChildren().clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (quizCard !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            this.quizCard \u003d quizCard;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            this.totalCorrectAndTotalAttempts \u003d totalCorrectAndTotalAttempts;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QuizMode mode \u003d quizCard.getQuizMode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Text questionAnswer \u003d new Text();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            switch (mode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            case PREVIEW:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                questionAnswer.setText(String.format(MESSAGE_QUESTION_ANSWER, quizCard.getQuestionHeader(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    quizCard.getQuestion(), quizCard.getAnswerHeader(), quizCard.getAnswer()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                if (!quizCard.isWrongTwice()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    Text text \u003d new Text(\"\\nPress Enter to go to the next question\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    mainPanel.getChildren().addAll(questionAnswer, text);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    setTotalCorrect();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                mainPanel.getChildren().add(questionAnswer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                setAnswerPrompt();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                setTotalCorrect();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            case REVIEW:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                questionAnswer.setText(String.format(MESSAGE_QUESTION, quizCard.getQuestionHeader(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                    quizCard.getQuestion()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                mainPanel.getChildren().add(questionAnswer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                setAnswerPrompt();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                setTotalCorrect();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanel.getChildren().add(new Text(\"\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void setAnswerPrompt() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Text text1 \u003d new Text(\"\\nType the \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Text answer \u003d new Text(quizCard.getAnswerHeader() + \" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Text text2 \u003d new Text(\"for the \" + quizCard.getQuestionHeader() + \" above and press Enter\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        answer.setStyle(boldStyle);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cText\u003e texts \u003d Arrays.asList(text1, answer, text2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainPanel.getChildren().addAll(texts);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private void setTotalCorrect() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Text text1 \u003d new Text(\"\\n\\nCurrent total correct questions: \" + totalCorrectAndTotalAttempts);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        mainPanel.getChildren().add(text1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 76,
      "lallanachang": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_COMMANDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private LogicManager.Mode mode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private MainPanel mainPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizResultPanel quizResultPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private LessonListPanel lessonListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private FlashcardPanel flashcardPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private VBox sidePanel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private StackPane lessonListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private StackPane mainPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // Set default mode"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mode \u003d LogicManager.Mode.MANAGEMENT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        setTheme();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(logic.getLessons());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListPanelPlaceholder.getChildren().add(lessonListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        splitPane.lookupAll(\".split-pane-divider\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainPanel \u003d new MainPanel();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(mainPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        flashcardPanel \u003d new FlashcardPanel();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(flashcardPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        resultDisplay.setFeedbackToUser(MESSAGE_LESSON_COMMANDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Changes the Ui setting between management and quiz mode"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void handleModeSwitching() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (mode.equals(LogicManager.Mode.MANAGEMENT)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            splitPane.setDividerPosition(0, 0.1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sidePanel.setMinWidth(340);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sidePanel.setPrefWidth(340);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanelPlaceholder.getChildren().add(flashcardPanel.getRoot());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            resultDisplay.setFeedbackToUser(MESSAGE_LESSON_COMMANDS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            splitPane.setDividerPosition(0, 0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sidePanel.setMinWidth(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sidePanel.setPrefWidth(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanelPlaceholder.getChildren().add(mainPanel.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            statusbarPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets the display for quiz mode."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void handleQuiz() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (logic.getQuizCardList() !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizResultPanel \u003d new QuizResultPanel();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanelPlaceholder.getChildren().add(quizResultPanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizResultPanel.setFeedbackToUser(logic.getQuizCardList());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            mainPanel.setFeedbackToUser(logic.getCurrentQuizCard(), logic.getTotalCorrectAndTotalAttempts());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets stylesheet according to the current theme from {@link UserPrefs} object."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void setTheme() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        primaryStage.getScene().getStylesheets().remove(1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(logic.getTheme());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            resultDisplay.setStyleToDefault();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            LogicManager.Mode currentMode \u003d logic.getMode();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            setTheme();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (!currentMode.equals(mode)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                this.mode \u003d currentMode;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                handleModeSwitching();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (commandResult.isShowQuiz()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                handleQuiz();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (logic.getOpenedLesson() !\u003d null) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                flashcardPanel.updateCardList(logic.getOpenedLesson());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                lessonListPanel.updateLessonList(logic.getOpenedLesson());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                flashcardPanel.hideCardList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                lessonListPanel.updateLessonList(logic.getLessons());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            resultDisplay.setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 80,
      "-": 184,
      "DigiPie": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuizResultPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Panel contains list of {@link QuizCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizResultPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String FXML \u003d \"QuizResultPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private ListView\u003cQuizCard\u003e quizResultPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizResultPanel() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setFeedbackToUser(List\u003cQuizCard\u003e quizCardList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultPanel.setItems(FXCollections.observableList(quizCardList));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultPanel.setCellFactory(listView -\u003e new CardViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code FlashcardCard}.."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    class CardViewCell extends ListCell\u003cQuizCard\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        protected void updateItem(QuizCard card, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                setGraphic(new ResultQuizCard(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String STYLE_CLASS_ERROR \u003d \"error\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param feedbackToUser the feedback to return to user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the command box style to indicate a successful command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setStyleToDefault() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        resultDisplay.getStyleClass().remove(STYLE_CLASS_ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (styleClass.contains(STYLE_CLASS_ERROR)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        styleClass.add(STYLE_CLASS_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "DigiPie": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultQuizCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * An UI component that displays information of a {@link Card}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class ResultQuizCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String FXML \u003d \"ResultQuizCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Label cores;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Label streak;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Label totalAttempts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Label accuracy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ResultQuizCard(QuizCard card, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        cores.setText(String.format(\"%s / %s\", card.getQuestion(), card.getAnswer()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        int cardStreak \u003d card.getStreak();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        int cardTotalAttempts \u003d card.getTotalAttempts();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        int cardAccuracy \u003d (int) ((float) cardStreak / cardTotalAttempts * 100);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        streak.setText(\"Streak: \" + cardStreak);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        totalAttempts.setText(\"Total attempts: \" + cardTotalAttempts);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        accuracy.setText(\"Accuracy: \" + cardAccuracy + \"%\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private FlowPane headers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        setUpLegend();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets up all the legends in footer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void setUpLegend() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Label questionAnswer \u003d new Label(\"Tested\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        questionAnswer.getStyleClass().add(\"questionAnswer\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Label core \u003d new Label(\"Not tested\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        core.getStyleClass().add(\"core\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Label hint \u003d new Label(\"Hint\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        hint.getStyleClass().add(\"opt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        headers.getChildren().addAll(questionAnswer, core, hint);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 11,
      "-": 25,
      "DigiPie": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/braintrain_colour_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003cStackPane fx:id\u003d\"commandTextBox\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" styleClass\u003d\"def-colour\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "DigiPie": 2
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-accent: #19b4c5;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-focus-color: #19b4c5;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-base: #555555;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-control-inner-background: #555555;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #555555;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-table-cell-border-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-table-header-border-color: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            #555555"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            #555555"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            #555555;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: derive(#383838, 20%);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-border-color: derive(#383838, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #4a4a4a;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color: #424d5f;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".cell_XXL_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 10px 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".cell_normal_label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 18px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 18px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 5px 10px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: derive(#383838, 20%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".main-panel {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 5 11 5 11;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".menu-item {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".menu-item:hover,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".menu-bar \u003e .container \u003e .menu-button:hover {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #2196F3;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-border-color: #f3f4f8, #f3f4f8;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-fill: #f3f4f8;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f44336;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#commandTextBox, .def-colour {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#filterField, #lessonListPanel, #lessonWebpage {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#resultDisplay .content, #mainPanel .content {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#mainPanel {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0 10 10 10;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#mainPanel \u003e Text {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-fill: DCDCDC;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#headers {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-vgap: 4;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 10 0;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#bigHeaders {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-hgap: 14;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-vgap: 8;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 15 0;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#headers .label {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 3 4;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#bigHeaders .label {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 3 9 3 9;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#headers .questionAnswer, #bigHeaders .questionAnswer {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #009688;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#headers .core, #bigHeaders .core {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     -fx-background-color: #4CAF50;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#headers .opt, #bigHeaders .opt  {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #FF5722;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 19,
      "DigiPie": 104,
      "-": 314
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #F44336;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/resources/view/FlashcardCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"headers\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/resources/view/FlashcardPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  \u003cListView fx:id\u003d\"flashcardView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/resources/view/LessonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"headers\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cLabel fx:id\u003d\"count\" styleClass\u003d\"cell_small_label\" text\u003d\"0 card\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "DigiPie": 2
    }
  },
  {
    "path": "src/main/resources/view/LessonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  \u003cListView fx:id\u003d\"lessonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/resources/view/LessonOverview.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_XXL_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cLabel fx:id\u003d\"count\" styleClass\u003d\"cell_normal_label\" text\u003d\"0 card\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"bigHeaders\" orientation\u003d\"VERTICAL\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 28
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-accent: #19b4c5;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-focus-color: #19b4c5;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 20%);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    background-color: #f3f4f8; /* Used in the default.html file */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-base: #f3f4f8;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-control-inner-background: #f3f4f8;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-table-cell-border-color: #383838;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-table-header-border-color: #383838;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            #e5e7ec"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            #e5e7ec"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            #e5e7ec;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#e5e7ec, 20%);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-border-color: derive(#e5e7ec, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 20%);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #D5DBDF;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #8D9DA5;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-border-color: #B0BEC5;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background: #f3f4f8;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".cell_XXL_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 10px 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".cell_normal_label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 18px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 18px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 20%);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#e5e7ec, 20%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color: derive(#e5e7ec, 10%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 5px 10px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#e5e7ec, 20%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".main-panel {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 5 11 5 11;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#e5e7ec, 30%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color: derive(#e5e7ec, 25%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#e5e7ec, 30%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color: derive(#e5e7ec, 30%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 30%);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 50%);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 20%);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".menu-item {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".menu-item:hover,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ".menu-bar \u003e .container \u003e .menu-button:hover {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #2196F3;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/*"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color: #e5e7ec;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #19b4c5;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: derive(#f3f4f8, 25%);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #bcbdc0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #f44336;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "#commandTextBox, .def-colour {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: transparent #e5e7ec transparent #e5e7ec;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-color: #e5e7ec #e5e7ec #e5e7ec #e5e7ec;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#filterField, #lessonListPanel, #lessonWebpage {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-effect: innershadow(gaussian, #f3f4f8, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#resultDisplay .content, #mainPanel .content {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #f3f4f8;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#mainPanel {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 0 10 10 10;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#mainPanel \u003e Text {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-fill: #1d1d1d;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#headers {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-vgap: 4;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 10 0;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#bigHeaders {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-hgap: 14;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-vgap: 8;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 15 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#headers .label {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-padding: 3 4;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#bigHeaders .label {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-text-fill: #f3f4f8;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-padding: 3 9 3 9;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#headers .questionAnswer, #bigHeaders .questionAnswer {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #009688;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#headers .core, #bigHeaders .core {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    -fx-background-color: #4CAF50;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "#headers .opt, #bigHeaders .opt  {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    -fx-background-color: #FF5722;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 377,
      "DigiPie": 61
    }
  },
  {
    "path": "src/main/resources/view/MainPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003cStackPane prefHeight\u003d\"155.0\" prefWidth\u003d\"488.0\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003cTextFlow fx:id\u003d\"mainPanel\" styleClass\u003d\"main-panel\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         title\u003d\"BrainTrain App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003cImage url\u003d\"@/images/braintrain_colour_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003cVBox fx:id\u003d\"sidePanel\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            \u003cStackPane fx:id\u003d\"lessonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainPanelPlaceholder\" \u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 8,
      "-": 53,
      "DigiPie": 1
    }
  },
  {
    "path": "src/main/resources/view/QuizResultPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  \u003cListView fx:id\u003d\"quizResultPanel\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultQuizCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        \u003cLabel fx:id\u003d\"cores\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003cLabel fx:id\u003d\"streak\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalAttempts\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "      \u003cLabel fx:id\u003d\"accuracy\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 34
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "  \u003cFlowPane fx:id\u003d\"headers\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 11
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/FlashcardCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.ui.FlashcardCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Provides a handle to a lesson card in the lesson list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class FlashcardCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#headers\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public FlashcardCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getHeaders() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if this handle contains {@code lesson}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Card card) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!getName().equals(FlashcardCard.formatName(card.getCore(0), card.getCore(1)))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d getHeaders();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headersToCompare \u003d new ArrayList\u003c\u003e(card.getCores());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headersToCompare.addAll(card.getOptionals());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return headers.equals(headersToCompare);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 68
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/LessonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.ui.LessonCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Provides a handle to a lesson card in the lesson list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String COUNT_FIELD_ID \u003d \"#count\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#headers\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Label countLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        countLabel \u003d getChildNode(COUNT_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getCount() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return countLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getHeaders() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if this handle contains {@code lesson}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Lesson lesson) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!getName().equals(lesson.getName())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (getCount().equals(LessonCard.getCountString(lesson.getCardCount())))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d getHeaders();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headersToCompare \u003d new ArrayList\u003c\u003e(lesson.getCoreHeaders());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headersToCompare.addAll(lesson.getOptionalHeaders());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return headers.equals(headersToCompare);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 75
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/LessonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Provides a handle for {@code LessonListPanel} containing the list of {@code LessonCard}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonListPanelHandle extends NodeHandle\u003cListView\u003cLesson\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String LESSON_LIST_VIEW_ID \u003d \"#lessonListView\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonListPanelHandle(ListView\u003cLesson\u003e lessonListPanelNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(lessonListPanelNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "DigiPie": 14
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/LessonOverviewHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.ui.LessonCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Provides a handle to a lesson card in the lesson list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonOverviewHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String COUNT_FIELD_ID \u003d \"#count\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#bigHeaders\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final Label countLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonOverviewHandle(Node cardNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        countLabel \u003d getChildNode(COUNT_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getCount() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return countLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getHeaders() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns true if this handle contains {@code lesson}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean equals(Lesson lesson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (!getName().equals(lesson.getName())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                || (getCount().equals(LessonCard.getCountString(lesson.getCardCount())))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d getHeaders();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headersToCompare \u003d new ArrayList\u003c\u003e(lesson.getCoreHeaders());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headersToCompare.addAll(lesson.getOptionalHeaders());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return headers.equals(headersToCompare);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 67
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * A handler for the {@code MainPanel} of the UI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class MainPanelHandle extends NodeHandle\u003cTextFlow\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final String MAIN_PANEL_ID \u003d \"#mainPanel\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public MainPanelHandle(TextFlow mainPanelNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(mainPanelNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (Node node: getRootNode().getChildren()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            sb.append(((Text) node).getText());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 29
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final LessonListPanelHandle lessonListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final MainPanelHandle mainPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        lessonListPanel \u003d new LessonListPanelHandle(getChildNode(LessonListPanelHandle.LESSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainPanel \u003d new MainPanelHandle(getChildNode(MainPanelHandle.MAIN_PANEL_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public LessonListPanelHandle getLessonListPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return lessonListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public MainPanelHandle getMainPanel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return mainPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 8,
      "-": 37
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/QuizResultPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Provides a handle to a lesson card in the lesson list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizResultPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String FIELD_ID \u003d \"#quizResultPanel\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final ListView\u003cQuizCard\u003e quizResultPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizResultPanelHandle(Node cardNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultPanel \u003d getChildNode(FIELD_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public int getViewItemCount() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizResultPanel.getItems().size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 24
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultQuizCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Provides a handle to a lesson card in the lesson list panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class ResultQuizCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String CORES_FIELD_ID \u003d \"#cores\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String STREAK_FIELD_ID \u003d \"#streak\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String TOTAL_ATTEMPTS_FIELD_ID \u003d \"#totalAttempts\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String ACCURACY_FIELD_ID \u003d \"#accuracy\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final Label coresLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final Label streakLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final Label totalAttemptsLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final Label accuracyLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ResultQuizCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        coresLabel \u003d getChildNode(CORES_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        streakLabel \u003d getChildNode(STREAK_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        totalAttemptsLabel \u003d getChildNode(TOTAL_ATTEMPTS_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        accuracyLabel \u003d getChildNode(ACCURACY_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getCores() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return coresLabel.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getStreak() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return streakLabel.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getTotalAttempts() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return totalAttemptsLabel.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getAccuracy() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return accuracyLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, expected);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(5, expected);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(expected, parametersStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(parametersStub);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        AppParameters copy \u003d new AppParameters();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        copy.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        AppParameters different \u003d new AppParameters();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        different.setConfigPath(Paths.get(\"random\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(appParameters.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(appParameters.hashCode(), different.hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 34,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.storage.CsvLessonListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.storage.LessonListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.storage.UserStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getAndCreateFilePathInSandBoxFolder(\"data\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Path SAVE_USER_LOCATION_FOR_TESTING \u003d TestUtil.getAndCreateFilePathInSandBoxFolder(\"data/user\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected Supplier\u003cLessonList\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected Path saveUserFileLocation \u003d SAVE_USER_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected ManagementModel testManagementModel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public TestApp(Supplier\u003cLessonList\u003e initialDataSupplier, Path saveFileLocation, Path saveUserFileLocation) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.saveUserFileLocation \u003d saveUserFileLocation;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            CsvLessonListStorage csvLessonListStorage \u003d new CsvLessonListStorage(saveFileLocation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            csvLessonListStorage.saveLessonList(initialDataSupplier.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setLessonListFolderPath(saveFileLocation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setUserFilePath(saveUserFileLocation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected LessonList initLessonList(LessonListStorage storage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return super.initLessonList(storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected User initUser(UserStorage storage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return super.initUser(storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns a defensive copy of the lesson list data stored inside the storage file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cLesson\u003e readStorageLessonList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Optional\u003cLessonList\u003e optionalLessonList \u003d storage.readLessonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (optionalLessonList.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            lessonList \u003d optionalLessonList.get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return lessonList.getLessons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns a defensive copy of the management model."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ManagementModel getManagementModel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.testManagementModel \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new ManagementModelManager(new UserPrefs(), managementModel.getLessonList(), new User());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return testManagementModel;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns a defensive copy of the quiz model."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizModel getQuizModel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel quizModel \u003d new QuizModelManager(new ManagementModelManager(new UserPrefs(), new LessonList(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            managementModel.getUser()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return quizModel;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 48,
      "-": 74,
      "DigiPie": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // comparing with an object which is not a Config -\u003e return false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(defaultConfig, new Object());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(defaultConfig, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(defaultConfig, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // comparing with another Config which is different -\u003e return false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Config anotherConfig \u003d new Config();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        anotherConfig.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(defaultConfig, anotherConfig);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "DigiPie": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/GuiSettingsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class GuiSettingsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals_sameGuiSettings_equalIsTrue() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        GuiSettings one \u003d new GuiSettings();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        GuiSettings another \u003d new GuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // compare same -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(one, one);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // compare default GuiSettings -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(one, another);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals_differentObject_equalIsFalse() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        GuiSettings one \u003d new GuiSettings();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Object another \u003d new Object();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // compare with Object -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(one, another);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(one, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/LogsCenterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LogsCenterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getLogger_nullParameter_returnLoggerWithEmptyName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Logger logger \u003d LogsCenter.getLogger((Class\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // pass in null class -\u003e should return logger with empty name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(Logger.getLogger(\"\"), logger);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Tests not early access version vs early access same version"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        another \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void versionComparable_invalidVersion_equalIsFalse() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(one.equals(new Object()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 139,
      "DigiPie": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(fifthPersonIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "DigiPie": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/index/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.commons.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CsvUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.AccessDeniedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class CsvUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static final String[] TEST_STRINGS \u003d new String[]{\"ab\", \"bc\", \"cd\", \"de\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path INVALID_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvUtilTest\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"empty.bmp\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path TEST_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvUtilTest\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"test.csv\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path READ_ONLY_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvUtilTest\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"test-readonly.csv\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path BOM_EMPTY_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvUtilTest\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"test-bomempty.csv\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            CsvUtil.readCsvFile(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    // I can\u0027t guarantee the path is access denied since it might be OS dependent, so.."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_accessDeniedPath_throwsAccessDeniedException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        final Path emptyPath \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(AccessDeniedException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            CsvUtil.readCsvFile(emptyPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_nonExistentPath() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        final Path fakePath \u003d Paths.get(\"doesnotexist\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNull(CsvUtil.readCsvFile(fakePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_invalidFile() throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d INVALID_FILE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(null, CsvUtil.readCsvFile(path));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile_emptyBomFile() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d BOM_EMPTY_FILE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(null, CsvUtil.readCsvFile(path));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readCsvFile() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d TEST_FILE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d CsvUtil.readCsvFile(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String[] testData \u003d TEST_STRINGS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        for (int i \u003d 0; i \u003c testData.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            String value \u003d testData[i];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            for (String str : data.get(i)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                assertEquals(value, str);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void writeCsvFile() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d TestUtil.getFilePathInSandboxFolder(\"test_write.csv\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d Arrays.asList(TEST_STRINGS, TEST_STRINGS, TEST_STRINGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertTrue(CsvUtil.writeCsvFile(path, data));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        data \u003d CsvUtil.readCsvFile(path);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotNull(data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void writeCsvFile_emptyData() throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d TestUtil.getFilePathInSandboxFolder(\"test_write_empty.csv\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertFalse(CsvUtil.writeCsvFile(path, data));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void writeCsvFile_invalidFile() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path path \u003d READ_ONLY_FILE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        File file \u003d path.toFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        file.setReadOnly();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        List\u003cString[]\u003e data \u003d Arrays.asList(TEST_STRINGS, TEST_STRINGS, TEST_STRINGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(AccessDeniedException.class, () -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            CsvUtil.writeCsvFile(path, data);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.util.StringUtil.hasEmptyStrings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.util.StringUtil.truncateString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void testForEmptyStrings_hasEmptyString_returnsTrue() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        strings.add(\"Hi\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        strings.add(\"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(hasEmptyStrings(strings));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void testForEmptyStrings_hasNoEmptyString_returnsFalse() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        strings.add(\"Hi\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        strings.add(\"Bye\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(hasEmptyStrings(strings));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void truncateString_stringLessThanMaxLength_noTruncation() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String s \u003d \"Hello\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same length as max length -\u003e no truncation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(s, truncateString(s, s.length()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // smaller length than max length -\u003e no truncation"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(s, truncateString(s, s.length() + 1));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // smaller length than max length -\u003e no truncation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(s, truncateString(s, Integer.MAX_VALUE));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void truncateString_stringMoreThanMaxLength_returnTruncated() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String s \u003d \"Hello World\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedOutput \u003d \"He...\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String actualOutput \u003d truncateString(s, 5);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // larger length than max length -\u003e truncation"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(s, actualOutput);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 160,
      "DigiPie": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandHistoryWithA \u003d\u003d null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.ChangeThemeCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.HistoryCommand.MESSAGE_NO_HISTORY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizAnswerCommand.MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_TEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_CORE_HEADER_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_CORE_HEADER_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2_ACTUAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.EditLessonCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.ExitCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HistoryCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.QuitLessonCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.management.ReloadLessonsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAnswerCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizQuitCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStatusCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvLessonListStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvUserStorage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private StorageManager storage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private ManagementModel managementModel;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel quizModel;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModelManager expectedModel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz quizExpected;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz quizActual;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage lessonListStorage \u003d new CsvLessonListStorage(temporaryFolder.newFolder().toPath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvUserStorage userStorage \u003d new CsvUserStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, lessonListStorage, userStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel \u003d new QuizModelManager(managementModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        logic \u003d new LogicManager(managementModel, quizModel, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizExpected \u003d new Quiz(SESSION_DEFAULT_2.generateSession(), SESSION_DEFAULT_2.getMode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizActual \u003d new Quiz(SESSION_DEFAULT_2_ACTUAL.generateSession(), SESSION_DEFAULT_2_ACTUAL.getMode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel \u003d new QuizModelManager(new ManagementModelManager());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void execute_storageCommands_successfulFileReloadDelete() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonList.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storage.saveLessonList(lessonList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1, storage.readLessonList().orElse(new LessonList()).getLessons().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertCommandSuccess(ReloadLessonsCommand.COMMAND_WORD , ReloadLessonsCommand.MESSAGE_SUCCESS, managementModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertCommandSuccess(DeleteLessonCommand.COMMAND_WORD + \" 1\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            String.format(DeleteLessonCommand.MESSAGE_SUCCESS , \"Capitals\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            managementModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, storage.readLessonList().orElse(new LessonList()).getLessons().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void execute_saveCommandInvalidFile_throwsIoExceptions() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonList.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storage.saveLessonList(lessonList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        File file \u003d new File(storage.getLessonListFolderPath().resolve(\"Capitals.csv\").toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        file.setReadOnly();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertCommandSuccess(ReloadLessonsCommand.COMMAND_WORD , ReloadLessonsCommand.MESSAGE_SUCCESS, managementModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CommandResult expected \u003d new CommandResult(LogicManager.FAIL_SAVE_LESSONS_MESSAGE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            + LogicManager.CHECK_LOGS_MESSAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        logic.execute(EditLessonCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(expected.getFeedbackToUser(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            logic.execute(QuitLessonCommand.COMMAND_WORD).getFeedbackToUser());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_emptyCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String invalidCommand \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseException(invalidCommand,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(result.getFeedbackToUser(), MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_startCommand_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        lessonList.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModelManager expectedMgmtMgr \u003d new ManagementModelManager(new UserPrefs(), lessonList, new User());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        managementModel \u003d new ManagementModelManager(new UserPrefs(), lessonList, new User());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        logic \u003d new LogicManager(managementModel, quizModel, storage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(StartCommand.COMMAND_WORD + \" 1 c/2 m/PREVIEW\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                \"Starting new quiz\\nCurrent lesson: Capitals\", expectedMgmtMgr);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quizCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expected \u003d new CommandResult(\"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"tokyo\", expected.getFeedbackToUser(), expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(new QuizAnswerCommand(\"someanswer\").execute(quizModel, history).isShowQuiz());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quitCommand_success() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, \"Brussels\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateUserProfile(expectedModel.end());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expected \u003d new CommandResult(String.format(QuizQuitCommand.MESSAGE_SUCCESS, 1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.updateTotalAttemptsAndStreak(0, \"Brussels\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"\\\\quit\", expected.getFeedbackToUser(), expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quizStatusCommand_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expected \u003d new CommandResult(String.format(QuizStatusCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedModel.getQuizTotalAttempts(), expectedModel.getQuizTotalCorrectQuestions(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedModel.getCurrentProgress()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"\\\\status\", expected.getFeedbackToUser(), expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_changeThemeCommand_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModel expectedMgmtModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMgmtModel.changeTheme();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expected \u003d String.format(MESSAGE_SUCCESS, \"dark\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"changeTheme\", expected, expectedMgmtModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isShowHelp() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(new HelpCommand().execute(managementModel, history).isShowHelp());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isExit() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(new ExitCommand().execute(managementModel, history).isExit());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getMode() throws CommandException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // after quiz started"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"\", \"\", expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(LogicManager.Mode.QUIZ, logic.getMode());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // view result display"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        new QuizAnswerCommand(\"japan\").execute(quizModel, history);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(LogicManager.Mode.QUIZ, logic.getMode());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // after quiz ended"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        new QuizAnswerCommand(\"\").execute(quizModel, history);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(LogicManager.Mode.MANAGEMENT, logic.getMode());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void getLessons() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        lessonList.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        managementModel \u003d new ManagementModelManager(new UserPrefs(), lessonList, new User());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        logic \u003d new LogicManager(managementModel, quizModel, storage);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(new LessonBuilder().build(), logic.getLessons().get(0));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentQuizCard() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"\", \"\", expectedModel);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel.getCurrentQuizCard(), logic.getCurrentQuizCard());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getTotalCorrectAndTotalAttempts() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, \"Brussels\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedResult \u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedModel.getQuizTotalCorrectQuestions() + \" out of \" + expectedModel.getQuizTotalAttempts();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"Brussels\", MESSAGE_CORRECT, expectedModel);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedResult, logic.getTotalCorrectAndTotalAttempts());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getEndResult() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, \"japan\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expectedResult \u003d expectedModel.getQuizCardList();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d MESSAGE_CORRECT + QuizAnswerCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizModel.getNextCard();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(\"japan\", expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedResult, logic.getQuizCardList());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getHistory() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory empty \u003d new CommandHistory();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(empty.getHistory(), logic.getHistory());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Also confirms that {@code expectedManagementModel} is as specified."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                      ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedManagementModel);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, QuizModel)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, ManagementModel)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedManagementModel);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      - the internal management manager data are same as those in the {@code expectedManagementModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      - {@code expectedManagementModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                           String expectedMessage, ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertNull(expectedException);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expectedManagementModel, managementModel);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *      - the internal management manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                       String expectedMessage, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertNull(expectedException);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel, quizModel);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void testManagementInputOutput() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d AddLessonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + PREFIX_LESSON_NAME + DEFAULT_NAME + \" \""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + PREFIX_TEST + DEFAULT_CORE_HEADER_1 + \" \""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + PREFIX_TEST + DEFAULT_CORE_HEADER_2;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(command);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertNotNull(commandResult);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Parsing and execution of AddLessonCommand should not fail due to"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // CommandException and ParseException given it is the correct format."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of \""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    + \"AddLessonCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 33,
      "halcyoneee": 231,
      "lallanachang": 10,
      "-": 116,
      "DigiPie": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandResult \u003d\u003d null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void constructResultToShowCards_validParameters_correctFlags() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(commandResult.isShowQuiz());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(commandResult.isShowQuiz());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(commandResult.isShowCards());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 8,
      "-": 48,
      "DigiPie": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/AddCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.AddCardCommand.MESSAGE_DUPLICATE_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.Lesson.EXCEPTION_CORE_SIZE_MISMATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link AddCardCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddCardCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add null card -\u003e NullPointerException thrown"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddCardCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAdd modelStub \u003d new MgtModelStubAcceptingAdd();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid card -\u003e card added successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddCardCommand(validCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // card added successfully -\u003e success feedback"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(AddCardCommand.MESSAGE_SUCCESS, validCard),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // card added successfully -\u003e card in cards"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(Collections.singletonList(validCard), modelStub.cards);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_addDuplicateCards_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAdd modelStub \u003d new MgtModelStubAcceptingAdd();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid card -\u003e card added successfully"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddCardCommand(validCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // card added successfully -\u003e success feedback"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(AddCardCommand.MESSAGE_SUCCESS, validCard),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid card again -\u003e throws command exception"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddCardCommand(validCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_noCores_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAdd modelStub \u003d new MgtModelStubAcceptingAdd();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card invalidCard \u003d new Card(new ArrayList\u003cString\u003e(), new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add invalid card -\u003e command exception thrown"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddCardCommand(invalidCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_missingCore_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAdd modelStub \u003d new MgtModelStubAcceptingAdd();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Create a list of cores with 1 less core than required"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArrayList\u003cString\u003e cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (int i \u003d 1; i \u003c modelStub.getOpenedLessonCoreHeaders().size() - 1; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            cores.add(\"Test core\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Create an invalid card with 1 missing core"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card invalidCard \u003d new Card(cores, new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add invalid card -\u003e command exception thrown"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddCardCommand(invalidCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_missingOpenedLesson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubNoOpenLesson modelStub \u003d new MgtModelStubNoOpenLesson();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid card but there is no open lesson -\u003e command exception thrown"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddCardCommand(validCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(validCard);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute AddCardCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addCardCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card cardDefault \u003d new CardBuilder(TypicalCards.CARD_JAPAN).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card cardTrueFalse \u003d new CardBuilder(TypicalCards.CARD_CAT).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddCardCommand addCardDefCommand \u003d new AddCardCommand(cardDefault);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddCardCommand addCardPropCommand \u003d new AddCardCommand(cardTrueFalse);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(addCardDefCommand, addCardDefCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddCardCommand addCardDefCommandCopy \u003d new AddCardCommand(cardDefault);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(addCardDefCommand, addCardDefCommandCopy);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addCardDefCommand, 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addCardDefCommand, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addCardDefCommand, addCardPropCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always accept the card being added."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubAcceptingAdd extends ManagementModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final ArrayList\u003cString\u003e coreHeaders;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public MgtModelStubAcceptingAdd() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            coreHeaders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            coreHeaders.add(\"Question\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            coreHeaders.add(\"Answer\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cString\u003e getOpenedLessonCoreHeaders() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return coreHeaders;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addCardToOpenedLesson(Card card) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // All Card objects added must have the same number of cores as the number of core headers."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (card.getCores().size() !\u003d coreHeaders.size()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_CORE_SIZE_MISMATCH);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            for (String field: card.getCores()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                if (field.isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    throw new IllegalArgumentException(EXCEPTION_CORE_SIZE_MISMATCH);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            cards.add(card);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean openLessonHasCard(Card cardToCheck) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            for (Card card : cards) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                if (card.equals(cardToCheck)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always fail when attempting to add"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * card given there is no open lesson."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubNoOpenLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 218
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/AddLessonCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.AddLessonCommand.MESSAGE_DUPLICATE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.LessonList.EXCEPTION_INVALID_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link AddLessonCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void constructor_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add null lesson -\u003e NullPointerException thrown"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddLessonCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAdd modelStub \u003d new MgtModelStubAcceptingAdd();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid lesson -\u003e lesson added successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddLessonCommand(validLesson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added successfully -\u003e success feedback"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(AddLessonCommand.MESSAGE_SUCCESS, validLesson),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added successfully -\u003e lesson in lessons"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(Collections.singletonList(validLesson), modelStub.lessons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_validLessonButHaveOpenedLesson_addUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAdd modelStub \u003d new MgtModelStubAcceptingAdd();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid lesson -\u003e lesson added successfully"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddLessonCommand(validLesson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added successfully -\u003e success feedback"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(AddLessonCommand.MESSAGE_SUCCESS, validLesson),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open added lesson"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.openLesson(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to add valid lesson but there is an opened lesson -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // ask user to close opened lesson first"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddLessonCommand(validLesson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_duplicateLessonName_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAdd modelStub \u003d new MgtModelStubAcceptingAdd();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid lesson -\u003e lesson added successfully"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d new AddLessonCommand(validLesson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added successfully -\u003e success feedback"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(AddLessonCommand.MESSAGE_SUCCESS, validLesson),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid lesson with the same name -\u003e command exception thrown"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_DUPLICATE_NAME, validLesson.getName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddLessonCommand(validLesson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonCommand \u003d new AddLessonCommand(validLesson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute AddLessonCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        addLessonCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson lessonDefault \u003d new LessonBuilder(TypicalLessonList.LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson lessonTrueFalse \u003d new LessonBuilder(TypicalLessonList.LESSON_TRUE_FALSE).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonDefCommand \u003d new AddLessonCommand(lessonDefault);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonPropCommand \u003d new AddLessonCommand(lessonTrueFalse);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(addLessonDefCommand, addLessonDefCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        AddLessonCommand addLessonDefCommandCopy \u003d new AddLessonCommand(lessonDefault);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(addLessonDefCommand, addLessonDefCommandCopy);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addLessonDefCommand, 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addLessonDefCommand, null);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(addLessonDefCommand, addLessonPropCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always accept the lesson being added."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubAcceptingAdd extends ManagementModelStub {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * The {@link Lesson} object currently in focus. All lesson-editing-related commands will apply"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * to this lesson."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private Lesson openedLesson \u003d null; // The lesson currently being edited"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean hasLessonWithName(String name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                if (lesson.getName().equals(name)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public String openLesson(int index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                openedLesson \u003d lessons.get(index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return openedLesson.getName();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return openedLesson !\u003d null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.add(lesson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "halcyoneee": 2,
      "DigiPie": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ChangeThemeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.UserPrefs.DARK_THEME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class ChangeThemeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new ChangeThemeCommand().execute(model, commandHistory));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_changeTheme_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new ChangeThemeCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(String.format(ChangeThemeCommand.MESSAGE_SUCCESS, \"dark\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * A ManagementModel stub which always accept changing theme to dark."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private class MgtModelStub extends ManagementModelStub {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public String changeTheme() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return DARK_THEME;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * - the {@code actualManagementModel} matches {@code expectedManagementModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, ManagementModel actualManagementModel,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            CommandHistory actualCommandHistory, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            CommandResult result \u003d command.execute(actualManagementModel, actualCommandHistory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertEquals(expectedManagementModel, actualManagementModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ManagementModel, CommandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * CommandResult, ManagementModel)}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, ManagementModel actualManagementModel,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                                            ManagementModel expectedManagementModel) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(command, actualManagementModel, actualCommandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedManagementModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 31,
      "DigiPie": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/DeleteCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.LessonList.EXCEPTION_INVALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link DeleteCardCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteCardCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Index toDeleteIndex1 \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Index toDeleteIndex2 \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_openedLessonAndValidCard_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAddDelete modelStub \u003d new MgtModelStubAcceptingAddDelete();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.addCardToOpenedLesson(CARD_JAPAN); // always work"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete a card which exists in model -\u003e card deleted successfully"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new DeleteCardCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // card deleted successfully -\u003e success feedback"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(DeleteCardCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_noOpenedLesson_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubWithNoOpenedLesson modelStub \u003d new MgtModelStubWithNoOpenedLesson();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete a card which does not exist in model -\u003e CommandException thrown"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new DeleteCardCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_noCardAtIndex_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAddDelete modelStub \u003d new MgtModelStubAcceptingAddDelete();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete a card which does not exist in model -\u003e CommandException thrown"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                toDeleteIndex.getOneBased()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new DeleteCardCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAddDelete modelStub \u003d new MgtModelStubAcceptingAddDelete();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete a card which does not exist in model -\u003e CommandException thrown"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                toDeleteIndex.getOneBased()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new DeleteCardCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(toDeleteIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute DeleteCardCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        deleteCardCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteCardCommand deleteCardCommand1 \u003d new DeleteCardCommand(toDeleteIndex1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteCardCommand deleteCardCommand2 \u003d new DeleteCardCommand(toDeleteIndex2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(deleteCardCommand1, deleteCardCommand1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteCardCommand deleteCardCommandCopy \u003d new DeleteCardCommand(toDeleteIndex1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(deleteCardCommand1, deleteCardCommandCopy);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteCardCommand1, 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteCardCommand1, null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteCardCommand1, deleteCardCommand2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always reject card add and delete because no lesson is opened."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubWithNoOpenedLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always accept card add and delete given that a lesson is opened."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubAcceptingAddDelete extends ManagementModelStub {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Gets the {@code Card} objects from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @return {@code Card} objects from the opened {@link Lesson} object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns null if there are no cards found."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cCard\u003e getOpenedLessonCards() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addCardToOpenedLesson(Card card) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            cards.add(card);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteCardFromOpenedLesson(int index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                cards.remove(index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/DeleteLessonCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.LessonList.EXCEPTION_INVALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link DeleteLessonCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Index toDeleteIndex1 \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Index toDeleteIndex2 \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonDeletedByModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAddDelete modelStub \u003d new MgtModelStubAcceptingAddDelete();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.addLesson(LESSON_DEFAULT); // always work"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete a lesson which exists in model -\u003e lesson deleted successfully"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new DeleteLessonCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson deleted successfully -\u003e success feedback"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(DeleteLessonCommand.MESSAGE_SUCCESS, LESSON_DEFAULT.getName()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonNotInModel_deleteUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubAcceptingAddDelete modelStub \u003d new MgtModelStubAcceptingAddDelete();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete a lesson which does not exist in model -\u003e CommandException thrown"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new DeleteLessonCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonHasOpenedLesson_deleteUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelWithOpenedLesson modelStub \u003d new MgtModelWithOpenedLesson();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.addLesson(LESSON_DEFAULT); // always work"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete a lesson which exists in model BUT there is opened lesson -\u003e throws command exception"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new DeleteLessonCommand(toDeleteIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(toDeleteIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute DeleteLessonCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        deleteLessonCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand1 \u003d new DeleteLessonCommand(toDeleteIndex1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand2 \u003d new DeleteLessonCommand(toDeleteIndex2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(deleteLessonCommand1, deleteLessonCommand1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        DeleteLessonCommand deleteLessonCommandCopy \u003d new DeleteLessonCommand(toDeleteIndex1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(deleteLessonCommand1, deleteLessonCommandCopy);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteLessonCommand1, 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteLessonCommand1, null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(deleteLessonCommand1, deleteLessonCommand2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always accept the lesson being added and can always delete a lesson if"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * it exists."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubAcceptingAddDelete extends ManagementModelStub {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.add(lesson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return lessons.get(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.remove(index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always reject lesson adding and deleting because lesson is open"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelWithOpenedLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.add(lesson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return lessons.get(index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.remove(index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 2,
      "DigiPie": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/EditLessonCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.LessonList.EXCEPTION_INVALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link EditLessonCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class EditLessonCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonOpenedByModel_openSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.addLesson(LESSON_DEFAULT); // always work"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opens a lesson which exists in model -\u003e lesson opened successfully"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toOpenIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new EditLessonCommand(toOpenIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson opened successfully -\u003e success feedback"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(EditLessonCommand.MESSAGE_SUCCESS, LESSON_DEFAULT.getName()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // get opened lesson which was added -\u003e same as lesson which was added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelStub.getOpenedLesson(), LESSON_DEFAULT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_alreadyHasOpenLesson_openUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.addLesson(LESSON_DEFAULT); // always work"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opens a lesson which exists in model -\u003e lesson opened successfully"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toOpenIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new EditLessonCommand(toOpenIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opens another lesson again -\u003e lesson open unsuccessful, need to close first"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        toOpenIndex \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new EditLessonCommand(toOpenIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonOpenedByModel_openUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toOpenIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opens a lesson which does not exist in model -\u003e CommandException thrown"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new EditLessonCommand(toOpenIndex).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toOpenIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand(toOpenIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute EditLessonCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        editLessonCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toOpenIndex1 \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toOpenIndex2 \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        EditLessonCommand editLessonCommand1 \u003d new EditLessonCommand(toOpenIndex1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        EditLessonCommand editLessonCommand2 \u003d new EditLessonCommand(toOpenIndex2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(editLessonCommand1, editLessonCommand1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        EditLessonCommand editLessonCommandCopy \u003d new EditLessonCommand(toOpenIndex1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(editLessonCommand1, editLessonCommandCopy);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(editLessonCommand1, 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(editLessonCommand1, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(editLessonCommand1, editLessonCommand2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub for testing openLesson command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStub extends ManagementModelStub {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private final ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * The {@link Lesson} object currently in focus. All lesson-editing-related commands will apply"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * to this lesson."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private Lesson openedLesson \u003d null; // The lesson currently being edited"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.add(lesson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return lessons.get(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the {@link #openedLesson}. A lesson is opened by calling {@link #openLesson(int)} and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * closed by calling {@link #closeLesson()}. If there is no lesson currently opened, this returns"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @return the {@link Lesson} object in {@link #openedLesson}. Null if there is no opened lesson."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getOpenedLesson() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return openedLesson;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Sets {@link #openedLesson} to the lesson at the specified index."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * All lesson-editing-related commands will apply to this lesson."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @param index index of the lesson to be assigned to {@link #openedLesson}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @return the name of the lesson"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public String openLesson(int index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                openedLesson \u003d lessons.get(index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                return openedLesson.getName();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(EXCEPTION_INVALID_INDEX + index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return openedLesson !\u003d null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessons.remove(index);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "DigiPie": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link ExitCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), managementModel, commandHistory,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedCommandResult, expectedManagementModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 13,
      "DigiPie": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.HelpCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link HelpCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), managementModel, commandHistory,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedCommandResult, expectedManagementModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 13,
      "DigiPie": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link HistoryCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModel expectedManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), managementModel, history,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                HistoryCommand.MESSAGE_NO_HISTORY, expectedManagementModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), managementModel, history,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedManagementModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), managementModel, history, expectedMessage, expectedManagementModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 25,
      "DigiPie": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ListCardsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ListCardsCommand.MESSAGE_NO_CARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Contains tests for ListCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ListCardsCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_noOpenedLesson_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel modelStub \u003d new MgtModelStubWithNoCards();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to list all cards when there is no opened lesson -\u003e error message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new ListCardsCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_openedLessonHasNoCards_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubWithNoCards modelStub \u003d new MgtModelStubWithNoCards();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.setIsThereOpenedLesson(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to list all cards when there is no cards in opened lesson -\u003e error message"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_NO_CARDS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new ListCardsCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_openedLessonHasCards_listCards() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel modelStub \u003d new MgtModelStubWithCards();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to list all cards when there are cards -\u003e list all cards"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d new ListCardsCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListCardsCommand listCardsCommand \u003d new ListCardsCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute ListCardsCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        listCardsCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void buildEmptyList_buildSuccessful() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String feedback \u003d new ListCardsCommand().buildList(new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(feedback, MESSAGE_NO_CARDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListCardsCommand listCardsCommand \u003d new ListCardsCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(listCardsCommand, listCardsCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // all ListCardsCommand objects are the same -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListCardsCommand listCardsCommand2 \u003d new ListCardsCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(listCardsCommand, listCardsCommand2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(listCardsCommand, 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(listCardsCommand, null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubWithNoCards extends ManagementModelStub {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private boolean isThereOpenedLesson \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setIsThereOpenedLesson(boolean isThereOpenedLesson) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            this.isThereOpenedLesson \u003d isThereOpenedLesson;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return isThereOpenedLesson;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cCard\u003e getOpenedLessonCards() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubWithCards extends ManagementModelStub {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cCard\u003e getOpenedLessonCards() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return TypicalLessonList.LESSON_DEFAULT.getCards();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cString\u003e getOpenedLessonCoreHeaders() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return TypicalLessonList.LESSON_DEFAULT.getCoreHeaders();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cString\u003e getOpenedLessonOptionalHeaders() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return TypicalLessonList.LESSON_DEFAULT.getOptionalHeaders();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 4,
      "DigiPie": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ListLessonsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ListLessonsCommand.MESSAGE_NO_LESSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Contains tests for ListCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ListLessonsCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_listNoLessons_listSuccessful() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel modelStub \u003d new MgtModelStubWithNoLessons();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to list all lessons when there are no lessons -\u003e return feedback that there are no lessons"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListLessonsCommand(), modelStub,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandHistory, MESSAGE_NO_LESSONS, modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_listLessons_listSuccessful() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel modelStub \u003d new MgtModelStubWithLessons();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListLessonsCommand listLessonsCommand \u003d new ListLessonsCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String expectedOutput \u003d listLessonsCommand.buildList(TypicalLessonList.getTypicalLessonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to list all lessons when there are lessons -\u003e list all lessons"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListLessonsCommand(), modelStub, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedOutput, modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_listLessonsWhenHasOpenedLesson_listUnsuccessful() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubWithOpenedLesson modelStub \u003d new MgtModelStubWithOpenedLesson();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to list all lessons when in Lesson View mode (opened lesson) -\u003e exception thrown"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new ListLessonsCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListLessonsCommand listLessonsCommand \u003d new ListLessonsCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute ListLessonsCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        listLessonsCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListLessonsCommand listLessonCommand \u003d new ListLessonsCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(listLessonCommand, listLessonCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // all ListLessonsCommand objects are the same -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ListLessonsCommand listLessonCommand2 \u003d new ListLessonsCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(listLessonCommand, listLessonCommand2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(listLessonCommand, 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(listLessonCommand, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubWithNoLessons extends ManagementModelStub {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubWithLessons extends ManagementModelStub {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return TypicalLessonList.getTypicalLessonList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubWithOpenedLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            return TypicalLessonList.getTypicalLessonList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "halcyoneee": 1,
      "DigiPie": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ManagementCommandsIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ListLessonsCommand.MESSAGE_NO_LESSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Integration tests for the {@link AddLessonCommand}, {@link DeleteLessonCommand}, {@link ListLessonsCommand},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * {@link EditLessonCommand}, {@link ListCardsCommand} and {@link QuitLessonCommand}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * which are executed using an actual {@link ManagementModelManager}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementCommandsIntegrationTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModelManager model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cCard\u003e validCards \u003d validLesson.getCards();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Tests {@link AddLessonCommand}, {@link DeleteLessonCommand} and {@link ListLessonsCommand} with"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link ManagementModelManager}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * \u003cbr\u003e\u003cbr\u003eYou should be able to run {@link ListLessonsCommand} at any point in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * time and the output generated by it should be updated when lessons are added and deleted by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link AddLessonCommand} and {@link DeleteLessonCommand}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_listListAddDeleteLesson_allSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 1: listLessons"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // list lessons when there are no lessons -\u003e command successful with feedback that there are no lessons"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListLessonsCommand(), model,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandHistory, MESSAGE_NO_LESSONS, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 2: listCards"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lists cards when no lesson is opened -\u003e list nothing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ListCardsCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Given that there are no cards to list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"Command should throw CommandException\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertEquals(e.getMessage(), MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 3: addLesson"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid lesson -\u003e lesson added successfully"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d new AddLessonCommand(validLesson).execute(model, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added successfully -\u003e success feedback"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(AddLessonCommand.MESSAGE_SUCCESS, validLesson),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added successfully -\u003e lesson in lessonList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(Collections.singletonList(validLesson), model.getLessons());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 4: listLessons"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // list lessons when there are lessons -\u003e list 1 lesson"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListLessonsCommand(), model, commandHistory, new ListLessonsCommand()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .buildList(Collections.singletonList(validLesson)), model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 5: deleteLesson"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete valid lesson -\u003e lesson deleted successfully"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        commandResult \u003d new DeleteLessonCommand(toDeleteIndex).execute(model, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson deleted successfully -\u003e success feedback"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 6: listLessons"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // list lessons when there are no lessons -\u003e command successful with feedback that there are no lessons"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListLessonsCommand(), model,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandHistory, MESSAGE_NO_LESSONS, model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Tests {@link AddLessonCommand}, {@link DeleteLessonCommand}, {@link EditLessonCommand} and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link QuitLessonCommand} with {@link ManagementModelManager}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * \u003cbr\u003e\u003cbr\u003eOpening and closing a lesson with {@link EditLessonCommand} and {@link QuitLessonCommand}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * should not prevent deletion of lesson by using {@link DeleteLessonCommand}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_addOpenListCloseDelete_allSuccessful() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 1: addLesson"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid lesson -\u003e lesson added successfully"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Tested in execute_listAddDeleteLesson_allSuccessful"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new AddLessonCommand(validLesson).execute(model, commandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 2: openLesson"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opens valid lesson -\u003e lesson opened successfully"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toOpenIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new EditLessonCommand(toOpenIndex).execute(model, commandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson opened successfully -\u003e success feedback"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // get opened lesson which was added -\u003e same as lesson which was added"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(model.getOpenedLesson(), validLesson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 3: listCards"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lists cards of opened lesson -\u003e list successfully"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(new ListCardsCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new ListCardsCommand().buildList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        validLesson.getCoreHeaders(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        validLesson.getOptionalHeaders(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        validCards), model);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 4: closeLesson"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // close opened lesson -\u003e lesson closed successfully"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new QuitLessonCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // openedLesson is now null"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(model.getOpenedLesson());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 5: listCards"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lists cards when no lesson is opened -\u003e list nothing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            new ListCardsCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            // Given that there are no cards to list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            throw new AssertionError(\"Command should throw CommandException\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertEquals(e.getMessage(), MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Step 6: deleteLesson"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete valid lesson -\u003e lesson deleted successfully"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index toDeleteIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d new DeleteLessonCommand(toDeleteIndex).execute(model, commandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson deleted successfully -\u003e success feedback"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/QuitLessonCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link QuitLessonCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuitLessonCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonClosedByModel_closeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.openLesson(1); // always work regardless of index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelStub.getOpenedLesson(), modelStub.toBeOpenedLesson); // always work"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // closes the opened lesson -\u003e lesson closed successfully without exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new QuitLessonCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // openedLesson is now null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(modelStub.getOpenedLesson());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonClosedByModel_closeUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempts to close a lesson when no lesson is opened -\u003e CommandException thrown"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new QuitLessonCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonClosedByModelTwice_closeUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelStub.openLesson(1); // always work regardless of index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelStub.getOpenedLesson(), modelStub.toBeOpenedLesson); // always work"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // closes the opened lesson -\u003e lesson closed successfully without exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new QuitLessonCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // openedLesson is now null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(modelStub.getOpenedLesson());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempts to close a lesson when no lesson is opened -\u003e CommandException thrown"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new QuitLessonCommand().execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuitLessonCommand quitLessonCommand \u003d new QuitLessonCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute QuitLessonCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        quitLessonCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuitLessonCommand quitLessonCommand \u003d new QuitLessonCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(quitLessonCommand, quitLessonCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // all QuitLessonCommand objects are the same -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuitLessonCommand quitLessonCommand2 \u003d new QuitLessonCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(quitLessonCommand, quitLessonCommand2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(quitLessonCommand, 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(quitLessonCommand, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub for testing closeLesson command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStub extends ManagementModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * The dud lesson which will always be opened by {@link #openLesson(int)} regardless of index parameter."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public final Lesson toBeOpenedLesson \u003d LESSON_DEFAULT;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * The {@link Lesson} object currently in focus. All lesson-editing-related commands will apply"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * to this lesson."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private Lesson openedLesson \u003d null; // The lesson currently being edited"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * This method will always assign {@link #toBeOpenedLesson} to {@link #openedLesson} successfully."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public String openLesson(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLesson \u003d toBeOpenedLesson;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return openedLesson.getName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Returns the {@link #openedLesson}. A lesson is opened by calling {@link #openLesson(int)} and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * closed by calling {@link #closeLesson()}. If there is no lesson currently opened, this returns"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @return the {@link Lesson} object in {@link #openedLesson}. Null if there is no opened lesson."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public Lesson getOpenedLesson() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return openedLesson;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * Closes the opened {@link Lesson} object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * @return the name of the closed {@link Lesson} object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public String closeLesson() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            requireNonNull(openedLesson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            String lessonName \u003d openedLesson.getName();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLesson \u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return lessonName;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "DigiPie": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/ReloadLessonsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " * Unit tests for the {@link ReloadLessonsCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class ReloadLessonsCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * Basic test that the command comes out as expected. Implementation is tested in LogicManager, as it is actually"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     * implemented in LogicManager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_lessonClosedByModel_closeSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStub modelStub \u003d new MgtModelStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CommandResult expected \u003d new CommandResult(ReloadLessonsCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            CommandResult.UpdateStorage.LOAD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ReloadLessonsCommand command \u003d new ReloadLessonsCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expected, command.execute(modelStub, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_modelWithOpenedLesson_closeUnsuccessful() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubWithOpenedLesson modelStub \u003d new MgtModelStubWithOpenedLesson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to reload lessons but there is an opened lesson -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // ask user to close opened lesson first"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new ReloadLessonsCommand().execute(modelStub, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ReloadLessonsCommand reloadLessonsCommand \u003d new ReloadLessonsCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(reloadLessonsCommand, reloadLessonsCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        // all ReloadLessonsCommand objects are the same -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ReloadLessonsCommand reloadLessonsCommand2 \u003d new ReloadLessonsCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(reloadLessonsCommand, reloadLessonsCommand2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(reloadLessonsCommand, 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotEquals(reloadLessonsCommand, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always accept reload lessons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStub extends ManagementModelStub {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always rejects reload lessons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubWithOpenedLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 47,
      "DigiPie": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/SetLessonTestValuesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARD_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.ManagementCommand.MESSAGE_EXPECTED_MODEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.lesson.Lesson.EXCEPTION_INVALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalIndices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Unit tests for the {@link SetLessonTestValuesCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class SetLessonTestValuesCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Index indexOne \u003d TypicalIndices.INDEX_FIRST;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Index indexTwo \u003d TypicalIndices.INDEX_SECOND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Index indexThree \u003d Index.fromZeroBased(2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_openedLessonAndValidIndices_setSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelWithThreeCores modelStub \u003d new MgtModelWithThreeCores();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e cores \u003d modelStub.getOpenedLessonCoreHeaders();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String coreOne \u003d cores.get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String coreTwo \u003d cores.get(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String coreThree \u003d cores.get(2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // set to core one and core two -\u003e success since 3 cores exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new SetLessonTestValuesCommand(indexOne, indexTwo).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // set test values successfully -\u003e success feedback"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(SetLessonTestValuesCommand.MESSAGE_SUCCESS, coreOne, coreTwo),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // set to core three and core two -\u003e success since 3 cores exist"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        commandResult \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new SetLessonTestValuesCommand(indexThree, indexTwo).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // set test values successfully -\u003e success feedback"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(String.format(SetLessonTestValuesCommand.MESSAGE_SUCCESS, coreThree, coreTwo),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_openedLessonAndInvalidIndices_setUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelWithThreeCores modelStub \u003d new MgtModelWithThreeCores();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int index \u003d 5;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index invalidIndex \u003d Index.fromZeroBased(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_INDEX, index));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new SetLessonTestValuesCommand(invalidIndex, indexThree).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_missingOpenedLesson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        MgtModelStubNoOpenLesson modelStub \u003d new MgtModelStubNoOpenLesson();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add valid card but there is no open lesson -\u003e command exception thrown"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_CARD_VIEW_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        new SetLessonTestValuesCommand(indexOne, indexTwo).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void execute_incorrectModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        QuizModelStub modelStub \u003d new QuizModelStub();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        SetLessonTestValuesCommand setLessonTestValuesCommand \u003d new SetLessonTestValuesCommand(indexOne, indexTwo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempting to execute SetLessonTestValuesCommand on a QuizModel instead of a ManagementModel -\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // CommandException thrown"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_EXPECTED_MODEL);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setLessonTestValuesCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        SetLessonTestValuesCommand setLessonTestValuesCommand \u003d new SetLessonTestValuesCommand(indexOne, indexThree);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(setLessonTestValuesCommand, setLessonTestValuesCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        SetLessonTestValuesCommand setLessonTestValuesCommandCopy \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new SetLessonTestValuesCommand(indexOne, indexThree);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(setLessonTestValuesCommand, setLessonTestValuesCommandCopy);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values different order -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        setLessonTestValuesCommandCopy \u003d new SetLessonTestValuesCommand(indexThree, indexOne);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(setLessonTestValuesCommand, setLessonTestValuesCommandCopy);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(setLessonTestValuesCommand, 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(setLessonTestValuesCommand, null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        SetLessonTestValuesCommand setTestDiffCommand \u003d new SetLessonTestValuesCommand(indexTwo, indexThree);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(setLessonTestValuesCommand, setTestDiffCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always fail when attempting to set test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * given there is no open lesson."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelStubNoOpenLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * A ManagementModel stub which always fail when attempting to add"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * card given there is no open lesson. It has an opened lesson with 3 cores."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private class MgtModelWithThreeCores extends ManagementModelStub {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private int openedLessonQuestionIndex \u003d 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private int openedLessonAnswerIndex \u003d 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        private List\u003cString\u003e openedLessonCoreHeaders;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public MgtModelWithThreeCores() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLessonCoreHeaders \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(\"Core 1\", \"Core 2\", \"Core 3\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public List\u003cString\u003e getOpenedLessonCoreHeaders() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return openedLessonCoreHeaders;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        public void setOpenedLessonTestValues(int questionIndex, int answerIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (questionIndex \u003c 0 || questionIndex \u003e openedLessonCoreHeaders.size()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(String.format(EXCEPTION_INVALID_INDEX, questionIndex));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            } else if (answerIndex \u003c 0 || answerIndex \u003e openedLessonCoreHeaders.size()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                throw new IllegalArgumentException(String.format(EXCEPTION_INVALID_INDEX, answerIndex));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLessonQuestionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            openedLessonAnswerIndex \u003d answerIndex;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/management/StartCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.logic.commands.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_VIEW_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.StartCommand.MESSAGE_LESSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final String MESSAGE_COUNT \u003d \"Not enough cards in current lesson.\\nSet the count to the maximum\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \" number for you by default.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_throwsNullPointerException () {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                new StartCommand(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * A ManagementModel stub which always rejects reload lessons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private class MgtModelStubWithOpenedLesson extends ManagementModelStub {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void execute_modelWithOpenedLesson_closeUnsuccessful() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        MgtModelStubWithOpenedLesson modelStub \u003d new MgtModelStubWithOpenedLesson();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        // attempt to reload lessons but there is an opened lesson -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        // ask user to close opened lesson first"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expectMessage(MESSAGE_LESSON_VIEW_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        new StartCommand(new SessionBuilder().build()).execute(modelStub, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel() throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizModel quizModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(\"Expected ManagementModel but received QuizModel instead.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new StartCommand(session).execute(quizModel, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertNull(commandResult);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void execute_lessonExist() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final Session session \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"Lesson index is out of range. Please try a smaller one.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new StartCommand(session).execute(managementModel, commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertNull(commandResult);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void execute_lessonExistAnother() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final Session session \u003d new SessionBuilder(new Session(0, 1, QuizMode.LEARN)).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"Lesson index is out of range. Please try a larger one.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new StartCommand(session).execute(managementModel, commandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertNull(commandResult);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void execute_difficultMode() throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModel failManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        failManagementModel.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        managementModel.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        managementModel.addCardSrsData(new CardSrsData(CARD_BELGIUM.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(123), true));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard srsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new SessionBuilder(new Session(1, 1, QuizMode.DIFFICULT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                List.of(srsCard))).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session sessionMoreCount \u003d new SessionBuilder(new Session(1, 3, QuizMode.DIFFICULT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                List.of(srsCard))).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new StartCommand(session).execute(managementModel, commandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"Starting new quiz\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(session.getSrsCards().get(0), srsCard);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResultMoreCount \u003d new StartCommand(sessionMoreCount).execute(managementModel,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                commandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"Starting new quiz\", commandResultMoreCount.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"There is no difficult card in this lesson.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult wrongCommandResult \u003d new StartCommand(session).execute(failManagementModel, commandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertNull(wrongCommandResult);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void execute_learnMode() throws CommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModel failManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        managementModel.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        failManagementModel.addLesson(new LessonBuilder().build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        failManagementModel.addCardSrsData(new CardSrsData(CARD_BELGIUM.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(123), false));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        failManagementModel.addCardSrsData(new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(123), false));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard srsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new SessionBuilder(new Session(1, 1, QuizMode.LEARN,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                List.of(srsCard))).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new StartCommand(session).execute(managementModel, commandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"Starting new quiz\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(session.getSrsCards().get(0), srsCard);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"There is no more new card to learn in this lesson.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult wrongCommandResult \u003d new StartCommand(session).execute(failManagementModel, commandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertNull(wrongCommandResult);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void execute_reviewMode() throws CommandException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModel managementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModel failManagementModel \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().withCards(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        failManagementModel.addLesson(lesson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        managementModel.addLesson(lesson);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        managementModel.addCardSrsData(new CardSrsData(CARD_BELGIUM.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(123), false));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        failManagementModel.addCardSrsData(new CardSrsData(CARD_BELGIUM.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.now().plus(Duration.ofHours(1234)), false));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard srsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session session \u003d new SessionBuilder(new Session(1, 1, QuizMode.REVIEW,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                List.of(srsCard))).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new StartCommand(session).execute(managementModel, commandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"Starting new quiz\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(session.getSrsCards().get(0), srsCard);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"There is no card for review since all cards in current lesson\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                + \" do not reach the due date.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult wrongCommandResult \u003d new StartCommand(session).execute(failManagementModel, commandHistory);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertNull(wrongCommandResult);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void executeActual_learn_success() throws CommandException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final Session session \u003d new SessionBuilder(new Session(\"Capitals\", 2,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                QuizMode.LEARN, List.of(new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardBuilder(new SrsCard(CARD_JAPAN, new CardSrsData(CARD_JAPAN.hashCode(), 1,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        1, Instant.now().plus(Duration.ofHours(2)), false), lesson)).build()))).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(session.generateSession(), QuizMode.LEARN);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz, session);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new StartCommand(session).executeQuiz(expectedModel,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizModel actualModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(session);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(startCommand.getSession(), session);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(commandHistory);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult result \u003d startCommand.executeQuiz(actualModel, commandHistory);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedCommandHistory, commandHistory);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        session.setCount(10);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult largeCount \u003d new StartCommand(session).executeQuiz(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(MESSAGE_COUNT + MESSAGE_LESSON + \"default\", largeCount.getFeedbackToUser());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void executeActual_review_success() throws CommandException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final Session session \u003d new SessionBuilder(new Session(\"Capitals\", 2,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QuizMode.REVIEW, List.of(new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_JAPAN, new CardSrsData(CARD_JAPAN.hashCode(), 1,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                1, Instant.now().plus(Duration.ofHours(2)), false), lesson)).build()))).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final Quiz quiz \u003d new Quiz(session.generateSession(), QuizMode.REVIEW);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz, session);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new StartCommand(session).executeQuiz(expectedModel,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel actualModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(session);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(startCommand.getSession(), session);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(commandHistory);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult result \u003d startCommand.executeQuiz(actualModel, commandHistory);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedCommandHistory, commandHistory);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 65,
      "lallanachang": 137,
      "DigiPie": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizAnswerCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizAnswerCommand.MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2_ACTUAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_PREVIEW_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_PREVIEW_2_ACTUAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_REVIEW_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_REVIEW_2_ACTUAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains integration tests with QuizModel for QuizAnswerCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizAnswerCommandIntegrationTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz quizActual;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz quizExpected;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private ManagementModelManager managementModelManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModelManager actualModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModelManager expectedModel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizExpected \u003d new Quiz(SESSION_DEFAULT_2.generateSession(), SESSION_DEFAULT_2.getMode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizActual \u003d new Quiz(SESSION_DEFAULT_2_ACTUAL.generateSession(), SESSION_DEFAULT_2_ACTUAL.getMode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        managementModelManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_nullAnswer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        new QuizAnswerCommand(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizAnswerCommand(\"someanswer\").execute(model, commandHistory));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_validLearn_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel \u003d new QuizModelManager(managementModelManager);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModelManager actualMgmtManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel \u003d new QuizModelManager(actualMgmtManager);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        card.isCorrect(answer);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, \"\", expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_validPreview_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d \"any answer\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel \u003d new QuizModelManager(managementModelManager);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModelManager actualMgmtManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel \u003d new QuizModelManager(actualMgmtManager);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizExpected \u003d new Quiz(SESSION_PREVIEW_2.generateSession(), SESSION_PREVIEW_2.getMode());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizActual \u003d new Quiz(SESSION_PREVIEW_2_ACTUAL.generateSession(), SESSION_PREVIEW_2_ACTUAL.getMode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_PREVIEW_2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_PREVIEW_2_ACTUAL);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \"\", expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // view result for preview quiz"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(QuizAnswerCommand.MESSAGE_SUCCESS, true, false, false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            commandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // complete preview quiz"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, \"\", expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_validReview_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel \u003d new QuizModelManager(managementModelManager);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModelManager actualMgmtManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel \u003d new QuizModelManager(actualMgmtManager);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizExpected \u003d new Quiz(SESSION_REVIEW_2.generateSession(), SESSION_REVIEW_2.getMode());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizActual \u003d new Quiz(SESSION_REVIEW_2_ACTUAL.generateSession(), SESSION_REVIEW_2_ACTUAL.getMode());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_REVIEW_2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_REVIEW_2_ACTUAL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(answer);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, answer);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, MESSAGE_CORRECT, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_correctAndWrongAnswer_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String correctAns \u003d \"Brussels\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String wrongAns \u003d \"wronganswer\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // correct"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel \u003d new QuizModelManager(managementModelManager);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModelManager actualMgmtManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel \u003d new QuizModelManager(actualMgmtManager);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(correctAns);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, correctAns);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard card \u003d expectedModel.getNextCard();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizAnswerCommand \u003d new QuizAnswerCommand(wrongAns);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, wrongAns);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_WRONG_ONCE, wrongAns);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong twice"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, wrongAns);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_WRONG, wrongAns, card.getAnswer());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // view quiz result"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizAnswerCommand \u003d new QuizAnswerCommand(\"Japan\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, \"Japan\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d MESSAGE_CORRECT + QuizAnswerCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // complete the quiz"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(false);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, \"\", expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_lastCardWithWrongTwice_success() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String correctAns \u003d \"Japan\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String wrongAns \u003d \"wronganswer\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel \u003d new QuizModelManager(managementModelManager);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModelManager actualMgmtManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel \u003d new QuizModelManager(actualMgmtManager);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(wrongAns);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, wrongAns);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_WRONG_ONCE, wrongAns);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong twice"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, wrongAns);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_WRONG, wrongAns, correctAns);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // correct"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, correctAns);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d MESSAGE_CORRECT + QuizAnswerCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizAnswerCommand \u003d new QuizAnswerCommand(correctAns);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // complete the quiz"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(false);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(quizAnswerCommand, actualModel, commandHistory, \"\", expectedModel);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommand \u003d new QuizAnswerCommand(\"Tokyo\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommandDiff \u003d new QuizAnswerCommand(\"Something\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(quizAnswerCommand, quizAnswerCommand);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizAnswerCommand quizAnswerCommandCopy \u003d new QuizAnswerCommand(\"Tokyo\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(quizAnswerCommand, quizAnswerCommandCopy);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(quizAnswerCommand, quizAnswerCommandDiff);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(quizAnswerCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // differnt type -\u003e returns false"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(5, quizAnswerCommand);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 266,
      "DigiPie": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizAnswerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizAnswerCommand.MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizAnswerCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalQuiz.FIRST_REVIEW_CARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalQuiz.LAST_REVIEW_CARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_REVIEW_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizAnswerCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_nullAnswer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        new QuizAnswerCommand(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizAnswerCommand(\"someanswer\").execute(model, commandHistory));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_correctAnswer_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d FIRST_REVIEW_CARD.getAnswer();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelStubAcceptingAnswer quizModelStubAcceptingAnswer \u003d new QuizModelStubAcceptingAnswer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new QuizAnswerCommand(answer)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .execute(quizModelStubAcceptingAnswer, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(MESSAGE_CORRECT, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quizModelStubAcceptingAnswer.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongAnswer_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String wrongAns \u003d \"wronganswer\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelStubAcceptingAnswer quizModelStubAcceptingAnswer \u003d new QuizModelStubAcceptingAnswer();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new QuizAnswerCommand(wrongAns)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .execute(quizModelStubAcceptingAnswer, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_WRONG_ONCE, wrongAns);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(0, quizModelStubAcceptingAnswer.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quizModelStubAcceptingAnswer.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong twice"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        commandResult \u003d new QuizAnswerCommand(wrongAns).execute(quizModelStubAcceptingAnswer, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d String.format(QuizAnswerCommand.MESSAGE_WRONG, wrongAns, FIRST_REVIEW_CARD.getAnswer());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(0, quizModelStubAcceptingAnswer.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, quizModelStubAcceptingAnswer.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_completeQuiz_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String answer \u003d LAST_REVIEW_CARD.getAnswer();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelStubResultDisplay quizModelStubResultDisplay \u003d new QuizModelStubResultDisplay();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult commandResult \u003d new QuizAnswerCommand(answer)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .execute(quizModelStubResultDisplay, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(MESSAGE_CORRECT + MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quizModelStubResultDisplay.isResultDisplay());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private class QuizModelStubAcceptingAnswer extends QuizModelStub {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        private final Quiz quiz;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        private List\u003cQuizCard\u003e quizCardList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public QuizModelStubAcceptingAnswer() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz \u003d new Quiz(SESSION_REVIEW_2.generateSession(), SESSION_REVIEW_2.getMode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizCardList \u003d quiz.getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.getNextCard();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quiz.getNextCard();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quizCardList.get(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean isResultDisplay() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quiz.updateTotalAttemptsAndStreak(index, answer);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quiz.getQuizTotalCorrectQuestions();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quiz.getQuizTotalAttempts();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private class QuizModelStubResultDisplay extends QuizModelStub {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        private final Quiz quiz;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        private List\u003cQuizCard\u003e quizCardList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        private boolean isResultDisplay;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public QuizModelStubResultDisplay() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz \u003d new Quiz(SESSION_REVIEW_2.generateSession(), SESSION_REVIEW_2.getMode());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quizCardList \u003d quiz.getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.getNextCard();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.getNextCard();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.getNextCard();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            quiz.getNextCard();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quizCardList.get(3);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return quiz.updateTotalAttemptsAndStreak(1, LAST_REVIEW_CARD.getAnswer());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public boolean isResultDisplay() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            return isResultDisplay;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        public void setResultDisplay(boolean resultDisplay) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            isResultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizCommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizCommandTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, QuizModel actualModel,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            CommandHistory actualCommandHistory, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            QuizModel expectedModel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, QuizModel, CommandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * CommandResult, QuizModel)}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCommandSuccess(Command command, QuizModel actualModel,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                            String expectedMessage, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 41,
      "DigiPie": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizDifficultCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2_ACTUAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains integration tests with the QuizModel and unit tests for QuizDifficultCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizDifficultCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private ManagementModelManager managementModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizDifficultCommand().execute(model, commandHistory));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_valid_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager expectedModel \u003d new QuizModelManager(managementModelManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModelManager actualMgmtManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager actualModel \u003d new QuizModelManager(actualMgmtManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizExpected \u003d new Quiz(SESSION_DEFAULT_2.generateSession(), SESSION_DEFAULT_2.getMode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizActual \u003d new Quiz(SESSION_DEFAULT_2_ACTUAL.generateSession(), SESSION_DEFAULT_2_ACTUAL.getMode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        managementModelManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.toggleIsCardDifficult(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizDifficultCommand.MESSAGE_SUCCESS, \"difficult\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(new QuizDifficultCommand(), actualModel, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.toggleIsCardDifficult(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedMessage \u003d String.format(QuizDifficultCommand.MESSAGE_SUCCESS, \"not difficult\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCommandTestUtil.assertCommandSuccess(new QuizDifficultCommand(), actualModel, commandHistory,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 63,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizHelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizHelpCommand.MESSAGE_QUIZ_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalQuiz.QUIZ_LEARN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2_ACTUAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains integration tests with the QuizModel for QuizHelpCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizHelpCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel actualModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(QUIZ_LEARN, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(QUIZ_LEARN, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_QUIZ_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizHelpCommand(), actualModel, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 30,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizHintCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizHintCommand.MESSAGE_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizHintCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizHintCommand.MESSAGE_SUCCESS_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.CardBuilder.DEFAULT_OPTIONAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2_ACTUAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains integration tests with the QuizModel for QuizHintCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizHintCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel actualModel \u003d new QuizModelManager(new ManagementModelManager());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel expectedModel \u003d new QuizModelManager(new ManagementModelManager());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizHintCommand().execute(model, commandHistory));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_withMoreThanOneOpt_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Card oneOptCard \u003d new CardBuilder().withOptionals(\"opt\", \"opt2\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CardSrsData cardSrsData \u003d new CardSrsData(oneOptCard.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Instant.ofEpochMilli(123), false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        SrsCard srsCard \u003d new SrsCard(oneOptCard, cardSrsData, LESSON_DEFAULT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Session session \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .withSrsCards(List.of(srsCard))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Session actualSession \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .withSrsCards(List.of(srsCard))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(new Quiz(session.generateSession(), session.getMode()), session);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(new Quiz(actualSession.generateSession(), actualSession.getMode()), actualSession);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Arrays.asList(\"opt\", \"opt2\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizHintCommand(), actualModel, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_withOnlyOneOpt_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizExpected \u003d new Quiz(SESSION_DEFAULT_2.generateSession(), SESSION_DEFAULT_2.getMode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizActual \u003d new Quiz(SESSION_DEFAULT_2_ACTUAL.generateSession(), SESSION_DEFAULT_2_ACTUAL.getMode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS_ONE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            DEFAULT_OPTIONAL));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizHintCommand(), actualModel, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_emptyOpt_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Card withoutOptCard \u003d new CardBuilder().withNoOptionals().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        CardSrsData cardSrsData \u003d new CardSrsData(withoutOptCard.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Instant.ofEpochMilli(123), false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        SrsCard srsCard \u003d new SrsCard(withoutOptCard, cardSrsData, LESSON_DEFAULT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Session session \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .withSrsCards(List.of(srsCard))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(new Quiz(session.generateSession(), session.getMode()), session);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, MESSAGE_EMPTY, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizHintCommand().execute(expectedModel, commandHistory));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 108,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizQuitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2_ACTUAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains integration tests with the QuizModel for QuizQuitCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizQuitCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel actualModel \u003d new QuizModelManager(new ManagementModelManager());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel expectedModel \u003d new QuizModelManager(new ManagementModelManager());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizExpected \u003d new Quiz(SESSION_DEFAULT_2.generateSession(), SESSION_DEFAULT_2.getMode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizActual \u003d new Quiz(SESSION_DEFAULT_2_ACTUAL.generateSession(), SESSION_DEFAULT_2_ACTUAL.getMode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quizExpected, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(quizActual, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizQuitCommand().execute(model, commandHistory));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quitsWithoutAttemptingQuestion_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizQuitCommand.MESSAGE_SUCCESS, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizQuitCommand(), actualModel, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quitsAfterAttemptingOneQuestionWrongly_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, \"wrong answer\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizQuitCommand.MESSAGE_SUCCESS, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.updateTotalAttemptsAndStreak(0, \"wrong answer\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizQuitCommand(), actualModel, commandHistory,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_quitsAfterAttemptingOneQuestionCorrectly_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, \"wrong answer\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, \"wrong answer\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, \"Brussels\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.end();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedMessage \u003d String.format(QuizQuitCommand.MESSAGE_SUCCESS, 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.updateTotalAttemptsAndStreak(0, \"wrong answer\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.updateTotalAttemptsAndStreak(0, \"wrong answer\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.updateTotalAttemptsAndStreak(0, \"Brussels\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizQuitCommand(), actualModel, commandHistory,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/quiz/QuizStatusCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalQuiz.QUIZ_LEARN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2_ACTUAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Contains integration tests with the QuizModel for QuizStatusCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizStatusCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel actualModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel expectedModel \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_wrongModel_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model model \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizStatusCommand().execute(model, commandHistory));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void execute_status_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(QUIZ_LEARN, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.init(QUIZ_LEARN, SESSION_DEFAULT_2_ACTUAL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        actualModel.getNextCard();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expected \u003d String.format(QuizStatusCommand.MESSAGE_SUCCESS, actualModel.getQuizTotalAttempts(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            actualModel.getQuizTotalCorrectQuestions(), actualModel.getCurrentProgress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(new QuizStatusCommand(), actualModel, commandHistory, expected, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 43,
      "DigiPie": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCardParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_TEST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_OPT1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddCardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddCardParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String CARD_CORE_1 \u003d \" \" + PREFIX_TEST + CARD_JAPAN_CORE1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String CARD_CORE_2 \u003d \" \" + PREFIX_TEST + CARD_JAPAN_CORE2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String CARD_OPT_1 \u003d \" \" + PREFIX_HINT + CARD_JAPAN_OPT1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private AddCardParser addCardParser \u003d new AddCardParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Card card \u003d TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(addCardParser, PREAMBLE_WHITESPACE + CARD_CORE_1 + CARD_CORE_2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + CARD_OPT_1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddCardCommand(card));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // zero optionals"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(card).withNoOptionals().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(addCardParser, CARD_CORE_1 + CARD_CORE_2,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new AddCardCommand(expectedCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing 1 core prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addCardParser, CARD_JAPAN_CORE1 + CARD_CORE_2, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addCardParser, CARD_JAPAN_CORE1 + CARD_JAPAN_CORE2, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing 1 core"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addCardParser, CARD_JAPAN_CORE1, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addCardParser, PREAMBLE_NON_EMPTY + CARD_JAPAN_CORE1 + CARD_CORE_2, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddLessonParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INPUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.management.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_LESSON_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.Syntax.PREFIX_TEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_CORE_HEADER_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_CORE_HEADER_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.DEFAULT_OPT_HEADER_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class AddLessonParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String NAME \u003d \" \" + PREFIX_LESSON_NAME + DEFAULT_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EMPTY_NAME \u003d \" \" + PREFIX_LESSON_NAME + \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String NAME_OTHER \u003d \" \" + PREFIX_LESSON_NAME + \"Trivia\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CORE_QUESTION \u003d \" \" + PREFIX_TEST + DEFAULT_CORE_HEADER_1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EMPTY_CORE_QUESTION \u003d \" \" + PREFIX_TEST + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CORE_ANSWER \u003d \" \" + PREFIX_TEST + DEFAULT_CORE_HEADER_2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EMPTY_CORE_ANSWER \u003d \" \" + PREFIX_TEST + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EMPTY_CORE \u003d \" \" + PREFIX_TEST + \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String OPT_1 \u003d \" \" + PREFIX_HINT + DEFAULT_OPT_HEADER_1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String EMPTY_OPT \u003d \" \" + PREFIX_HINT + \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private AddLessonParser addLessonParser \u003d new AddLessonParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_compulsoryFieldPrefixesMissing_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, DEFAULT_NAME + CORE_QUESTION + CORE_ANSWER,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing 1 core prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, NAME + DEFAULT_CORE_HEADER_1 + CORE_ANSWER,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, NAME + CORE_QUESTION + DEFAULT_CORE_HEADER_2,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing 2 core prefixes"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, NAME + DEFAULT_CORE_HEADER_1 + DEFAULT_CORE_HEADER_2,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, DEFAULT_NAME + DEFAULT_CORE_HEADER_1 + DEFAULT_CORE_HEADER_2,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREAMBLE_NON_EMPTY + NAME_OTHER + NAME"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + CORE_QUESTION + CORE_ANSWER,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREFIX_LESSON_NAME"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + CORE_QUESTION + CORE_ANSWER,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // empty core string specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, NAME"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + PREFIX_TEST + CORE_ANSWER,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, NAME"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + CORE_QUESTION + PREFIX_TEST,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_multipleNamesPresent_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_INPUT, PREFIX_LESSON_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // multiple names -\u003e parse exception thrown"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                addLessonParser, NAME + NAME + CORE_QUESTION + CORE_ANSWER,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                addLessonParser, NAME + NAME_OTHER + CORE_QUESTION + CORE_ANSWER,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_emptyNameSupplied_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessageForN \u003d String.format(MESSAGE_EMPTY_INPUT, PREFIX_LESSON_NAME);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // normal format"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREAMBLE_WHITESPACE + EMPTY_NAME"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + CORE_QUESTION + CORE_ANSWER, expectedMessageForN);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // unordered format"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, CORE_QUESTION + CORE_ANSWER"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + EMPTY_NAME, expectedMessageForN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_emptyQuestionSupplied_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessageForC \u003d String.format(MESSAGE_EMPTY_INPUT, PREFIX_TEST);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // normal format"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREAMBLE_WHITESPACE + NAME"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + EMPTY_CORE_QUESTION + CORE_ANSWER, expectedMessageForC);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // unordered format"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, EMPTY_CORE_QUESTION + CORE_ANSWER"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + NAME + OPT_1, expectedMessageForC);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_emptyAnswerSupplied_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessageForC \u003d String.format(MESSAGE_EMPTY_INPUT, PREFIX_TEST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // normal format"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREAMBLE_WHITESPACE + NAME"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + CORE_QUESTION + EMPTY_CORE_ANSWER, expectedMessageForC);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // unordered format"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, CORE_QUESTION"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + NAME + OPT_1 + EMPTY_CORE_ANSWER, expectedMessageForC);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_emptyOptionalSupplied_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessageForO \u003d String.format(MESSAGE_EMPTY_INPUT, PREFIX_HINT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // normal format"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREAMBLE_WHITESPACE + NAME"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + CORE_QUESTION + CORE_ANSWER + EMPTY_OPT, expectedMessageForO);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // unordered format"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, CORE_QUESTION"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + NAME + OPT_1 + CORE_ANSWER + EMPTY_OPT, expectedMessageForO);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_emptyCoreAndOptionalSupplied_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Error message for empty \u0027c/\u0027 has higher precedence than error message for empty \u0027o/\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedMessageForC \u003d String.format(MESSAGE_EMPTY_INPUT, PREFIX_TEST);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // normal format"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, PREAMBLE_WHITESPACE + NAME"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + CORE_QUESTION + EMPTY_CORE_ANSWER + EMPTY_OPT, expectedMessageForC);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // unordered format"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(addLessonParser, CORE_QUESTION"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + NAME + OPT_1 + CORE_ANSWER + EMPTY_CORE + EMPTY_OPT, expectedMessageForC);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "DigiPie": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void singleInputForAToken_hasOneValue_returnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(argMultimap.hasExactlyOneValue(dashT));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void multipleInputForAToken_hasOneValue_returnsFalse() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash -t joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(argMultimap.hasExactlyOneValue(dashT));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "DigiPie": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCardParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteCardParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private DeleteCardParser parser \u003d new DeleteCardParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(parser, \"\" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new DeleteCardCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteLessonParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class DeleteLessonParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private DeleteLessonParser parser \u003d new DeleteLessonParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(parser, \"\" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new DeleteLessonCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ManagementModeParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddCardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.AddLessonCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.ChangeThemeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.DeleteLessonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.EditLessonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ListCardsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.ListLessonsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.QuitLessonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.commands.management.ReloadLessonsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.SetLessonTestValuesCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModeParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private final ManagementModeParser parser \u003d new ManagementModeParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parseCommand_start() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"start 1 c/15 m/LEARN\") instanceof StartCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            parser.parse(\"histories\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_addLesson() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d AddLessonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_LESSON_NAME + \"Capitals of the world \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_TEST + \"Country \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_TEST + \"Capital \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_HINT + \"Hint\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(command) instanceof AddLessonCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_deleteLesson() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d DeleteLessonCommand.COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(command) instanceof DeleteLessonCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_listLessons() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(ListLessonsCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                instanceof ListLessonsCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_openLessons() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d EditLessonCommand.COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(command) instanceof EditLessonCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_closeLessons() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(QuitLessonCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                instanceof QuitLessonCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_addCard() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d AddCardCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_TEST + \"Australia \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_TEST + \"Canberra \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_TEST + \"English \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                + Syntax.PREFIX_HINT + \"Starts with C\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(command) instanceof AddCardCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_deleteCard() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d DeleteCardCommand.COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(command) instanceof DeleteCardCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_listCards() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(ListCardsCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                instanceof ListCardsCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parseCommand_setTest() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d SetLessonTestValuesCommand.COMMAND_WORD + \" 1 2\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(parser.parse(command) instanceof SetLessonTestValuesCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void parseCommand_reloadLessons() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        String command \u003d ReloadLessonsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertTrue(parser.parse(command) instanceof ReloadLessonsCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_changeTheme() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String command \u003d ChangeThemeCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(command) instanceof ChangeThemeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    //        assertTrue(parser.parse(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        parser.parse(\"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        parser.parse(\"unknownCommand\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 8,
      "halcyoneee": 63,
      "lallanachang": 3,
      "DigiPie": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OpenLessonParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.EditLessonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class OpenLessonParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private OpenLessonParser parser \u003d new OpenLessonParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_validArgs_returnsOpenCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(parser, \"\" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new EditLessonCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(INDEX_SECOND, ParserUtil.parseIndex(\"  2  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parserUtil() throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String count \u003d \"1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String wrongCount \u003d \"asd\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ParserUtil parserUtil \u003d new ParserUtil();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        int expectedCount \u003d parserUtil.parseCount(count);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedCount, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedCount \u003d wrongCount.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"Count of number should be a valid integer less than MAX_INTEGER (2147483647).\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        parserUtil.parseCount(trimmedCount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parserSmallCount() throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String count \u003d \"0\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ParserUtil parserUtil \u003d new ParserUtil();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedCount \u003d count.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"Count should not be less than 1 in a single lesson.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        parserUtil.parseCount(trimmedCount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parserLargeCount() throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String count \u003d \"129084913749871398471936571369587198347981\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ParserUtil parserUtil \u003d new ParserUtil();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedCount \u003d count.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"Count of number should be a valid integer less than MAX_INTEGER (2147483647).\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        parserUtil.parseCount(trimmedCount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parserMode_throwParserException() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String mode \u003d \"learn\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String mode2 \u003d \"review\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        final String wrongMode \u003d \"akjfk\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ParserUtil parserUtil \u003d new ParserUtil();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizMode expectedMode \u003d parserUtil.parseMode(mode);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedMode, QuizMode.LEARN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizMode expectedMode2 \u003d parserUtil.parseMode(mode2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedMode2, QuizMode.REVIEW);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        String trimmedMode \u003d wrongMode.trim().toUpperCase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        thrown.expectMessage(\"Mode of quiz is not acceptable. You can choose from: \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                + \"learn, preview, review and difficult.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        parserUtil.parseMode(trimmedMode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 3,
      "lallanachang": 41,
      "-": 35,
      "DigiPie": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/QuizModeParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAnswerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizDifficultCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizHelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizHintCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizQuitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizStatusCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * Parse user input in QuizMode"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizModeParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private final QuizModeParser parser \u003d new QuizModeParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseAnswer() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"some answer\") instanceof QuizAnswerCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"someanswer\") instanceof QuizAnswerCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parseCommand() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"\\\\difficult\") instanceof QuizDifficultCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(QuizDifficultCommand.COMMAND_WORD) instanceof QuizDifficultCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"\\\\help\") instanceof QuizHelpCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(QuizHelpCommand.COMMAND_WORD) instanceof QuizHelpCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"\\\\hint\") instanceof QuizHintCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(QuizHintCommand.COMMAND_WORD) instanceof QuizHintCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"\\\\quit\") instanceof QuizQuitCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(QuizQuitCommand.COMMAND_WORD) instanceof QuizQuitCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(\"\\\\status\") instanceof QuizStatusCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(parser.parse(QuizStatusCommand.COMMAND_WORD) instanceof QuizStatusCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        parser.parse(\"\\\\unknownCommand\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void parse_differentUnknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            parser.parse(\"\\\\unknownCommand\\\\\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            parser.parse(\"\\\\unknown command with space\\\\\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            parser.parse(\"\\\\endsWithSpace        \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "halcyoneee": 67,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetTestParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalIndices.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.SetLessonTestValuesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class SetTestParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private SetTestParser parser \u003d new SetTestParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_validArgs_returnsSetTestCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseSuccess(parser, \"\" + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        + INDEX_SECOND.getOneBased(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new SetLessonTestValuesCommand(INDEX_FIRST, INDEX_SECOND));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Completely wrong input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetLessonTestValuesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Too few inputs, need 2 exactly"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetLessonTestValuesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Too many inputs, need 2 exactly"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"1 2 3\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetLessonTestValuesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Inputs must be distinct"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertParseFailure(parser, \"1 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetLessonTestValuesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StartCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static java.lang.String.format;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class StartCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private StartCommandParser parser \u003d new StartCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertParseFailure(parser, \"     \", format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertParseFailure(parser, \"start 1i c/15 m/LEARN\", format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    //TODO:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void parseAnswer() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 3,
      "lallanachang": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.UserPrefs.DARK_THEME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private final UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setTheme_lightToDark_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String newTheme \u003d userPref.toggleTheme();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPref.setTheme(newTheme);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(DARK_THEME, newTheme);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(DARK_THEME, userPref.getTheme());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefDiff \u003d new UserPrefs(userPref);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefsCopy \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(userPrefs.equals(userPrefsCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(userPrefs.equals(userPrefs));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(userPrefs \u003d\u003d null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(userPrefs.equals(5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        userPrefDiff.setLessonListFolderPath(Paths.get(\"test_different\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(userPref.equals(userPrefDiff));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefsCopy \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefsCopy.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefsDiff \u003d new UserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefsDiff.setGuiSettings(new GuiSettings(1, 2, 3, 5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(userPrefs.hashCode(), userPrefsDiff.hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setUserFilePath_nullUserFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setUserFilePath(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonListFolderPath_nullLessonListFolderPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setLessonListFolderPath(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertNotNull(userPref.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 20,
      "halcyoneee": 48,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/CardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_OPT1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Tests the {@code Card} object (100% coverage)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void createCards() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card newCard \u003d new Card(CARD_BELGIUM.getCores());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card anotherCard \u003d new Card(CARD_BELGIUM.getCores(), CARD_BELGIUM.getOptionals());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newCard.getCores(), anotherCard.getCores());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(newCard, anotherCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different type of object -\u003e return false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_BELGIUM.equals(new Object()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(CARD_BELGIUM.equals(CARD_BELGIUM));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different object -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_BELGIUM.equals(CARD_JAPAN));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores and optionals -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(CARD_BELGIUM.equals(belgiumCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores with modified optionals -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card modifiedCopy \u003d new CardBuilder(CARD_JAPAN).withOptionals(\"Same characters as Kyoto\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_JAPAN.equals(modifiedCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Modify existing card to have same cores and optionals as another card -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modifiedCopy \u003d new CardBuilder(CARD_BELGIUM)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withCores(CARD_JAPAN_CORE1, CARD_JAPAN_CORE2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withOptionals(CARD_JAPAN_OPT1).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(CARD_JAPAN.equals(modifiedCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores and optionals but different order for cores -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modifiedCopy \u003d new CardBuilder(CARD_JAPAN).withCores(CARD_JAPAN_CORE2, CARD_JAPAN_CORE1).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(CARD_JAPAN.equals(modifiedCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAndGetCoresAndOptionals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card japanCopy \u003d new CardBuilder(CARD_JAPAN).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // These two cards have different cores and optionals and should not be equal."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setCores(japanCopy.getCores());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Despite having the same cores, the two cards still have different optionals."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setOptionals(japanCopy.getOptionals());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Both cards have the same cores and optionals, and should be treated as equivalents."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAndGetCoreAndOptional() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card japanCopy \u003d new CardBuilder(CARD_JAPAN).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(belgiumCopy, japanCopy);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setCore(0, japanCopy.getCore(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy.getCore(0), japanCopy.getCore(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        belgiumCopy.setOptional(0, japanCopy.getOptional(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy.getOptional(0), japanCopy.getOptional(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void cardToString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card newCard \u003d new Card(belgiumCopy.getCores(), belgiumCopy.getOptionals());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // newCard should be a copy of belgiumCopy"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy, newCard);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // since both cards are identical, their string representation should be the same"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy.toString(), newCard.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void cardToPrint() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card belgiumCopy \u003d new CardBuilder(CARD_BELGIUM).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card newCard \u003d new Card(belgiumCopy.getCores(), belgiumCopy.getOptionals());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // newCard should be a copy of belgiumCopy"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy, newCard);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // since both cards are identical, their string representation should be the same"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(belgiumCopy.toPrint(), newCard.toPrint());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 7,
      "halcyoneee": 5,
      "DigiPie": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonListBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lesson lesson \u003d TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lesson lessonToAdd \u003d TypicalLessonList.LESSON_TRUE_FALSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private LessonList lessonList \u003d new LessonListBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withLessons(List.of(lesson)).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int defaultSize \u003d lessonList.getLessons().size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getLessons_lessonListSetup_getsLessonsList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(lessonList.getLessons());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getLesson_invalidIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.getLesson(-1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLesson_validLesson_getsLesson() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lesson, lessonList.getLesson(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addLesson_validLesson_hasLesson() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson not yet added -\u003e hasLessonWithName is false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(lessonList.hasLessonWithName(lessonToAdd.getName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(lessonToAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added -\u003e lessonList.size() + 1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(defaultSize + 1, lessonList.getLessons().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // lesson added -\u003e hasLessonWithName is true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(lessonList.hasLessonWithName(lessonToAdd.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void addLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(lessonToAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.setLesson(0, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLesson_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.setLesson(defaultSize + 1, lesson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLesson_validInput_isEqual() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonToAdd, lessonList.getLesson(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.setLesson(0, lessonToAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonToAdd, lessonList.getLesson(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteLesson_invalidIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.deleteLesson(-1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson_validIndex_deletesLesson() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add lesson -\u003e lesson added and size of ArrayList updated"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(lessonToAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(defaultSize + 1, lessonList.getLessons().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete lesson -\u003e lesson deleted and size of ArrayList updated"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.deleteLesson(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(defaultSize, lessonList.getLessons().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to access deleted lesson -\u003e illegal argument exception thrown"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.getLesson(defaultSize);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void openLesson_validIndex_opensLesson() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open valid lesson at valid index -\u003e openedLesson \u003d Lesson at index 0"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // get openedLesson which has been set to lesson at index 0 -\u003e Lesson returned \u003d lesson at index 0"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonList.getOpenedLesson(), lessonList.getLesson(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // cards are the same"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonList.getOpenedLessonCards(), lessonList.getLesson(0).getCards());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // core headers are the same"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonList.getOpenedLessonCoreHeaders(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                lessonList.getLesson(0).getCoreHeaders());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // optional headers are the same"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonList.getOpenedLessonOptionalHeaders(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                lessonList.getLesson(0).getOptionalHeaders());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void openLesson_invalidIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open non-existing lesson at invalid index -\u003e IllegalArgumentException thrown"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(-1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void noOpenLesson_noOpenedLesson_returnNull() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // get openedLesson which has not been set -\u003e return null"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertNull(lessonList.getOpenedLesson());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void openThenCloseLesson_noOpenedLesson_returnNull() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open valid lesson at valid index -\u003e openedLesson \u003d Lesson at index 0"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // get openedLesson which has been set to valid lesson -\u003e return valid lesson"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(lessonList.getOpenedLesson());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // close lesson -\u003e openedLesson set to null"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.closeLesson();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // get openedLesson which has been set to null by closeLesson -\u003e return null"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertNull(lessonList.getOpenedLesson());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void openLesson_isThereOpenedLesson_returnTrue() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open valid lesson at valid index -\u003e openedLesson \u003d Lesson at index 0"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // is there opened lesson -\u003e return true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(lessonList.isThereOpenedLesson());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void closeLesson_isThereOpenedLesson_returnFalse() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // is there opened lesson -\u003e return false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(lessonList.isThereOpenedLesson());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open valid lesson at valid index -\u003e openedLesson \u003d Lesson at index 0"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // close lesson -\u003e openedLesson set to null"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.closeLesson();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // is there opened lesson -\u003e return false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(lessonList.isThereOpenedLesson());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteOpenedLesson_noOpenedLesson_returnNull() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(lessonToAdd);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open valid lesson at valid index -\u003e openedLesson \u003d Lesson at index 0"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(lessonList.getOpenedLesson());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // delete lesson at valid index -\u003e openedLesson \u003d null"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.deleteLesson(0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // get openedLesson which has been set to null by deleteLesson which calls closeLesson -\u003e return null"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertNull(lessonList.getOpenedLesson());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Card-related commands"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void openLesson_addCard_addSuccessful() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card card \u003d TypicalCards.CARD_CAT;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int size \u003d lessonList.getOpenedLessonCards().size();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addCardToOpenedLesson(card);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(size + 1, lessonList.getOpenedLessonCards().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCard() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int size \u003d lessonList.getOpenedLessonCards().size();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.deleteCardFromOpenedLesson(0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(size - 1, lessonList.getOpenedLessonCards().size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCard_invalidIndex_deleteUnsuccessful() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.openLesson(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.deleteCardFromOpenedLesson(500);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Equality check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonList, lessonList);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object type, different object -\u003e return false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonList diffLessonList \u003d new LessonListBuilder().withLessons(List.of(lessonToAdd)).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonList, diffLessonList);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonList, new Object());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 59,
      "DigiPie": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_CORE2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN_OPT1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_MULTI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalLessonList.LESSON_TRUE_FALSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new LessonBuilder(LESSON_DEFAULT).withName(\"\").build());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new LessonBuilder(LESSON_DEFAULT).withName(null).build());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void constructor_invalidCoreCount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new LessonBuilder(LESSON_DEFAULT).withCoreHeaders(\"City\").build());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void constructor_invalidFields_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new Lesson(LESSON_DEFAULT.getName(), 1,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                        List.of(\"City\", \"Capital\", \"Country Code\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void createLessons() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headers.addAll(LESSON_DEFAULT.getCoreHeaders());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int noOfCoreHeaders \u003d headers.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headers.addAll(LESSON_DEFAULT.getOptionalHeaders());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new Lesson(LESSON_DEFAULT.getName(), noOfCoreHeaders, headers);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getName(), LESSON_DEFAULT.getName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCoreHeaderSize(), noOfCoreHeaders);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different type of object -\u003e return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(LESSON_DEFAULT.equals(new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(LESSON_DEFAULT.equals(LESSON_DEFAULT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Different object -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // newLesson is LESSON_TRUE_FALSE without LESSON_TRUE_FALSE\u0027s optional headers"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new Lesson(LESSON_TRUE_FALSE.getName(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                LESSON_TRUE_FALSE.getCoreHeaderSize(), LESSON_TRUE_FALSE.getCoreHeaders());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(LESSON_TRUE_FALSE.equals(newLesson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Same cores and optionals -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setName(\"Different name\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(LESSON_DEFAULT.equals(newLesson)); // Should be considered equivalent"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setQuestionAnswerIndices() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setQuestionAnswerIndices(0, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(-1, 1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(2, 1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(0, -1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionAnswerIndices(0, 2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setAnswerCoreIndex(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionCoreIndex(-1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setQuestionCoreIndex(2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setAnswerCoreIndex(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setAnswerCoreIndex(-1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setAnswerCoreIndex(2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setAndGetIsVisibleOptionals() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(LESSON_DEFAULT.getCoreHeaderSize(), LessonBuilder.DEFAULT_CORE_HEADERS.size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        boolean[] isVisibleOptionals \u003d newLesson.getIsVisibleOptionals();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getIsVisibleOptionals(), isVisibleOptionals);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        boolean isFirstOptionalShown \u003d newLesson.getIsVisibleOptional(0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Not shown by default"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(false, isFirstOptionalShown);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                newLesson.setIsVisibleOptional(-1, true));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setIsVisibleOptional(0, true);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        isFirstOptionalShown \u003d newLesson.getIsVisibleOptional(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(true, isFirstOptionalShown);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOptionalHeadersToNull() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // attempt to set optional headers to null -\u003e nothing happens"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.setOptionalHeaders(null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getOptionalHeaders().size(), 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCard_invalidCard_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                LESSON_DEFAULT.addCard(CARD_MULTI));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                LESSON_DEFAULT.addCard(CARD_EMPTY));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCard_validCard_cardAdded() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder(LESSON_DEFAULT)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withCards(new CardBuilder().build(), new CardBuilder(CARD_DOG).build())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int count \u003d lesson.getCardCount();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lesson.addCard(List.of(CARD_JAPAN_CORE1, CARD_JAPAN_CORE2, CARD_JAPAN_OPT1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lesson.getCardCount(), count + 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCard_validCard_hasCard() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder(LESSON_DEFAULT).withNoCards().build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card card \u003d new CardBuilder(CARD_JAPAN).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // no card added yet -\u003e return false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(lesson.hasCard(card));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lesson.addCard(card);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // card added -\u003e return true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(lesson.hasCard(card));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCards() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withCards(new CardBuilder().build(), new CardBuilder(CARD_DOG).build())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCardCount(), 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.deleteCard(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCardCount(), 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void cardGetters() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new Lesson(\"Sample lesson\", LESSON_DEFAULT.getCoreHeaders(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                LESSON_DEFAULT.getOptionalHeaders());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Should not have cards yet"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.hasCards(), false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCardCount(), 0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        newLesson.addCard(CARD_JAPAN);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Should now have 1 card"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.hasCards(), true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCardCount(), 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.getCards(), List.of(CARD_JAPAN));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void cardToString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d new LessonBuilder(LESSON_DEFAULT).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // since both lessons are identical, their string representation should be the same"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(newLesson.toString(), LESSON_DEFAULT.toString());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 47,
      "halcyoneee": 3,
      "DigiPie": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/ManagementModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.UserPrefs.DARK_THEME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.UserPrefs.LIGHT_THEME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Lesson lesson \u003d TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private Card card \u003d TypicalCards.CARD_CAT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ManagementModelManager modelManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(new LessonList().getLessons(), modelManager.getLessons());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(new User(), modelManager.getUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void changeTheme_changeToDark_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.changeTheme();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(DARK_THEME, modelManager.getTheme());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void changeTheme_changeTwiceToLight_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.changeTheme();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.changeTheme();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(LIGHT_THEME, modelManager.getTheme());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        User user \u003d new User();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager \u003d new ManagementModelManager(userPrefs, lessonList, user);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModelManager modelManagerCopy \u003d new ManagementModelManager(userPrefs, lessonList, user);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager, modelManagerCopy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(modelManager);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(modelManager, 5);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // SRS testing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void userTests() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * Note: This is an integration test that verifies the ManagementModel is properly wired to the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * {@link User} class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * More extensive testing of User functionality is done in {@link User} class."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * TODO"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData testCardSrsData \u003d new CardSrsData(1, 1, 1,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.now(), false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        User testUser \u003d modelManager.getUser();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(new User(), testUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.addCardSrsData(testCardSrsData);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(testCardSrsData, modelManager.getCardSrsData(testCardSrsData.getHashCode()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.setCardSrsData(testCardSrsData);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(testCardSrsData, modelManager.getCardSrsData(testCardSrsData.getHashCode()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        modelManager.deleteCardSrsData(testCardSrsData);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, testUser.getCards().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    // Integration tests which tests {@link ManagementModel}, {@link LessonList} and {@link Lesson}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addLesson_validLesson_modelManagerUpdated() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // No lessons in modelManager by default"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(0, modelManager.getLessons().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(modelManager.hasLessonWithName(lesson.getName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Added lesson -\u003e lesson is in modelManager"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lesson, modelManager.getLesson(0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(1, modelManager.getLessons().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(modelManager.hasLessonWithName(lesson.getName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addLesson_invalidLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteLesson_validIndex_modelManagerUpdated() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int size \u003d modelManager.getLessons().size();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.deleteLesson(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(size - 1, modelManager.getLessons().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteLesson_invalidIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.deleteLesson(-1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getLessonList_noLessonAddedYet_returnEmptyLessonList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getLessonList(), new LessonList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLessonList_validLessonList_modelManagerUpdated() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonList testList \u003d new LessonList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        testList.addLesson(lesson);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Empty lessonList given no lessons added yet"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(modelManager.getLessonList(), new LessonList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Set lessonList to lessonList with lesson -\u003e lessonList set"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.setLessonList(testList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(testList, modelManager.getLessonList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLessonList_invalidLessonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.setLessonList(null);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLesson_validLesson_lessonSet() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getLesson(0), lesson);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson newLesson \u003d TypicalLessonList.LESSON_TRUE_FALSE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // set new lesson at index 0 -\u003e get lesson at index 0 returns new lesson"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.setLesson(0, newLesson);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(modelManager.getLesson(0), lesson);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getLesson(0), newLesson);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLesson_invalidLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getLesson(0), lesson);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // set invalid lesson at valid index -\u003e throw exception"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.setLesson(0, null);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedLesson_hasOpenedLesson_returnOpenedLesson() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getOpenedLesson(), lesson);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedLesson_noOpenedLesson_returnNull() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(modelManager.getOpenedLesson());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void openThenCloseLesson_noOpenedLesson_returnNull() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getOpenedLesson(), lesson);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.closeLesson();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // openedLesson closed -\u003e return null"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(modelManager.getOpenedLesson());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void openLesson_validLesson_thereIsLesson() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // no opened lesson -\u003e return false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertFalse(modelManager.isThereOpenedLesson());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opened lesson -\u003e return true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTrue(modelManager.isThereOpenedLesson());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedCards_openedLesson_returnOpenedCards() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opened lesson -\u003e return true"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(modelManager.getOpenedLessonCards());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedCards_noOpenedLesson_returnNull() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(modelManager.getOpenedLessonCards());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedLessonCoreHeaders_openedLesson_returnHeaders() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opened lesson -\u003e return true"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(modelManager.getOpenedLessonCoreHeaders());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedLessonCoreHeaders_noOpenedLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(modelManager.getOpenedLessonCoreHeaders());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedLessonOptHeaders_openedLesson_returnHeaders() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // opened lesson -\u003e return true"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotNull(modelManager.getOpenedLessonOptionalHeaders());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void getOpenedLessonOptHeaders_noOpenedLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNull(modelManager.getOpenedLessonOptionalHeaders());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCardToOpenedLesson_validCard_lessonUpdated() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int size \u003d modelManager.getOpenedLesson().getCardCount();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Add card to opened lesson -\u003e opened lesson\u0027s card count + 1"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addCardToOpenedLesson(card);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(size + 1, modelManager.getOpenedLesson().getCardCount());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCardToOpenedLesson_invalidCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Add invalid card to opened lesson -\u003e null pointer exception thrown"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addCardToOpenedLesson(null);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCardFromOpenedLesson_validIndex_lessonUpdated() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int size \u003d modelManager.getOpenedLesson().getCardCount();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Delete card from opened lesson -\u003e opened lesson\u0027s card count - 1"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.deleteCardFromOpenedLesson(0);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(size - 1, modelManager.getOpenedLesson().getCardCount());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCardFromOpenedLesson_invalidIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Delete card from opened lesson at invalid index -\u003e illegal argument exception thrown"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.deleteCardFromOpenedLesson(-1);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setTestForOpenedLesson_validIndices_setSuccessful() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Valid indices -\u003e successful set"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.setOpenedLessonTestValues(1, 0);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getOpenedLesson().getQuestionCoreIndex(), 1);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(modelManager.getOpenedLesson().getAnswerCoreIndex(), 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setTestForOpenedLesson_invalidIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.addLesson(lesson);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.openLesson(0); // Open added lesson"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Invalid index -\u003e illegal argument exception thrown"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        modelManager.setOpenedLessonTestValues(5, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 36,
      "halcyoneee": 70,
      "lallanachang": 2,
      "DigiPie": 240
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/ManagementModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A default management model stub which has all of the methods failing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * Extend this stub and use {@code @Override} to replace specific methods for unit testing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class ManagementModelStub implements ManagementModel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final String MESSAGE_ASSERT_ERROR \u003d \"This method should not be called.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasLessonWithName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String openLesson(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson getOpenedLesson() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cCard\u003e getOpenedLessonCards() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOpenedLessonCoreHeaders() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cString\u003e getOpenedLessonOptionalHeaders() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setOpenedLessonTestValues(int questionIndex, int answerIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCardToOpenedLesson(Card card) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean openLessonHasCard(Card card) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCardFromOpenedLesson(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String closeLesson() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean isThereOpenedLesson() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String changeTheme() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonList getLessonList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonList(LessonList lessonList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setLesson(int index, Lesson updatedLesson) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardSrsData getCardSrsData(int hashCode) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void addCardSrsData(CardSrsData card) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void setCardSrsData(CardSrsData card) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void deleteCardSrsData(CardSrsData card) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(MESSAGE_ASSERT_ERROR);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 4,
      "halcyoneee": 10,
      "DigiPie": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/QuizModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.CardBuilder.DEFAULT_OPTIONAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_LEARNT_BEFORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizModel modelManager \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizCard firstCard;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e generatedCards \u003d SESSION_DEFAULT_2.generateSession();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        firstCard \u003d generatedCards.get(0).generateOrderedQuizCardWithIndex(0, QuizMode.PREVIEW);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz \u003d new Quiz(generatedCards, SESSION_DEFAULT_2.getMode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getNextCard_notInitialised_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            modelManager.getNextCard());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void getSessionFields() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_LEARNT_BEFORE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"default\", modelManager.getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(1, modelManager.getIndex());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(1, modelManager.getCount());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(QuizMode.LEARN, modelManager.getMode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(List.of(new SrsCardBuilder().build()), modelManager.getQuizSrsCards());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void testUpdateUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        ManagementModelManager mgtManager \u003d new ManagementModelManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        QuizModelManager manager \u003d new QuizModelManager(mgtManager);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        manager.init(quiz, SESSION_LEARNT_BEFORE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e quizInformation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(0, 1, 1, 0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        manager.updateUserProfile(quizInformation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(mgtManager.getCardSrsData(CARD_BELGIUM.hashCode()).getNumOfAttempts(), 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(mgtManager.getCardSrsData(CARD_BELGIUM.hashCode()).getStreak(), 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(mgtManager.getCardSrsData(CARD_BELGIUM.hashCode()).isDifficult(), false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getNextCard() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // get first card"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(firstCard, modelManager.getNextCard());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // get the rest"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no cards left"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentProgress() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"0/6\", modelManager.getCurrentProgress());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"1/6\", modelManager.getCurrentProgress());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"6/6\", modelManager.getCurrentProgress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentQuizCard() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expected \u003d modelManager.getNextCard();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(firstCard, modelManager.getCurrentQuizCard());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, modelManager.getCurrentQuizCard());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getQuizCardList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(quiz.getOriginalQuizCardList(), modelManager.getQuizCardList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void toggleIsCardDifficult() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.toggleIsCardDifficult(0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.toggleIsCardDifficult(0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getOpt() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(DEFAULT_OPTIONAL, modelManager.getOpt());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isQuizDone() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.isQuizDone());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.isQuizDone());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setResultDisplay(false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.end();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.isQuizDone());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setResultDisplay() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setResultDisplay(true);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.isResultDisplay());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.setResultDisplay(false);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(modelManager.isResultDisplay());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // before doing any question"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, modelManager.end());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // after quiz end still can ask for next card, keeps track of previous entry"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(modelManager.hasCardLeft());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // preview questions and answer"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // start the actual quiz"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(0, \"Brussels\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(1, \"Tokyo\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(0, \"Belgium\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.getNextCard();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.updateTotalAttemptsAndStreak(1, \"Japan\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(0, 2, 2, 0));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(1, 2, 2, 0));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, modelManager.end());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(4, modelManager.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(4, modelManager.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManager.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModelManager modelManagerCopy \u003d new QuizModelManager();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        modelManagerCopy.init(quiz, SESSION_DEFAULT_2);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(modelManager, modelManagerCopy);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // other object -\u003e returns false"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(modelManager, quiz);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(5, modelManager);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 194,
      "lallanachang": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/modelmanager/QuizModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.model.modelmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class QuizModelStub implements QuizModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cQuizCard\u003e generateSession() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public QuizMode getMode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getQuestionHeader() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public String getAnswerHeader() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cString\u003e getOpt() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * This method should not be called."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cSrsCard\u003e getQuizSrsCards() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the {@code Quiz} and {@code Session} information."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void init(Quiz quiz, Session session) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns if there is still card left in {@code Quiz}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean hasCardLeft() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the next card in line for {@code Quiz}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public QuizCard getNextCard() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public String getCurrentProgress() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns the current QuizCard in {@code Quiz}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public QuizCard getCurrentQuizCard() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Update the totalAttempts and streak of a specified card in the current session."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index of the current {@code QuizCard}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param answer user input"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean updateTotalAttemptsAndStreak(int index, String answer) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getQuizTotalAttempts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public int getQuizTotalCorrectQuestions() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean toggleIsCardDifficult(int index) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public boolean isQuizDone() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns data needed by {@code Session} when {@code Quiz} end."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public List\u003cList\u003cInteger\u003e\u003e end() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void updateUserProfile(List\u003cList\u003cInteger\u003e\u003e quizInformation) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public List\u003cQuizCard\u003e getQuizCardList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public boolean isResultDisplay() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setResultDisplay(boolean resultDisplay) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public User getManagementModelUser() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 29,
      "lallanachang": 20,
      "DigiPie": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/QuizCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizCardTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String QUESTION \u003d \"Japan\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String ANSWER \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String QUESTION_HEADER \u003d \"Country\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String ANSWER_HEADER \u003d \"Capital\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizMode MODE \u003d QuizMode.PREVIEW;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final List\u003cString\u003e HINTS \u003d Arrays.asList(\"JP\", \"Asia\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard VALID_QUIZCARD \u003d new QuizCard(QUESTION, ANSWER, HINTS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final QuizCard VALID_QUIZCARD_INDEX \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        VALID_QUIZCARD.generateOrderedQuizCardWithIndex(1, QuizMode.PREVIEW);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(null, ANSWER, HINTS, QUESTION_HEADER, ANSWER_HEADER));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, null, HINTS, QUESTION_HEADER, ANSWER_HEADER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, ANSWER, null, QUESTION_HEADER, ANSWER_HEADER));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, ANSWER, HINTS, null, ANSWER_HEADER));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, ANSWER, HINTS, QUESTION_HEADER, null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_invalidQuizCard_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String invalidQn \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String invalidAns \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(invalidQn, ANSWER, HINTS, QUESTION_HEADER, ANSWER_HEADER));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(\"     \", ANSWER, HINTS, QUESTION_HEADER, ANSWER_HEADER));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, invalidAns, HINTS, QUESTION_HEADER, ANSWER_HEADER));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new QuizCard(QUESTION, \"     \", HINTS, QUESTION_HEADER, ANSWER_HEADER));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getQuestion() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(QUESTION, VALID_QUIZCARD.getQuestion());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(QUESTION, VALID_QUIZCARD_INDEX.getQuestion());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getAnswer() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(ANSWER, VALID_QUIZCARD.getAnswer());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(ANSWER, VALID_QUIZCARD_INDEX.getAnswer());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getOpt() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(HINTS, VALID_QUIZCARD.getOpt());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getIndex() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, VALID_QUIZCARD_INDEX.getIndex());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getQuizMode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(MODE, VALID_QUIZCARD_INDEX.getQuizMode());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getQuestionHeader() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(QUESTION_HEADER, VALID_QUIZCARD.getQuestionHeader());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getAnswerHeader() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(ANSWER_HEADER, VALID_QUIZCARD.getAnswerHeader());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isCorrect() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(VALID_QUIZCARD.isCorrect(ANSWER));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isCorrect(\" not answer\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isCorrect(\"       \"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            VALID_QUIZCARD.isCorrect(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isWrongTwice() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        VALID_QUIZCARD.isCorrect(\"wronganswer\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isWrongTwice());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        VALID_QUIZCARD.isCorrect(\"wrongansweragain\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(VALID_QUIZCARD.isWrongTwice());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void toggleIsCardDifficult() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isCardDifficult());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        VALID_QUIZCARD.toggleIsCardDifficult();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(VALID_QUIZCARD.isCardDifficult());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        VALID_QUIZCARD.toggleIsCardDifficult();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(VALID_QUIZCARD.isCardDifficult());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void updateTotalAttemptsAndStreak() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard quizCardWithIndex \u003d new QuizCard(QUESTION, ANSWER, HINTS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizCardWithIndex.updateTotalAttemptsAndStreak(true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quizCardWithIndex.getTotalAttempts());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quizCardWithIndex.getStreak());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizCardWithIndex.updateTotalAttemptsAndStreak(true);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, quizCardWithIndex.getTotalAttempts());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, quizCardWithIndex.getStreak());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizCardWithIndex.updateTotalAttemptsAndStreak(false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(3, quizCardWithIndex.getTotalAttempts());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(0, quizCardWithIndex.getStreak());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard copyValidQuizCard \u003d new QuizCard(QUESTION, ANSWER, HINTS,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard diffQuizCard \u003d new QuizCard(\"A\", \"B\", HINTS,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(VALID_QUIZCARD, VALID_QUIZCARD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(VALID_QUIZCARD, copyValidQuizCard);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different obj"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD, new Quiz(Arrays.asList(VALID_QUIZCARD, VALID_QUIZCARD), QuizMode.LEARN));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(\"random things\", VALID_QUIZCARD);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD, diffQuizCard);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value but contains index"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD, VALID_QUIZCARD_INDEX);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard copyValidQuizCard \u003d new QuizCard(QUESTION, ANSWER, HINTS,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard diffQuizCard \u003d new QuizCard(\"A\", \"B\", HINTS,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(VALID_QUIZCARD, copyValidQuizCard);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(VALID_QUIZCARD.hashCode(), copyValidQuizCard.hashCode());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD.hashCode(), diffQuizCard.hashCode());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value but contains index"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(VALID_QUIZCARD.hashCode(), VALID_QUIZCARD_INDEX);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void quizCardToString() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard validQuizCard \u003d new QuizCard(QUESTION, ANSWER, HINTS,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard copyValidQuizCard \u003d new QuizCard(QUESTION, ANSWER, HINTS,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard diffQuizCard \u003d new QuizCard(\"A\", \"B\", HINTS,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QUESTION_HEADER, ANSWER_HEADER);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(validQuizCard.toString(), copyValidQuizCard.toString());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(validQuizCard.toString(), diffQuizCard.toString());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(validQuizCard.toString(), VALID_QUIZCARD_INDEX.toString());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/QuizTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.quiz.QuizMode.DIFFICULT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.quiz.QuizMode.LEARN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.quiz.QuizMode.PREVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.model.quiz.QuizMode.REVIEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private List\u003cQuizCard\u003e validQuizCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private int validQuizCardSize;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard quizCard1 \u003d new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \"Country\", \"Capital\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final QuizCard quizCard2 \u003d new QuizCard(\"Hungary\", \"Budapest\", Arrays.asList(\"BE\", \"Europe\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \"Country\", \"Capital\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        validQuizCard \u003d Arrays.asList(quizCard1, quizCard2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        validQuizCardSize \u003d validQuizCard.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new Quiz(null, LEARN));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void constructor_invalidQuizCard_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new Quiz(validQuizCard, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new Quiz(Arrays.asList(new QuizCard(\"\", \"\", Arrays.asList(\"JP\", \"Asia\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                \"Country\", \"Capital\")), LEARN));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void generate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expectedPreview \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expectedReview \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expectedLearn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expectedCurrentCard;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c validQuizCardSize; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCurrentCard \u003d validQuizCard.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedPreview.add(expectedCurrentCard.generateOrderedQuizCardWithIndex(i, PREVIEW));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c validQuizCardSize; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCurrentCard \u003d validQuizCard.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedReview.add(expectedCurrentCard.generateOrderedQuizCardWithIndex(i, REVIEW));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c validQuizCardSize; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedCurrentCard \u003d validQuizCard.get(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            expectedReview.add(expectedCurrentCard.generateFlippedQuizCardWithIndex(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedLearn.addAll(expectedPreview);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedLearn.addAll(expectedReview);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // learn"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e actualLearn \u003d new Quiz(validQuizCard, LEARN).getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(6, actualLearn.size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedLearn, actualLearn);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // review"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e actualReview \u003d new Quiz(validQuizCard, REVIEW).getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(4, actualReview.size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedReview, actualReview);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // preview"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e actualPreview \u003d new Quiz(validQuizCard, PREVIEW).getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, actualPreview.size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedPreview, actualPreview);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // difficult \u003d\u003d preview"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e actualDifficult \u003d new Quiz(validQuizCard, DIFFICULT).getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, actualDifficult.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedPreview, actualDifficult);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void isNextCard() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.hasCardLeft());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // get all cards"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no cards left"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.hasCardLeft());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getNextCard() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- learn -------"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // normal"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e generated \u003d quiz.getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c validQuizCardSize * 3; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(generated.get(i), quiz.getNextCard());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals((i + 1) + \"/\" + validQuizCardSize * 3, quiz.getCurrentProgress());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no more cards"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, quiz::getNextCard);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- review -------"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizReview \u003d new Quiz(validQuizCard, REVIEW);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // normal"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e generatedReview \u003d quizReview.getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        for (int i \u003d 0; i \u003c validQuizCardSize * 2; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(generatedReview.get(i), quizReview.getNextCard());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals((i + 1) + \"/\" + validQuizCardSize * 2, quizReview.getCurrentProgress());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no more cards"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, quizReview::getNextCard);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- preview -------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizPreview \u003d new Quiz(validQuizCard, PREVIEW);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // normal"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e generatedPreview \u003d quizPreview.getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(generatedPreview.get(0), quizPreview.getNextCard());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(generatedPreview.get(1), quizPreview.getNextCard());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2 + \"/\" + validQuizCardSize, quizPreview.getCurrentProgress());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // no more cards"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, quizPreview::getNextCard);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentQuizCard_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, quiz::getCurrentQuizCard);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getCurrentQuizCard() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expected \u003d quiz.getNextCard();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(validQuizCard.get(0).generateOrderedQuizCardWithIndex(0, PREVIEW), quiz.getCurrentQuizCard());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.getCurrentQuizCard());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void updateTotalAttemptsAndStreak() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final int index \u003d 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String correctAnswer \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final String wrongAnswer \u003d \"wrong answer\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- learn -------"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e expected \u003d validQuizCard;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard expectedCard1 \u003d expected.get(index);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedCard1.updateTotalAttemptsAndStreak(expectedCard1.isCorrect(correctAnswer));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.updateTotalAttemptsAndStreak(index, correctAnswer));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.getOriginalQuizCardList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quiz.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quiz.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // test wrong answer"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedCard1.updateTotalAttemptsAndStreak(expectedCard1.isCorrect(wrongAnswer));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.updateTotalAttemptsAndStreak(index, wrongAnswer));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.getOriginalQuizCardList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(2, quiz.getQuizTotalAttempts());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(1, quiz.getQuizTotalCorrectQuestions());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- Review -------"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizReview \u003d new Quiz(validQuizCard, REVIEW);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizReview.getNextCard();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizReview.updateTotalAttemptsAndStreak(index, correctAnswer);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quizReview.getOriginalQuizCardList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // ------- Preview -------"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizPreview \u003d new Quiz(validQuizCard, REVIEW);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizPreview.getNextCard();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizPreview.updateTotalAttemptsAndStreak(index, correctAnswer);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quizPreview.getOriginalQuizCardList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(0, 1, 1, 0));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // quiz just started"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.isQuizDone());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // test 2 question"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(0, \"Tokyo\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(1, \"wrong answer\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.setQuizDone();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.end());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.isQuizDone());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void toggleIsCardDifficult() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        final int index \u003d 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.toggleIsCardDifficult(index));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.toggleIsCardDifficult(index));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quizCopy \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(quiz, quizCopy);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(quiz, quiz);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(quiz, new QuizCard(\"Japan\", \"Tokyo\", Arrays.asList(\"JP\", \"Asia\"),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \"Country\", \"Capital\"));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(5, quiz);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void completeFlow() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(0, 2, 2, 0));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expected.add(Arrays.asList(1, 2, 1, 0));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(validQuizCard, LEARN);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // Preview questions and answers"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.getNextCard();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.getNextCard().isCorrect(\"Tokyo\"));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(0, \"Tokyo\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(quiz.getNextCard().isCorrect(\"wrong answer\"));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(1, \"wrong answer\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.getNextCard().isCorrect(\"Japan\"));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(0, \"Japan\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertTrue(quiz.getNextCard().isCorrect(\"Hungary\"));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quiz.updateTotalAttemptsAndStreak(1, \"Hungary\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected, quiz.end());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 289
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/SessionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SessionTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_with_name())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        .withName(\"\").build_without_srsCards());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withName(\"\").build_with_name());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_count()).withName(\"\").build_without_count());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidMode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withMode(null).build());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withMode(null).buildIndex_without_srsCards());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_srsCards())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        .withMode(null).build_without_srsCards());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withMode(null).build_with_name());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_count()).withMode(null).build_without_count());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidCount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withCount(0).build());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build()).withCount(0).build_with_name());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().buildIndex_without_srsCards())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        .withCount(0).buildIndex_without_srsCards());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SessionBuilder(new SessionBuilder().build_without_srsCards())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        .withCount(0).build_without_srsCards());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void generateSession() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentSrsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session newSession \u003d new Session(\"Capitals\", 1, QuizMode.LEARN, List.of(currentSrsCard));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cQuizCard\u003e quizCards \u003d newSession.generateSession();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(quizCards.get(0).getQuestion(), CARD_BELGIUM.getCore(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(quizCards.get(0).getAnswer(), CARD_BELGIUM.getCore(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        newSession.setCount(15);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(15, newSession.getCount());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        newSession.setCount(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(currentSrsCard.getHashcode(), newSession.getQuizSrsCards().get(0).getHashcode());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void updateUser() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentSrsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Session newSession \u003d new Session(\"Capitals\", 1, QuizMode.LEARN, List.of(currentSrsCard));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cList\u003cInteger\u003e\u003e quizInformation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(0, 1, 1, 0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData actual \u003d new CardSrsData(currentSrsCard.getHashcode(), 2, 2,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(123).plus(Duration.ofHours(5)), false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(newSession.updateUserProfile(quizInformation).get(0).getHashCode(), actual.getHashCode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "lallanachang": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/SrsCardsManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static junit.framework.TestCase.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.SrsCardBuilder.DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_CAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOGCAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_MULTI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardsManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private HashMap\u003cInteger, CardSrsData\u003e cardData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cList\u003cInteger\u003e\u003e quizInformation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Instant currentDate \u003d Instant.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards \u003d List.of(new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_JAPAN, new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    currentDate.plus(Duration.ofHours(20)), false), lesson)).build(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_CAT, new CardSrsData(CARD_CAT.hashCode(), 1,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, currentDate.plus(Duration.ofHours(7)), false), lesson)).build(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_DOG, new CardSrsData(CARD_DOG.hashCode(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, 1, currentDate.plus(Duration.ofHours(3)), false), lesson)).build(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_DOGCAT, new CardSrsData(CARD_DOGCAT.hashCode(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, 0, currentDate.plus(Duration.ofHours((long) 0.5)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    false), lesson)).build(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            new SrsCardBuilder(new SrsCard(CARD_MULTI, new CardSrsData(CARD_MULTI.hashCode(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                    1, 1, currentDate.plus(Duration.ofHours(0)), true), lesson)).build());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_sort_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(lesson, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(null, cardData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_update_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Instant currentDate \u003d Instant.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(null, quizInformation, currentDate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCardsManager(srsCards, null, currentDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkPreviewAndDifficult() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardSrsDataJapan \u003d new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                currentDate, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_JAPAN.hashCode(), cardSrsDataJapan);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        lesson.addCard(CARD_CAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager manager \u003d new SrsCardsManager(lesson, cardData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e expectedPreview \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e expectedDifficult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedPreview.add(new SrsCardBuilder().build());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedPreview.add(new SrsCard(CARD_JAPAN, cardSrsDataJapan, lesson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedDifficult.add(new SrsCard(CARD_JAPAN, cardSrsDataJapan, lesson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardSrsDataCat \u003d new CardSrsData(CARD_CAT.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                currentDate, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expectedPreview.add(new SrsCard(CARD_CAT, cardSrsDataCat, lesson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e actualPreview \u003d manager.preview();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e actualDifficult \u003d manager.previewDifficult();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedPreview, actualPreview);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expectedDifficult, actualDifficult);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkLearn() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager manager \u003d new SrsCardsManager(lesson, cardData);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e actual \u003d manager.learn();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCard(CARD_JAPAN, new CardSrsData(CARD_JAPAN.hashCode(), 0, 0,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                currentDate, false), lesson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(actual.get(0).getHashcode(), expected.get(0).getHashcode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(actual.get(0).getNumOfAttempts(), expected.get(0).getNumOfAttempts());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertFalse(actual.get(0).getCardData().isDifficult());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkSort() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardSrsDataJapan \u003d new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(1233), false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_JAPAN.hashCode(), cardSrsDataJapan);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        lesson.addCard(CARD_CAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardSrsDataCat \u003d new CardSrsData(CARD_CAT.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.now(), false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager currentManager \u003d new SrsCardsManager(lesson, cardData);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d currentManager.sort();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCardBuilder().build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCard(CARD_JAPAN, cardSrsDataJapan, lesson));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCard(CARD_CAT, cardSrsDataCat, lesson));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expected, srsCards);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkSortReverse() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_BELGIUM.hashCode(), DEFAULT_CARDSRSDATA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardSrsDataJapan \u003d new CardSrsData(CARD_JAPAN.hashCode(), 1, 1,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                Instant.ofEpochMilli(1233), false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData.put(CARD_JAPAN.hashCode(), cardSrsDataJapan);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager currentManager \u003d new SrsCardsManager(new LessonBuilder("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new Lesson(\"Capitals\", List.of(\"Country\", \"Capital\"), List.of(\"Hint\"), 0,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        1, List.of(CARD_JAPAN, CARD_BELGIUM))).build(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                        cardData);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e srsCards \u003d currentManager.sort();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cSrsCard\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCardBuilder().build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new SrsCard(CARD_JAPAN, cardSrsDataJapan, lesson));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(expected, srsCards);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkUpdate() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(0, 1, 1, 0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(1, 1, 1, 0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(2, 1, 1, 0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(3, 1, 1, 0));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(4, 1, 0, 0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        quizInformation.add(List.of(5, 1, 1, 1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCardsManager currentManager \u003d new SrsCardsManager(srsCards, quizInformation, currentDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCardSrsData\u003e cardData \u003d currentManager"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .updateCardData();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        List\u003cCardSrsData\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_BELGIUM.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(5)), false));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_JAPAN.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(48)), false));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_CAT.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(48)), false));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_DOG.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(24)), false));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_DOGCAT.hashCode(), 2, 0, currentDate"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(1)), false));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        expected.add(new CardSrsData(CARD_MULTI.hashCode(), 2, 2, currentDate"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                .plus(Duration.ofHours(12)), true));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            assertEquals(expected.get(i).getSrsDueDate(), cardData.get(i).getSrsDueDate());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            assertEquals(expected.get(i).getNumOfAttempts(), cardData.get(i).getNumOfAttempts());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            assertEquals(expected.get(i).getStreak(), cardData.get(i).getStreak());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            if (i \u003c 4) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                assertFalse(expected.get(i).isDifficult());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                assertEquals(expected.get(i).isDifficult(), cardData.get(i).isDifficult());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/model/srscard/SrsCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.model.srscard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.SrsCardBuilder.DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.testutil.SrsCardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final Card card \u003d CARD_BELGIUM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final CardSrsData cardData \u003d DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private static final Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void constructor_invalidInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(card, null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, null, lesson));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(card, null, lesson));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, cardData, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(card, cardData, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                new SrsCard(null, cardData, lesson));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void fieldsGetter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentSrsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(CARD_BELGIUM, currentSrsCard.getCard());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(DEFAULT_CARDSRSDATA, currentSrsCard.getCardData());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(new LessonBuilder().build(), currentSrsCard.getLesson());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public void checkCardData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        SrsCard currentSrsCard \u003d new SrsCardBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(CARD_BELGIUM.hashCode(), currentSrsCard.getHashcode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(1, currentSrsCard.getNumOfAttempts());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(1, currentSrsCard.getStreak());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(Instant.ofEpochMilli(123), currentSrsCard.getSrsDueDate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/CardSrsDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CardSrsDataTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Instant date \u003d Instant.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private CardSrsData testCardData \u003d new CardSrsData(1, 1, 1, date, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private CardSrsData expectedCardData \u003d new CardSrsData(1, 1, 1, date, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private CardSrsData card \u003d new CardSrsData(1, 1, 1, date, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private int outCardInt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setAndGetCardTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        card.setCard(testCardData.getHashCode(), testCardData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData outCard \u003d card.getCard(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(testCardData, outCard);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void getHashCodeTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        outCardInt \u003d card.getHashCode();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(expectedCardData.getHashCode(), outCardInt);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setAndGetNumOfAttemptsTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        card.setNumOfAttempts(testCardData.getNumOfAttempts());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        outCardInt \u003d card.getNumOfAttempts();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(expectedCardData.getNumOfAttempts(), outCardInt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setAndGetStreakTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        card.setStreak(testCardData.getStreak());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        outCardInt \u003d card.getStreak();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(expectedCardData.getStreak(), outCardInt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void isDifficult() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(testCardData.isDifficult(), expectedCardData.isDifficult());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void getSrsDueDateTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        String outCardString \u003d testCardData.getSrsDueDate().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(expectedCardData.getSrsDueDate().toString(), outCardString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData card \u003d new CardSrsData(1, 1, 1, date, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        CardSrsData cardCopy \u003d new CardSrsData(1, 1, 1, date, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertFalse(card.equals(cardCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertTrue(card.equals(card));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertFalse(card \u003d\u003d null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertFalse(card.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 72,
      "lallanachang": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private User user \u003d new User();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Instant date \u003d Instant.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private final CardSrsData testCardData \u003d new CardSrsData(1, 1, 1, date, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private final CardSrsData testCardData2 \u003d new CardSrsData(20, 20, 20, date,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void addCardTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.addCard(testCardData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData expectedOutput \u003d user.getCard(testCardData.getHashCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(testCardData, expectedOutput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void deleteCardTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.deleteCard(testCardData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData expectedOutput \u003d user.getCard(testCardData.getHashCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(null, expectedOutput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setCardTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.setCard(testCardData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData expectedOutput \u003d user.getCard(testCardData.getHashCode());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(testCardData, expectedOutput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void getCardTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.addCard(testCardData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CardSrsData expectedOutput \u003d user.getCard(testCardData.getHashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(testCardData.getHashCode(), expectedOutput.getHashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void getCardsTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        HashMap\u003cInteger, CardSrsData\u003e expectedOutput \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        expectedOutput.put(1, testCardData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        expectedOutput.put(20, testCardData2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.setCard(testCardData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user.setCard(testCardData2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(user.getCards(), expectedOutput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void equalTest() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        User user1 \u003d new User();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user1.addCard(testCardData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        User user2 \u003d new User();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user2.addCard(testCardData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        User user3 \u003d new User();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        user3.addCard(testCardData2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertTrue(\"User is the same\", user1.equals(user2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertFalse(\"User is not the same\", user3.equals(user1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertTrue(\"User is the same\", user1.equals(user1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertFalse(\"Compare with different objects\", user.equals(testCardData));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 69,
      "lallanachang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleLessons.SAMPLE_1_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleLessons.SAMPLE_2_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getSampleBrainTrain() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(SAMPLE_1_LESSON);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList.addLesson(SAMPLE_2_LESSON);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(lessonList, SampleDataUtil.getSampleBrainTrain());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 15,
      "DigiPie": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/CsvLessonListStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class CsvLessonListStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path EMPTY_LESSON_FILE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonListStorageTest\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"emptyLessonFile\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path EMPTY_HEADER_VALUE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonListStorageTest\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"emptyHeaderValue\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path EMPTY_FIELD_NAME_VALUE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonListStorageTest\", \"emptyFieldNameValue\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path INVALID_CORE_COUNT_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonListStorageTest\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"invalidCoreCount\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path INVALID_TESTED_FIELDS_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonListStorageTest\", \"invalidTestedFields\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path MISMATCH_HEADER_AND_FIELD_COUNT_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonListStorageTest\", \"mismatchHeaderAndFieldCount\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path MISSING_CORE_VALUE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonListStorageTest\", \"missingCoreValues\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path MULTIPLE_FILES_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonListStorageTest\", \"multipleFiles\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path NO_VALID_FILES_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonListStorageTest\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"noValidFiles\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path READ_ONLY_FILE_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonListStorageTest\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"readOnlyFile\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path SINGLE_TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonListStorageTest\", \"singleTestLessons\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvLessonListStorageTest\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Optional\u003cLessonList\u003e readLessonList(Path lessonListInTestDataFolder) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return new CsvLessonListStorage(lessonListInTestDataFolder).readLessonList(lessonListInTestDataFolder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private void saveLessonList(Path folderPath, LessonList lessonList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage cls \u003d new CsvLessonListStorage(folderPath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        cls.saveLessonList(lessonList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private LessonList getTestLessonList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonList.addLesson(getTestLesson());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lessonList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private Lesson getTestLesson() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        ArrayList\u003cString\u003e testFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        testFields.add(\"test 2\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"test\", 2, testFields);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLessonListFolderPath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage csvLessonListStorage \u003d new CsvLessonListStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(TEST_DATA_FOLDER, csvLessonListStorage.getLessonListFolderPath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonListFolderPath_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage csvLessonListStorage \u003d new CsvLessonListStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvLessonListStorage.setLessonListFolderPath(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void setLessonListFolderPath_validFilePath_folderSet() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage csvLessonListStorage \u003d new CsvLessonListStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        csvLessonListStorage.setLessonListFolderPath(NO_VALID_FILES_FOLDER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(NO_VALID_FILES_FOLDER, csvLessonListStorage.getLessonListFolderPath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        readLessonList(null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_invalidCoreCountLesson_emptyLessonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList actual \u003d readLessonList(INVALID_CORE_COUNT_FOLDER).get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(new LessonList(), actual);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_invalidTestedFields_defaultQuestionAnswerIndex() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList actual \u003d readLessonList(INVALID_TESTED_FIELDS_FOLDER).get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, actual.getLesson(0).getQuestionCoreIndex());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1, actual.getLesson(0).getAnswerCoreIndex());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_emptyFolder_emptyResult() throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList actual \u003d readLessonList(testFolder.newFolder().toPath()).orElse(new LessonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(new LessonList(), actual);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_emptyHeaderValue_lessonIgnored() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d readLessonList(EMPTY_HEADER_VALUE_FOLDER).get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, lessonList.getLessons().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_emptyFieldNameValue_lessonIgnored() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d readLessonList(EMPTY_FIELD_NAME_VALUE_FOLDER).get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(CsvLessonListStorage.DEFAULT_FIELD_NAME, lessonList.getLessons().get(0).getCoreHeaders().get(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_missingData_cardIgnored() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d readLessonList(MISSING_CORE_VALUE_FOLDER).get();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, lessonList.getLesson(0).getCards().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_mismatchHeaderAndFieldCount_lessonIgnored() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d readLessonList(MISMATCH_HEADER_AND_FIELD_COUNT_FOLDER).get();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, lessonList.getLessons().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_validFile_successfullyRead() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList expected \u003d getTestLessonList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList actual \u003d readLessonList(SINGLE_TEST_DATA_FOLDER).get();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_validMultipleFiles_successfullyRead() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage csvLessonListStorage \u003d new CsvLessonListStorage(MULTIPLE_FILES_FOLDER);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d csvLessonListStorage.readLessonList().orElse(new LessonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertTrue(lessonList.getLessons().size() \u003e 1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_noValidFiles_emptyLessonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList actual \u003d readLessonList(NO_VALID_FILES_FOLDER).orElse(new LessonList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(new LessonList(), actual);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void readLessonList_emptyLessonFile_emptyLessonList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList actual \u003d readLessonList(EMPTY_LESSON_FILE_FOLDER).get();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(new LessonList(), actual);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveLessonList_validLessonListAndPath_successfullySaved() throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage csvLessonListStorage \u003d new CsvLessonListStorage(testFolder.newFolder().toPath());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d csvLessonListStorage.readLessonList(MULTIPLE_FILES_FOLDER).get();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(3, csvLessonListStorage.saveLessonList(lessonList));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveLessonList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        saveLessonList(null, new LessonList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void saveLessonList_nullLessonList_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        saveLessonList(testFolder.newFolder().toPath(), null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 183,
      "DigiPie": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/CsvUserStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "public class CsvUserStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final Path NO_VALID_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"UserStorageTest\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            \"noValidFile\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"UserStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final Path HASHCODE_ZERO_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"UserStorageTest\", \"hashcodeZeroTest.csv\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final Path NEGATIVE_ATTEMPTS_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"UserStorageTest\", \"numberOfAttemptsNegativeTest.csv\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private static final Path NEGATIVE_STREAK_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"UserStorageTest\", \"streakNegativeTest.csv\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private Optional\u003cUser\u003e readUser(Path userInTestDataFile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        return new CsvUserStorage(userInTestDataFile).readUser(userInTestDataFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    private void saveUser(Path filePath, User user) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CsvUserStorage cls \u003d new CsvUserStorage(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        cls.saveUser(user);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void getUserFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CsvUserStorage csvUserStorage \u003d new CsvUserStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(TEST_DATA_FOLDER, csvUserStorage.getUserFilePath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setUserFilePath_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CsvUserStorage csvUserStorage \u003d new CsvUserStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        csvUserStorage.setUserFilePath(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void setUserFilePath_validFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        CsvUserStorage csvUserStorage \u003d new CsvUserStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        csvUserStorage.setUserFilePath(NO_VALID_FILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        assertEquals(NO_VALID_FILE, csvUserStorage.getUserFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void readUser_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        readUser(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void readUserTest_hashcodeZero_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        Assert.assertTrue(readUser(HASHCODE_ZERO_FILE).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void readUserTest_numberOfAttemptsNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        Assert.assertTrue(readUser(NEGATIVE_ATTEMPTS_FILE).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void readUserTest_streakNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        Assert.assertTrue(readUser(NEGATIVE_STREAK_FILE).isPresent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        saveUser(null, new User());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    public void saveUser_nullUser_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "        saveUser(testFolder.newFolder().toPath(), null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeraldtsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeraldtsy": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.NoSuchFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path NO_VALID_FILES_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"CsvLessonListStorageTest\", \"noValidFiles\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path READ_ONLY_TEST_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        \"StorageManagerTest\", \"readOnlyFile\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private static final Path EMPTY_TEST_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"StorageManagerTest\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage lessonListStorage \u003d new CsvLessonListStorage(getTempFilePath(\"data\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvUserStorage userStorage \u003d new CsvUserStorage(getTempFilePath(\"data\\\\user\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage, lessonListStorage, userStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        JsonUserPrefsStorage expected \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expected.getUserPrefsFilePath(), storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void lessonListReadSave() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * {@link CsvLessonListStorage} class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * More extensive testing of LessonList saving/reading is done in {@link CsvLessonListStorage} class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonList original \u003d new LessonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.setLessonListFolderPath(NO_VALID_FILES_FOLDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList retrieved \u003d storageManager.readLessonList().orElse(new LessonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        retrieved \u003d storageManager.readLessonList(NO_VALID_FILES_FOLDER).orElse(new LessonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, storageManager.saveLessonList(retrieved));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, storageManager.saveLessonList(retrieved, NO_VALID_FILES_FOLDER));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getLessonListFolderPath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage expected \u003d new CsvLessonListStorage(getTempFilePath(\"data\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(expected.getLessonListFolderPath(), storageManager.getLessonListFolderPath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void userReadSave() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * {@link CsvUserStorage} class."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * More extensive testing of User saving/reading is done in {@link CsvUserStorage} class."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         * TODO"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        User original \u003d new User();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Path testFile \u003d testFolder.newFile(\"user.csv\").toPath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.setUserFilePath(testFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(original, storageManager.readUser().orElse(new User()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(original, storageManager.readUser(testFile).orElse(new User()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        original.addCard(new CardSrsData(1, 1, 1, Instant.now(), false));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.saveUser(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1 , storageManager.readUser().get().getCards().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.saveUser(original, testFile);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(1 , storageManager.readUser(testFile).get().getCards().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void getUserFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvUserStorage expected \u003d new CsvUserStorage(getTempFilePath(\"data\\\\user\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(expected.getUserFilePath(), storageManager.getUserFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson_validFile_successfulDelete () throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.setLessonListFolderPath(EMPTY_TEST_FOLDER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        LessonList lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        lessonList.addLesson(TypicalLessonList.LESSON_DEFAULT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.saveLessonList(lessonList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.deleteLesson(TypicalLessonList.LESSON_DEFAULT.getName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        assertEquals(0, Files.walk(EMPTY_TEST_FOLDER, 1).filter(path -\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            path.toString().endsWith(\".csv\")).count());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson_missingFile_throwsNoSuchFileException () throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.setLessonListFolderPath(EMPTY_TEST_FOLDER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(NoSuchFileException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.deleteLesson(TypicalLessonList.LESSON_DEFAULT.getName());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public void deleteLesson_readOnlyFile_throwsIoException () throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.setLessonListFolderPath(READ_ONLY_TEST_FOLDER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        Files.walk(READ_ONLY_TEST_FOLDER).forEach(path -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            File f \u003d new File(path.toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            f.setReadOnly();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        storageManager.deleteLesson(TypicalLessonList.LESSON_DEFAULT.getName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 88,
      "halcyoneee": 5,
      "lallanachang": 1,
      "-": 55,
      "DigiPie": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class to help with building {@link Card} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_CORE \u003d List.of(\"Belgium\", \"Brussels\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_OPTIONAL \u003d List.of(\"B\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e cores;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e optionals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores.addAll(DEFAULT_CORE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals.addAll(DEFAULT_OPTIONAL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cores \u003d cardToCopy.getCores();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionals \u003d cardToCopy.getOptionals();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code cores} into a {@code List\u003ccores\u003e} and set it to the {@code Card} which we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder withCores(String ... cores) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cores \u003d Arrays.asList(cores);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code optionals} into a {@code List\u003coptionals\u003e} and set it to the {@code Card} which we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder withOptionals(String ... optionals) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals \u003d Arrays.asList(optionals);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the {@code Card} to have no {@code optionals}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public CardBuilder withNoOptionals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Builds and returns a {@link Card}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a {@link Card}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        if (optionals.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new Card(cores);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            return new Card(cores, optionals);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "DigiPie": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class to help with building {@link Lesson} objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Capitals\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_CORE_HEADER_1 \u003d \"Country\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_CORE_HEADER_2 \u003d \"Capital\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String DEFAULT_OPT_HEADER_1 \u003d \"Hint\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_CORE_HEADERS \u003d List.of(DEFAULT_CORE_HEADER_1, DEFAULT_CORE_HEADER_2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_OPT_HEADERS \u003d List.of(DEFAULT_OPT_HEADER_1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final int DEFAULT_QUESTION_CORE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final int DEFAULT_ANSWER_CORE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final List\u003cCard\u003e DEFAULT_CARDS \u003d List.of(CARD_BELGIUM, CARD_JAPAN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e coreHeaders;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cString\u003e optionalHeaders;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int questionCoreIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private int answerCoreIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private List\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        coreHeaders \u003d DEFAULT_CORE_HEADERS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionalHeaders \u003d DEFAULT_OPT_HEADERS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d DEFAULT_QUESTION_CORE_INDEX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d DEFAULT_ANSWER_CORE_INDEX;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d DEFAULT_CARDS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        name \u003d lessonToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        coreHeaders \u003d lessonToCopy.getCoreHeaders();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        optionalHeaders \u003d lessonToCopy.getOptionalHeaders();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d lessonToCopy.getQuestionCoreIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d lessonToCopy.getAnswerCoreIndex();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cards \u003d lessonToCopy.getCards();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the {@code Lesson}\u0027s name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code coreHeaders} into a {@code List\u003cCards\u003e} and set it to the {@code Lesson}\u0027s"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #coreHeaders}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withCoreHeaders(String ... coreHeaders) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.coreHeaders \u003d Arrays.asList(coreHeaders);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code optionalHeaders} into a {@code List\u003cCards\u003e} and set it to the {@code Lesson}\u0027s"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@link #optionalHeaders}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withOptionalHeaders(String ... optionalHeaders) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionalHeaders \u003d Arrays.asList(optionalHeaders);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Removes all optional headers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withNoOptionalHeaders() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.optionalHeaders \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Parses the {@code cards} into a {@code List\u003cCards\u003e} and set it to the {@code Lesson}\u0027s {@link #cards}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withCards(Card ... cards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cards \u003d Arrays.asList(cards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Sets the {@code Lesson} to have no {@code Cards} in {@link #cards}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withNoCards() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the question in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withQuestionCoreIndex(int index) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        questionCoreIndex \u003d index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param index the index of the answer in the {link Card} objects\u0027 list of cores."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonBuilder withAnswerCoreIndex(int index) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        answerCoreIndex \u003d index;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Builds and returns a lesson."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a lesson"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new Lesson(name, coreHeaders, optionalHeaders, questionCoreIndex, answerCoreIndex, cards);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "DigiPie": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class to help with building {@link LessonList} objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private LessonList lessonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Builds an empty {@link LessonList} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonListBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonList \u003d new LessonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Adds {@link Lesson} objects to the {@code LessonList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @param lessons the {@link Lesson} objects to the {@code LessonList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonListBuilder withLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (Lesson lesson: lessons) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lessonList.addLesson(lesson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Builds and returns a {@link LessonList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * @return a {@link LessonList}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public LessonList build() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return lessonList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SessionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * A utility class to help with building {@code Session} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SessionBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"01-01-Learn\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final int DEFAULT_COUNT \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final QuizMode DEFAULT_MODE \u003d QuizMode.LEARN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final List\u003cSrsCard\u003e DEFAULT_SRSCARDS \u003d List.of();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int count;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private QuizMode mode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private List\u003cSrsCard\u003e srsCards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        count \u003d DEFAULT_COUNT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        mode \u003d DEFAULT_MODE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        srsCards \u003d DEFAULT_SRSCARDS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        index \u003d DEFAULT_INDEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Initializes the SessionBuilder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder(Session currentSession) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        name \u003d currentSession.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        count \u003d currentSession.getCount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        mode \u003d currentSession.getMode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        srsCards \u003d currentSession.getSrsCards();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        index \u003d currentSession.getLessonIndex();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sets the {@code Sessionn}\u0027s name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sets the {@code Sessionn}\u0027s mode."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public SessionBuilder withMode(QuizMode mode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Sets the {@code Sessionn}\u0027s cardCount."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SessionBuilder withCount(int count) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Sets the {@code Sessionn}\u0027s srsCards."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public SessionBuilder withSrsCards(List\u003cSrsCard\u003e srsCards) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        this.srsCards \u003d srsCards;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Builds and returns a session."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return a session"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(index, count, mode, srsCards);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session build_with_name() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(name, count, mode, srsCards);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session build_without_count() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(name, mode, srsCards);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session buildIndex_without_srsCards() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(index, count, mode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public Session build_without_srsCards() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new Session(name, count, mode);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 12,
      "lallanachang": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SrsCardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_BELGIUM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " * A utility class to help with building {@code SrsCard} objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lallanachang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "public class SrsCardBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public static final CardSrsData DEFAULT_CARDSRSDATA \u003d new CardSrsData(CARD_BELGIUM.hashCode(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            1, 1, Instant.ofEpochMilli(123), false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private CardSrsData cardData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    private Lesson lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        card \u003d CARD_BELGIUM;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData \u003d DEFAULT_CARDSRSDATA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Initializes the SessionBuilder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCardBuilder(SrsCard currentSrsCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        card \u003d currentSrsCard.getCard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        cardData \u003d currentSrsCard.getCardData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        lesson \u003d currentSrsCard.getLesson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lallanachang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * Builds and returns a SrsCard."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     * @return a SrsCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    public SrsCard build() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        return new SrsCard(card, cardData, lesson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lallanachang": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static Path getAndCreateFilePathInSandBoxFolder(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER.resolve(fileName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 3,
      "halcyoneee": 4,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@code Card} objects used for testing."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_BELGIUM \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_JAPAN_CORE1 \u003d \"Japan\"; // First core"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_JAPAN_CORE2 \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_JAPAN_OPT1 \u003d \"T\"; // First optional"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_JAPAN \u003d new CardBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_JAPAN_CORE1, CARD_JAPAN_CORE2)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withOptionals(CARD_JAPAN_OPT1).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_CAT_CORE1 \u003d \"Cats have 9 lives.\"; // First core"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_CAT_CORE2 \u003d \"No\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_CAT \u003d new CardBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_CAT_CORE1, CARD_CAT_CORE2).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOG_CORE1 \u003d \"Dogs can eat chocolate.\"; // First core"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOG_CORE2 \u003d \"No\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_DOG \u003d new CardBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_DOG_CORE1, CARD_DOG_CORE2).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOGCAT_CORE1 \u003d \"Dogs are better than cats.\"; // First core"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_DOGCAT_CORE2 \u003d \"Yes\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_DOGCAT \u003d new CardBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_DOGCAT_CORE1, CARD_DOGCAT_CORE2).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_MULTI_CORE1 \u003d \"Japan.\"; // First core"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_MULTI_CORE2 \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_MULTI_CORE3 \u003d \"Japanese\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_MULTI \u003d new CardBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_MULTI_CORE1, CARD_MULTI_CORE2, CARD_MULTI_CORE3).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_EMPTY_CORE1 \u003d \"Japan.\"; // First core"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final String CARD_EMPTY_CORE2 \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Card CARD_EMPTY \u003d new CardBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCores(CARD_EMPTY_CORE1, CARD_EMPTY_CORE2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private TypicalCards() {} // Prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARD_BELGIUM, CARD_JAPAN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 2,
      "DigiPie": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndices.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@link Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class TypicalIndices {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLessonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_CAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_DOGCAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " * A utility class containing a list of {@link Lesson} objects used for testing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "public class TypicalLessonList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Lesson LESSON_DEFAULT \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static final Lesson LESSON_TRUE_FALSE \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withName(\"True and False Trivia\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCoreHeaders(\"Proposition\", \"Truth value\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withOptionalHeaders(\"\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withQuestionCoreIndex(0)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withAnswerCoreIndex(1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .withCards(CARD_CAT, CARD_DOG, CARD_DOGCAT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    private TypicalLessonList() {} // Prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "    public static List\u003cLesson\u003e getTypicalLessonList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LESSON_DEFAULT, LESSON_TRUE_FALSE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 5,
      "DigiPie": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalQuiz.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT_2;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * A utility class containing a list of {@link QuizCard} objects used for testing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class TypicalQuiz {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Quiz QUIZ_LEARN \u003d new Quiz(SESSION_DEFAULT_2.generateSession(), SESSION_DEFAULT_2.getMode());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static List\u003cQuizCard\u003e generatedLearnCards \u003d QUIZ_LEARN.getGeneratedQuizCardList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final QuizCard FIRST_REVIEW_CARD \u003d generatedLearnCards.get(2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final QuizCard LAST_REVIEW_CARD \u003d generatedLearnCards.get(5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSession.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_JAPAN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import static seedu.address.testutil.TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.srscard.SrsCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.user.CardSrsData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * A utility class containing a list of {@code QuizCard} objects used for testing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class TypicalSession {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final SrsCard SRS_CARD_JAPAN \u003d new SrsCard(CARD_JAPAN, new CardSrsData(CARD_JAPAN.hashCode(), 1,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        1, Instant.now().plus(Duration.ofHours(2)), false), LESSON_DEFAULT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_DEFAULT \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of(new SrsCardBuilder().build()))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_DEFAULT_2 \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withCount(2)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder(SRS_CARD_JAPAN).build()))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_DEFAULT_2_ACTUAL \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withCount(2)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder(SRS_CARD_JAPAN).build()))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_PREVIEW_2 \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withCount(2)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder(SRS_CARD_JAPAN).build()))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withMode(QuizMode.PREVIEW)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_PREVIEW_2_ACTUAL \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withCount(2)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder(SRS_CARD_JAPAN).build()))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withMode(QuizMode.PREVIEW)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_REVIEW_2 \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withCount(2)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder(SRS_CARD_JAPAN).build()))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withMode(QuizMode.REVIEW)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_REVIEW_2_ACTUAL \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withCount(2)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder().build(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            new SrsCardBuilder(SRS_CARD_JAPAN).build()))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withMode(QuizMode.REVIEW)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static final Session SESSION_LEARNT_BEFORE \u003d new SessionBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .withSrsCards(List.of(new SrsCardBuilder().build()))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 1,
      "halcyoneee": 72,
      "lallanachang": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d StartCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.STYLE_CLASS_ERROR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String thirdCommand \u003d \"start\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 6,
      "-": 155,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/FlashcardCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import guitests.guihandles.FlashcardCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class FlashcardCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card cardWithNotOptionals \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        FlashcardCard cardCard \u003d new FlashcardCard(cardWithNotOptionals, 1, 0, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        uiPartRule.setUiPart(cardCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplay(cardCard, cardWithNotOptionals, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card card \u003d TypicalCards.CARD_MULTI;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        FlashcardCard cardCard \u003d new FlashcardCard(card, 0, 0, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same card, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        FlashcardCard copy \u003d new FlashcardCard(card, 0, 0, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(cardCard, copy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(cardCard, cardCard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(cardCard, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(cardCard, new Object());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same card with same index but different index -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Card differentCard \u003d new CardBuilder(card).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(cardCard, new FlashcardCard(differentCard, 0, 0, 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Asserts that {@code cardCard} displays the details of {@code expectedCard} correctly and matches"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void assertCardDisplay(FlashcardCard cardCard, Card expectedCard, int expectedId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        FlashcardCardHandle cardCardHandle \u003d new FlashcardCardHandle(cardCard.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expectedId + \". \", cardCardHandle.getId());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // verify card details are displayed correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplaysCard(expectedCard, cardCardHandle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/FlashcardPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class FlashcardPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void updateCardListTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d TypicalLessonList.LESSON_TRUE_FALSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        FlashcardPanel cardListPanel \u003d new FlashcardPanel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cardListPanel.updateCardList(lesson);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(cardListPanel.getViewItemCount(), lesson.getCardCount());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void hideCardListTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d TypicalLessonList.LESSON_TRUE_FALSE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        FlashcardPanel cardListPanel \u003d new FlashcardPanel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cardListPanel.updateCardList(lesson);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(cardListPanel.getViewItemCount(), lesson.getCardCount());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // after hiding -\u003e no more view items"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        cardListPanel.hideCardList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(cardListPanel.getViewItemCount(), 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI unit test class for AddressBook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 1,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/LessonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysLesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import guitests.guihandles.LessonCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // no optionals"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lessonWithNotOptionals \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withCoreHeaders(\"A\", \"B\", \"C\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withNoOptionalHeaders()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withNoCards()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonCard lessonCard \u003d new LessonCard(lessonWithNotOptionals, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        uiPartRule.setUiPart(lessonCard);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplay(lessonCard, lessonWithNotOptionals, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lessonWithOptionals \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonCard \u003d new LessonCard(lessonWithOptionals, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        uiPartRule.setUiPart(lessonCard);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplay(lessonCard, lessonWithOptionals, 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonCard lessonCard \u003d new LessonCard(lesson, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same same -\u003e return true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonCard, lessonCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same lesson, same index -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonCard copy \u003d new LessonCard(lesson, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonCard, copy);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonCard, lessonCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(null, lessonCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(0, lessonCard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonCard, new LessonOverview(lesson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same lesson with same index but different index -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson differentLesson \u003d new LessonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonCard, new LessonCard(differentLesson, 0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different lesson, same index -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        differentLesson \u003d new LessonBuilder().withNoCards().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonCard, new LessonCard(differentLesson, 0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same lesson, different index -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonCard, new LessonCard(lesson, 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Asserts that {@code lessonCard} displays the details of {@code expectedLesson} correctly and matches"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void assertCardDisplay(LessonCard lessonCard, Lesson expectedLesson, int expectedId) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonCardHandle lessonCardHandle \u003d new LessonCardHandle(lessonCard.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expectedId + \". \", lessonCardHandle.getId());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // verify lesson details are displayed correctly"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplaysLesson(expectedLesson, lessonCardHandle);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/LessonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.TypicalLessonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private LessonListPanel lessonListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void updateLessonListTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d TypicalLessonList.getTypicalLessonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(lessons);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int size \u003d lessonListPanel.getViewItemCount();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // add new lesson"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessons.add(new LessonBuilder().build());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // update lesson list with new lesson"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListPanel.updateLessonList(lessons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // new lesson listed with other lessons"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonListPanel.getViewItemCount(), size + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void updateSingleLessonListTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d TypicalLessonList.getTypicalLessonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(lessons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // open a lesson"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonListPanel.updateLessonList(lessons.get(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // only one lesson listed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonListPanel.getViewItemCount(), 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Verifies that creating and deleting large number of lessons in {@code LessonListPanel} requires lesser than"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ObservableList\u003cLesson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }, \"Creation and deletion of lesson cards exceeded time limit\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Returns a list of lessons containing {@code lessonCount} lessons that is used to populate the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code LessonListPanel}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private ObservableList\u003cLesson\u003e createBackingList(int lessonCount) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ObservableList\u003cLesson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d TypicalLessonList.LESSON_DEFAULT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (int i \u003d 0; i \u003c lessonCount; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            lesson.setName(i + \" lesson\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            backingList.add(lesson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Initializes {@code lessonListPanelHandle} with a {@code LessonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code LessonListPanel}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void initUi(ObservableList\u003cLesson\u003e backingList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonListPanel lessonListPanel \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                new LessonListPanel(backingList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        uiPartRule.setUiPart(lessonListPanel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/LessonOverviewTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysLesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import guitests.guihandles.LessonOverviewHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class LessonOverviewTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // no optionals"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lessonWithNotOptionals \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withCoreHeaders(\"A\", \"B\", \"C\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withNoOptionalHeaders()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .withNoCards()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonOverview lessonOverview \u003d new LessonOverview(lessonWithNotOptionals);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        uiPartRule.setUiPart(lessonOverview);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplay(lessonOverview, lessonWithNotOptionals);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lessonWithOptionals \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        lessonOverview \u003d new LessonOverview(lessonWithOptionals);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        uiPartRule.setUiPart(lessonOverview);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplay(lessonOverview, lessonWithOptionals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonOverview lessonOverview \u003d new LessonOverview(lesson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same lesson -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonOverview copy \u003d new LessonOverview(lesson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonOverview, copy);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonOverview, lessonOverview);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonOverview, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonOverview, 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonOverview, new LessonCard(lesson, 0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // same lesson with same index but different index -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Lesson differentLesson \u003d new LessonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(lessonOverview, new LessonOverview(differentLesson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // different lesson, same index -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        differentLesson \u003d new LessonBuilder().withNoCards().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertNotEquals(lessonOverview, new LessonOverview(differentLesson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Asserts that {@code lessonOverview} displays the details of {@code expectedLesson} correctly and matches"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void assertCardDisplay(LessonOverview lessonOverview, Lesson expectedLesson) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        LessonOverviewHandle lessonOverviewHandle \u003d new LessonOverviewHandle(lessonOverview.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // verify lesson details are displayed correctly"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCardDisplaysLesson(expectedLesson, lessonOverviewHandle);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DigiPie": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertFalse(firstPointer \u003d\u003d null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.MainPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class MainPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private MainPanel mainPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private MainPanelHandle mainPanelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainPanel \u003d new MainPanel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        uiPartRule.setUiPart(mainPanel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainPanelHandle \u003d new MainPanelHandle(getChildNode(mainPanel.getRoot(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            MainPanelHandle.MAIN_PANEL_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"\", mainPanelHandle.getText());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // both question and answer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard quizCard \u003d new QuizCard(\"some question\", \"some answer\", Arrays.asList(\"Q\", \"A\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            \"Question\", \"Answer\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String totalCorrectAndTotalAttempts \u003d \"0 out of 4\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.interact(() -\u003e mainPanel.setFeedbackToUser("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            quizCard.generateOrderedQuizCardWithIndex(0, QuizMode.PREVIEW),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                totalCorrectAndTotalAttempts));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"Question: some question\\nAnswer: some answer\\n\\nPress Enter to go to the next question\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                + \"\\n\\nCurrent total correct questions: \" + totalCorrectAndTotalAttempts, mainPanelHandle.getText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // only question"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.interact(() -\u003e mainPanel.setFeedbackToUser("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            quizCard.generateOrderedQuizCardWithIndex(0, QuizMode.REVIEW),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                totalCorrectAndTotalAttempts));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        assertEquals(\"Question: some question\\n\\nType the Answer for the Question above and press Enter\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                + \"\\n\\nCurrent total correct questions: \" + totalCorrectAndTotalAttempts, mainPanelHandle.getText());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // wrong twice in a row"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard wrongTwiceCard \u003d quizCard.generateOrderedQuizCardWithIndex(0, QuizMode.REVIEW);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        wrongTwiceCard.isCorrect(\"wrong\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        wrongTwiceCard.isCorrect(\"wrong\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        guiRobot.interact(() -\u003e mainPanel.setFeedbackToUser(wrongTwiceCard,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                totalCorrectAndTotalAttempts));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"Question: some question\\nAnswer: some answer\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"\\nType the Answer for the Question above and press Enter\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "            + \"\\n\\nCurrent total correct questions: \" + totalCorrectAndTotalAttempts, mainPanelHandle.getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // switch back to management mode, so become blank"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "        guiRobot.interact(() -\u003e mainPanel.setFeedbackToUser(null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lallanachang"
        },
        "content": "                totalCorrectAndTotalAttempts));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"\", mainPanelHandle.getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 58,
      "lallanachang": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvLessonListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "import seedu.address.storage.CsvUserStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvLessonListStorage csvLessonListStorage \u003d new CsvLessonListStorage(temporaryFolder.newFolder().toPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "        CsvUserStorage csvUserStorage \u003d new CsvUserStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ManagementModelManager(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                new QuizModelManager(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenefdw"
        },
        "content": "                new StorageManager(jsonUserPrefsStorage, csvLessonListStorage, csvUserStorage)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenefdw": 8,
      "halcyoneee": 2,
      "-": 93,
      "DigiPie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/QuizResultPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.QuizResultPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizResultPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setFeedbackToUser() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e quizCardList \u003d SESSION_DEFAULT.generateSession();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizResultPanel quizResultPanel \u003d new QuizResultPanel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        quizResultPanel.setFeedbackToUser(quizCardList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizResultPanelHandle resultQuizCardHandle \u003d new QuizResultPanelHandle(quizResultPanel.getRoot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(resultQuizCardHandle.getViewItemCount(), quizCardList.size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultQuizCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_DEFAULT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.ResultQuizCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.QuizCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class ResultQuizCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        List\u003cQuizCard\u003e quizCardList \u003d SESSION_DEFAULT.generateSession();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizCard quizCard \u003d quizCardList.get(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ResultQuizCard resultQuizCard \u003d new ResultQuizCard(quizCard, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        uiPartRule.setUiPart(resultQuizCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ResultQuizCardHandle resultQuizCardHandle \u003d new ResultQuizCardHandle(resultQuizCard.getRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"1. \", resultQuizCardHandle.getId());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // verify card details are displayed correctly"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(String.format(\"%s / %s\", quizCard.getQuestion(), quizCard.getAnswer()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            resultQuizCardHandle.getCores());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"Streak: 0\", resultQuizCardHandle.getStreak());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"Total attempts: 0\", resultQuizCardHandle.getTotalAttempts());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"Accuracy: 0%\", resultQuizCardHandle.getAccuracy());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import guitests.guihandles.FlashcardCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import guitests.guihandles.LessonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import guitests.guihandles.LessonOverviewHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.ui.FlashcardCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.ui.LessonCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCardEquals(LessonCardHandle expectedCard, LessonCardHandle actualCard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d expectedCard.getHeaders();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headersToCompare \u003d expectedCard.getHeaders();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(headers, headersToCompare);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedLesson}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCardDisplaysLesson(Lesson expectedLesson, LessonCardHandle actualCard) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expectedLesson.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(LessonCard.getCountString(expectedLesson.getCardCount()), actualCard.getCount());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d actualCard.getHeaders();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headersToCompare \u003d new ArrayList\u003c\u003e(expectedLesson.getCoreHeaders());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headersToCompare.addAll(expectedLesson.getOptionalHeaders());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(headers, headersToCompare);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedLesson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCardDisplaysLesson(Lesson expectedLesson, LessonOverviewHandle actualCard) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(expectedLesson.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(LessonCard.getCountString(expectedLesson.getCardCount()), actualCard.getCount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d actualCard.getHeaders();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headersToCompare \u003d new ArrayList\u003c\u003e(expectedLesson.getCoreHeaders());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headersToCompare.addAll(expectedLesson.getOptionalHeaders());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedLesson.getCoreHeaderSize(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            headersToCompare.set(i, (i + 1) + \". \" + headersToCompare.get(i));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals(headers, headersToCompare);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public static void assertCardDisplaysCard(Card expectedCard, FlashcardCardHandle actualCard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                FlashcardCard.formatName(expectedCard.getCore(0), expectedCard.getCore(1)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                actualCard.getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headers \u003d actualCard.getHeaders();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cString\u003e headersToCompare \u003d new ArrayList\u003c\u003e(expectedCard.getCores());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        headersToCompare.addAll(expectedCard.getOptionals());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (String s: headersToCompare) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            assertTrue(headers.get(i).contains(s));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "DigiPie": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/BrainTrainSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_COMMANDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.LessonListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.MainPanelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * A system test class for BrainTrain, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public abstract class BrainTrainSystemTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", \"def-colour\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                    \"def-colour\", CommandBox.STYLE_CLASS_ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation(), getUserDataFileLocation());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected LessonList getInitialData() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return SampleDataUtil.getSampleBrainTrain();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns the directory of the user data file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected Path getUserDataFileLocation() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return TestApp.SAVE_USER_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public LessonListPanelHandle getLessonListPanel() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return mainWindowHandle.getLessonListPanel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public MainPanelHandle getMainPanel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return mainWindowHandle.getMainPanel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same LessonList objects as {@code expectedModel}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        if (expectedModel instanceof ManagementModel) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            ManagementModel managementModel \u003d (ManagementModel) expectedModel;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(managementModel.getLessons(), testApp.readStorageLessonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            QuizModel quizModel \u003d (QuizModel) expectedModel;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            assertEquals(quizModel.getManagementModelUser(), testApp.getQuizModel().getManagementModelUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertEquals(MESSAGE_LESSON_COMMANDS, getResultDisplay().getText());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns a defensive copy of the current management model."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    protected ManagementModel getManagementModel() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return testApp.getManagementModel();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Returns a defensive copy of the current quiz model."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public QuizModel getQuizModel() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        return testApp.getQuizModel();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 164,
      "DigiPie": 4
    }
  },
  {
    "path": "src/test/java/systemtests/EditLessonCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.logic.commands.management.EditLessonCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.logic.commands.management.EditLessonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "public class EditLessonCommandSystemTest extends BrainTrainSystemTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: invalid command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e fails, invalid command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String command \u003d \"someinvalidcommand\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        /* Case: edits lesson at index 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "         * -\u003e edits lesson"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        command \u003d EditLessonCommand.COMMAND_WORD + \" \" + index.getOneBased();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModel expectedModel \u003d getManagementModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedLesson \u003d expectedModel.getLesson(index.getZeroBased()).getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedLesson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "    private void assertCommandSuccess(String command, ManagementModel expectedModel, String expectedLesson) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS, expectedLesson, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * {@code BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModel expectedModel \u003d getManagementModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 52,
      "DigiPie": 13
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.ListLessonsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class HelpCommandSystemTest extends BrainTrainSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        getLessonListPanel().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        getMainPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        executeCommand(ListLessonsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertNotEquals(HelpCommand.MESSAGE_SUCCESS, getResultDisplay().getText());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 8,
      "-": 78
    }
  },
  {
    "path": "src/test/java/systemtests/ListLessonCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.ListLessonsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class ListLessonCommandSystemTest extends BrainTrainSystemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: invalid command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e fails, invalid command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String command \u003d \"someinvalidcommand\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: list all lessons in braintrain"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e 1 lesson found"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        command \u003d ListLessonsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Model expectedModel \u003d getManagementModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModel managementModel \u003d (ManagementModel) expectedModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ListLessonsCommand listLessonsCommand \u003d new ListLessonsCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedResultMessage \u003d listLessonsCommand.buildList(managementModel.getLessons());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * {@code BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        ManagementModel expectedModel \u003d getManagementModel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 64
    }
  },
  {
    "path": "src/test/java/systemtests/QuizAnswerCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSON_COMMANDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizAnswerCommand.MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.logic.commands.quiz.QuizAnswerCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_1_CARD_1_CORE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_1_CARD_1_CORE_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_1_CARD_2_CORE_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleCards.SAMPLE_1_CARD_2_CORE_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import static seedu.address.model.util.SampleLessons.SAMPLE_1_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import static seedu.address.testutil.TypicalSession.SESSION_REVIEW_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.logic.commands.management.StartCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "import seedu.address.model.modelmanager.ManagementModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.modelmanager.QuizModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "public class QuizAnswerCommandSystemTest extends BrainTrainSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public void answer() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        // starts the quiz"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        ManagementModel expectedMgtModel \u003d getManagementModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d expectedMgtModel.getLessons();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        // Find the sample 1 lesson\u0027s index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            if (lessons.get(i).getName().equals(SAMPLE_1_NAME)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DigiPie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(StartCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        sb.append(\" \").append(index.getOneBased()).append(\" c/2 m/REVIEW \\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        executeCommand(sb.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: some invalid quiz command in braintrain"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e fails, invalid command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandFailure(\"\\\\invalid\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: answer a question correctly in braintrain"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e answer 1st question"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        String command \u003d SAMPLE_1_CARD_2_CORE_2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel expectedModel \u003d getQuizModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        Quiz quiz \u003d new Quiz(SESSION_REVIEW_2.generateSession(), SESSION_REVIEW_2.getMode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.init(quiz, SESSION_REVIEW_2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        String expectedResultMessage \u003d MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: answer a question correctly in braintrain"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e answer 2nd question"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        command \u003d SAMPLE_1_CARD_1_CORE_2;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedResultMessage \u003d MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: answer a question correctly in braintrain"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e answer 3rd question"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        command \u003d SAMPLE_1_CARD_2_CORE_1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedResultMessage \u003d MESSAGE_CORRECT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(0, command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.getNextCard();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: answer a question correctly in braintrain"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e answer 4th and last question"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DigiPie"
        },
        "content": "        command \u003d SAMPLE_1_CARD_1_CORE_1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedResultMessage \u003d MESSAGE_CORRECT + MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateTotalAttemptsAndStreak(1, command);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        /* Case: exit quiz mode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         * -\u003e returns to management mode"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        command \u003d \"any valid answer input works\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedResultMessage \u003d MESSAGE_LESSON_COMMANDS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.setResultDisplay(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        expectedModel.updateUserProfile(expectedModel.end());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * {@code BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     * @see BrainTrainSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        QuizModel expectedModel \u003d getQuizModel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 109,
      "DigiPie": 28
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cLessonList\u003e lessonList, Path saveFileLocation,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "                                    Path saveUserFileLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcyoneee"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(lessonList, saveFileLocation, saveUserFileLocation));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcyoneee": 4,
      "-": 71
    }
  }
]
